// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vision_messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vision_messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vision_messages {

namespace {

const ::google::protobuf::Descriptor* VisionMessageWrapperPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisionMessageWrapperPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* VisionCommandPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisionCommandPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* VisionResponsePBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisionResponsePBMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VisionResponsePBMsg_ResponseType_e_descriptor_ = NULL;
const ::google::protobuf::Descriptor* VehicleInertialStatePBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleInertialStatePBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetInfoPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetInfoPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleFilterVisionObjPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleFilterVisionObjPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManagerStatsPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManagerStatsPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManagerControlPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManagerControlPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraSteeringPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraSteeringPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageCompressionControlPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageCompressionControlPBMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ImageCompressionControlPBMsg_VisionImageCompressionType_e_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ImageLoggingControlPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageLoggingControlPBMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ImageLoggingControlPBMsg_VisionLoggingType_e_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ImageLocationPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageLocationPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroundTargetLocationPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroundTargetLocationPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageProcTargetInfoResultsPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageProcTargetInfoResultsPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetParametersPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetParametersPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeSyncPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeSyncPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeoCoordinateSystemSetupPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeoCoordinateSystemSetupPBMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GeoCoordinateSystemSetupPBMsg_GeoCoordinateSystemConversionType_e_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LatLonXYConversionPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LatLonXYConversionPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageCaptureControlPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageCaptureControlPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraParametersSetupPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraParametersSetupPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamControlPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamControlPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageCaptureStatusPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageCaptureStatusPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* VisionProcessingControlPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisionProcessingControlPBMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VisionProcessingControlPBMsg_VisionProcessingModeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VisionProcessingControlPBMsg_TargetProcessingModeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VisionProcessingControlPBMsg_GPSDeniedProcessingModeEnum_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CameraCalControlPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraCalControlPBMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CameraCalControlPBMsg_CameraCalibrationType_e_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CameraCalControlPBMsg_CameraCalCmd_e_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CameraCalStatusPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraCalStatusPBMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CameraCalStatusPBMsg_CameraCalState_e_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FeatureMatchProcCtrlPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureMatchProcCtrlPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureMatchProcStatusPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureMatchProcStatusPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListOfManagerNamesPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListOfManagerNamesPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SteeringTorqueCtrlPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SteeringTorqueCtrlPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DceEPASteeringStatusPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DceEPASteeringStatusPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* LinearActuatorPositionCtrlPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinearActuatorPositionCtrlPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* KarTechLinearActuatorParamsPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KarTechLinearActuatorParamsPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* KarTechLinearActuatorSetupPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KarTechLinearActuatorSetupPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeadOrientationPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeadOrientationPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SipAndPuffPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SipAndPuffPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMUCommandResponsePBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMUCommandResponsePBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaybackControlPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaybackControlPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeadTrackingControlPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeadTrackingControlPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackHeadOrientationPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackHeadOrientationPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMUAccelGyroDataPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMUAccelGyroDataPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPSFixPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPSFixPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* VidereSystemControlPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VidereSystemControlPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeadOrientationControlPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeadOrientationControlPBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* VehicleControlParametersPBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleControlParametersPBMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ImageCaptureSource_e_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CPImageCaptureFormat_e_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ImageCaptureError_e_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_vision_5fmessages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_vision_5fmessages_2eproto() {
  protobuf_AddDesc_vision_5fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vision_messages.proto");
  GOOGLE_CHECK(file != NULL);
  VisionMessageWrapperPBMsg_descriptor_ = file->message_type(0);
  static const int VisionMessageWrapperPBMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionMessageWrapperPBMsg, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionMessageWrapperPBMsg, msgqualifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionMessageWrapperPBMsg, msgdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionMessageWrapperPBMsg, msgdatasize_),
  };
  VisionMessageWrapperPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VisionMessageWrapperPBMsg_descriptor_,
      VisionMessageWrapperPBMsg::default_instance_,
      VisionMessageWrapperPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionMessageWrapperPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(VisionMessageWrapperPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionMessageWrapperPBMsg, _internal_metadata_),
      -1);
  VisionCommandPBMsg_descriptor_ = file->message_type(1);
  static const int VisionCommandPBMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionCommandPBMsg, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionCommandPBMsg, cmdqualifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionCommandPBMsg, cmddata_),
  };
  VisionCommandPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VisionCommandPBMsg_descriptor_,
      VisionCommandPBMsg::default_instance_,
      VisionCommandPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionCommandPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(VisionCommandPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionCommandPBMsg, _internal_metadata_),
      -1);
  VisionResponsePBMsg_descriptor_ = file->message_type(2);
  static const int VisionResponsePBMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionResponsePBMsg, cmdresponsetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionResponsePBMsg, cmdresponsemessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionResponsePBMsg, cmdresponsedata_),
  };
  VisionResponsePBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VisionResponsePBMsg_descriptor_,
      VisionResponsePBMsg::default_instance_,
      VisionResponsePBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionResponsePBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(VisionResponsePBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionResponsePBMsg, _internal_metadata_),
      -1);
  VisionResponsePBMsg_ResponseType_e_descriptor_ = VisionResponsePBMsg_descriptor_->enum_type(0);
  VehicleInertialStatePBMsg_descriptor_ = file->message_type(3);
  static const int VehicleInertialStatePBMsg_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInertialStatePBMsg, coordinateslatlonorxy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInertialStatePBMsg, latituderadory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInertialStatePBMsg, longituderadorx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInertialStatePBMsg, altitudemsl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInertialStatePBMsg, heightagl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInertialStatePBMsg, veleastmps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInertialStatePBMsg, velnorthmps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInertialStatePBMsg, veldownmps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInertialStatePBMsg, rollrad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInertialStatePBMsg, pitchrad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInertialStatePBMsg, yawrad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInertialStatePBMsg, rollrateradps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInertialStatePBMsg, pitchrateradps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInertialStatePBMsg, yawrateradps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInertialStatePBMsg, gpstimestampsec_),
  };
  VehicleInertialStatePBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleInertialStatePBMsg_descriptor_,
      VehicleInertialStatePBMsg::default_instance_,
      VehicleInertialStatePBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInertialStatePBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(VehicleInertialStatePBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInertialStatePBMsg, _internal_metadata_),
      -1);
  TargetInfoPBMsg_descriptor_ = file->message_type(4);
  static const int TargetInfoPBMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfoPBMsg, imagenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfoPBMsg, vehicleinertialstates_),
  };
  TargetInfoPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TargetInfoPBMsg_descriptor_,
      TargetInfoPBMsg::default_instance_,
      TargetInfoPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfoPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(TargetInfoPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfoPBMsg, _internal_metadata_),
      -1);
  BroadcastPBMsg_descriptor_ = file->message_type(5);
  static const int BroadcastPBMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastPBMsg, message_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastPBMsg, is_exception_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastPBMsg, report_),
  };
  BroadcastPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BroadcastPBMsg_descriptor_,
      BroadcastPBMsg::default_instance_,
      BroadcastPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(BroadcastPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastPBMsg, _internal_metadata_),
      -1);
  SimpleFilterVisionObjPBMsg_descriptor_ = file->message_type(6);
  static const int SimpleFilterVisionObjPBMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleFilterVisionObjPBMsg, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleFilterVisionObjPBMsg, image_jpeg_),
  };
  SimpleFilterVisionObjPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimpleFilterVisionObjPBMsg_descriptor_,
      SimpleFilterVisionObjPBMsg::default_instance_,
      SimpleFilterVisionObjPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleFilterVisionObjPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(SimpleFilterVisionObjPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleFilterVisionObjPBMsg, _internal_metadata_),
      -1);
  ManagerStatsPBMsg_descriptor_ = file->message_type(7);
  static const int ManagerStatsPBMsg_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerStatsPBMsg, managername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerStatsPBMsg, runningstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerStatsPBMsg, errorcondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerStatsPBMsg, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerStatsPBMsg, totalnumberofexecutecycles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerStatsPBMsg, numberofexecutecycles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerStatsPBMsg, timesincelaststatsreset_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerStatsPBMsg, minexecuteunitofworktime_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerStatsPBMsg, maxexecuteunitofworktime_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerStatsPBMsg, aveexecuteunitofworktime_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerStatsPBMsg, totalexecuteunitofworktime_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerStatsPBMsg, minsleeptime_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerStatsPBMsg, maxsleeptime_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerStatsPBMsg, avesleeptime_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerStatsPBMsg, totalsleeptime_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerStatsPBMsg, numberofwakeupcallswhileasleep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerStatsPBMsg, numberofwakeupcallswhileawake_),
  };
  ManagerStatsPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ManagerStatsPBMsg_descriptor_,
      ManagerStatsPBMsg::default_instance_,
      ManagerStatsPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerStatsPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(ManagerStatsPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerStatsPBMsg, _internal_metadata_),
      -1);
  ManagerControlPBMsg_descriptor_ = file->message_type(8);
  static const int ManagerControlPBMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerControlPBMsg, managername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerControlPBMsg, shutdownmanager_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerControlPBMsg, resetmgrstatstoggle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerControlPBMsg, publishmgrstatstime_sec_),
  };
  ManagerControlPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ManagerControlPBMsg_descriptor_,
      ManagerControlPBMsg::default_instance_,
      ManagerControlPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerControlPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(ManagerControlPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerControlPBMsg, _internal_metadata_),
      -1);
  CameraSteeringPBMsg_descriptor_ = file->message_type(9);
  static const int CameraSteeringPBMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSteeringPBMsg, camerasteeringmodespoi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSteeringPBMsg, coordinateslatlonorxy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSteeringPBMsg, spoilatituderadory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSteeringPBMsg, spoilongituderadorx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSteeringPBMsg, cameraazimuthanglerad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSteeringPBMsg, cameraelevationanglerad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSteeringPBMsg, camerazoompercent_),
  };
  CameraSteeringPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CameraSteeringPBMsg_descriptor_,
      CameraSteeringPBMsg::default_instance_,
      CameraSteeringPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSteeringPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(CameraSteeringPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSteeringPBMsg, _internal_metadata_),
      -1);
  ImageCompressionControlPBMsg_descriptor_ = file->message_type(10);
  static const int ImageCompressionControlPBMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCompressionControlPBMsg, enableimagecompression_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCompressionControlPBMsg, transmitcompressedimages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCompressionControlPBMsg, imagecomressiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCompressionControlPBMsg, imagecompressionratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCompressionControlPBMsg, framerate_),
  };
  ImageCompressionControlPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImageCompressionControlPBMsg_descriptor_,
      ImageCompressionControlPBMsg::default_instance_,
      ImageCompressionControlPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCompressionControlPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(ImageCompressionControlPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCompressionControlPBMsg, _internal_metadata_),
      -1);
  ImageCompressionControlPBMsg_VisionImageCompressionType_e_descriptor_ = ImageCompressionControlPBMsg_descriptor_->enum_type(0);
  ImageLoggingControlPBMsg_descriptor_ = file->message_type(11);
  static const int ImageLoggingControlPBMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLoggingControlPBMsg, enablelogging_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLoggingControlPBMsg, loggingtype_),
  };
  ImageLoggingControlPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImageLoggingControlPBMsg_descriptor_,
      ImageLoggingControlPBMsg::default_instance_,
      ImageLoggingControlPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLoggingControlPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(ImageLoggingControlPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLoggingControlPBMsg, _internal_metadata_),
      -1);
  ImageLoggingControlPBMsg_VisionLoggingType_e_descriptor_ = ImageLoggingControlPBMsg_descriptor_->enum_type(0);
  ImageLocationPBMsg_descriptor_ = file->message_type(12);
  static const int ImageLocationPBMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLocationPBMsg, imagenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLocationPBMsg, imagecenterlatituderadians_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLocationPBMsg, imagecenterlongituderadians_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLocationPBMsg, targetcornerlocations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLocationPBMsg, targetcornerslatlonorxy_),
  };
  ImageLocationPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImageLocationPBMsg_descriptor_,
      ImageLocationPBMsg::default_instance_,
      ImageLocationPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLocationPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(ImageLocationPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLocationPBMsg, _internal_metadata_),
      -1);
  GroundTargetLocationPBMsg_descriptor_ = file->message_type(13);
  static const int GroundTargetLocationPBMsg_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTargetLocationPBMsg, targettypecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTargetLocationPBMsg, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTargetLocationPBMsg, targetlatituderadians_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTargetLocationPBMsg, targetlongituderadians_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTargetLocationPBMsg, targetaltitudemsl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTargetLocationPBMsg, targetaltitudevalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTargetLocationPBMsg, targetazimuthradians_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTargetLocationPBMsg, targetelevationradians_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTargetLocationPBMsg, targetorientationradians_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTargetLocationPBMsg, targetazimuthelevationorientationvalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTargetLocationPBMsg, targetcovariancematrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTargetLocationPBMsg, targetcovariancevalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTargetLocationPBMsg, targetpixellocation_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTargetLocationPBMsg, targetpixellocation_y_),
  };
  GroundTargetLocationPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GroundTargetLocationPBMsg_descriptor_,
      GroundTargetLocationPBMsg::default_instance_,
      GroundTargetLocationPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTargetLocationPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(GroundTargetLocationPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTargetLocationPBMsg, _internal_metadata_),
      -1);
  ImageProcTargetInfoResultsPBMsg_descriptor_ = file->message_type(14);
  static const int ImageProcTargetInfoResultsPBMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcTargetInfoResultsPBMsg, imagelocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcTargetInfoResultsPBMsg, vehicleinertialstates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcTargetInfoResultsPBMsg, targetlocations_),
  };
  ImageProcTargetInfoResultsPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImageProcTargetInfoResultsPBMsg_descriptor_,
      ImageProcTargetInfoResultsPBMsg::default_instance_,
      ImageProcTargetInfoResultsPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcTargetInfoResultsPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(ImageProcTargetInfoResultsPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcTargetInfoResultsPBMsg, _internal_metadata_),
      -1);
  TargetParametersPBMsg_descriptor_ = file->message_type(15);
  static const int TargetParametersPBMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParametersPBMsg, targettypecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParametersPBMsg, istaticaltarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParametersPBMsg, targetsizeorwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParametersPBMsg, targetperimeterorlenght_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParametersPBMsg, targetirheatgradient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParametersPBMsg, targetirsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParametersPBMsg, targetrgbcolorcode_),
  };
  TargetParametersPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TargetParametersPBMsg_descriptor_,
      TargetParametersPBMsg::default_instance_,
      TargetParametersPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParametersPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(TargetParametersPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParametersPBMsg, _internal_metadata_),
      -1);
  TimeSyncPBMsg_descriptor_ = file->message_type(16);
  static const int TimeSyncPBMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncPBMsg, timesyncoffsetseconds_),
  };
  TimeSyncPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimeSyncPBMsg_descriptor_,
      TimeSyncPBMsg::default_instance_,
      TimeSyncPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(TimeSyncPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncPBMsg, _internal_metadata_),
      -1);
  GeoCoordinateSystemSetupPBMsg_descriptor_ = file->message_type(17);
  static const int GeoCoordinateSystemSetupPBMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoCoordinateSystemSetupPBMsg, geocoordinatesystemconversiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoCoordinateSystemSetupPBMsg, centerlatitudedegrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoCoordinateSystemSetupPBMsg, centerlongitudedegrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoCoordinateSystemSetupPBMsg, groundaltitudemsl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoCoordinateSystemSetupPBMsg, deltalatitudedegrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoCoordinateSystemSetupPBMsg, deltalongitudedegrees_),
  };
  GeoCoordinateSystemSetupPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GeoCoordinateSystemSetupPBMsg_descriptor_,
      GeoCoordinateSystemSetupPBMsg::default_instance_,
      GeoCoordinateSystemSetupPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoCoordinateSystemSetupPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(GeoCoordinateSystemSetupPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoCoordinateSystemSetupPBMsg, _internal_metadata_),
      -1);
  GeoCoordinateSystemSetupPBMsg_GeoCoordinateSystemConversionType_e_descriptor_ = GeoCoordinateSystemSetupPBMsg_descriptor_->enum_type(0);
  LatLonXYConversionPBMsg_descriptor_ = file->message_type(18);
  static const int LatLonXYConversionPBMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatLonXYConversionPBMsg, latlontoxyconversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatLonXYConversionPBMsg, latitudedegrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatLonXYConversionPBMsg, longitudedegrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatLonXYConversionPBMsg, x_posmeters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatLonXYConversionPBMsg, y_posmeters_),
  };
  LatLonXYConversionPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LatLonXYConversionPBMsg_descriptor_,
      LatLonXYConversionPBMsg::default_instance_,
      LatLonXYConversionPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatLonXYConversionPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(LatLonXYConversionPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatLonXYConversionPBMsg, _internal_metadata_),
      -1);
  ImageCaptureControlPBMsg_descriptor_ = file->message_type(19);
  static const int ImageCaptureControlPBMsg_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureControlPBMsg, imagecaptureenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureControlPBMsg, numberofimagestocapture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureControlPBMsg, desiredframespersecond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureControlPBMsg, desiredimagewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureControlPBMsg, desiredimageheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureControlPBMsg, imagecapturesource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureControlPBMsg, imagecaptureformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureControlPBMsg, imagecapturesourceconfigpri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureControlPBMsg, imagecapturesourceconfigsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureControlPBMsg, imagesourcelooparound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureControlPBMsg, autofocusenable_),
  };
  ImageCaptureControlPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImageCaptureControlPBMsg_descriptor_,
      ImageCaptureControlPBMsg::default_instance_,
      ImageCaptureControlPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureControlPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(ImageCaptureControlPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureControlPBMsg, _internal_metadata_),
      -1);
  CameraParametersSetupPBMsg_descriptor_ = file->message_type(20);
  static const int CameraParametersSetupPBMsg_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParametersSetupPBMsg, imagecaptureformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParametersSetupPBMsg, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParametersSetupPBMsg, framewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParametersSetupPBMsg, frameheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParametersSetupPBMsg, frameratefps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParametersSetupPBMsg, autofocus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParametersSetupPBMsg, focusvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParametersSetupPBMsg, brightness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParametersSetupPBMsg, contrast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParametersSetupPBMsg, saturation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParametersSetupPBMsg, hue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParametersSetupPBMsg, gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParametersSetupPBMsg, exposure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParametersSetupPBMsg, whiteballanceblue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParametersSetupPBMsg, whiteballancered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParametersSetupPBMsg, externaltrigger_),
  };
  CameraParametersSetupPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CameraParametersSetupPBMsg_descriptor_,
      CameraParametersSetupPBMsg::default_instance_,
      CameraParametersSetupPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParametersSetupPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(CameraParametersSetupPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParametersSetupPBMsg, _internal_metadata_),
      -1);
  StreamControlPBMsg_descriptor_ = file->message_type(21);
  static const int StreamControlPBMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamControlPBMsg, streamimagesenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamControlPBMsg, streamimageframerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamControlPBMsg, imagecompressionquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamControlPBMsg, streamimagescaledownfactor_),
  };
  StreamControlPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StreamControlPBMsg_descriptor_,
      StreamControlPBMsg::default_instance_,
      StreamControlPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamControlPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(StreamControlPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamControlPBMsg, _internal_metadata_),
      -1);
  ImageCaptureStatusPBMsg_descriptor_ = file->message_type(22);
  static const int ImageCaptureStatusPBMsg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureStatusPBMsg, imagecaptureenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureStatusPBMsg, imagecapturecomplete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureStatusPBMsg, endofimages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureStatusPBMsg, totalnumberofimagescaptured_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureStatusPBMsg, currentnumberofimagescaptured_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureStatusPBMsg, averageframespersecond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureStatusPBMsg, imagecapturesource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureStatusPBMsg, errorcode_),
  };
  ImageCaptureStatusPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImageCaptureStatusPBMsg_descriptor_,
      ImageCaptureStatusPBMsg::default_instance_,
      ImageCaptureStatusPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureStatusPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(ImageCaptureStatusPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCaptureStatusPBMsg, _internal_metadata_),
      -1);
  VisionProcessingControlPBMsg_descriptor_ = file->message_type(23);
  static const int VisionProcessingControlPBMsg_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionProcessingControlPBMsg, imagecaptureenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionProcessingControlPBMsg, numberofimagestocapture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionProcessingControlPBMsg, desiredframespersecond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionProcessingControlPBMsg, gpuprocessingenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionProcessingControlPBMsg, targetimageprocessingenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionProcessingControlPBMsg, visionprocessingmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionProcessingControlPBMsg, targetprocessingmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionProcessingControlPBMsg, gpsdeniedprocessingenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionProcessingControlPBMsg, gpsdeniedprocessingmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionProcessingControlPBMsg, recordimagesenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionProcessingControlPBMsg, streamimagesenabled_),
  };
  VisionProcessingControlPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VisionProcessingControlPBMsg_descriptor_,
      VisionProcessingControlPBMsg::default_instance_,
      VisionProcessingControlPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionProcessingControlPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(VisionProcessingControlPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionProcessingControlPBMsg, _internal_metadata_),
      -1);
  VisionProcessingControlPBMsg_VisionProcessingModeEnum_descriptor_ = VisionProcessingControlPBMsg_descriptor_->enum_type(0);
  VisionProcessingControlPBMsg_TargetProcessingModeEnum_descriptor_ = VisionProcessingControlPBMsg_descriptor_->enum_type(1);
  VisionProcessingControlPBMsg_GPSDeniedProcessingModeEnum_descriptor_ = VisionProcessingControlPBMsg_descriptor_->enum_type(2);
  CameraCalControlPBMsg_descriptor_ = file->message_type(24);
  static const int CameraCalControlPBMsg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalControlPBMsg, cameracalibrationtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalControlPBMsg, cameracalcmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalControlPBMsg, cameracalbasefilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalControlPBMsg, numberofrows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalControlPBMsg, numberofcols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalControlPBMsg, squaresizemillimeters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalControlPBMsg, yawcorrectiondegrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalControlPBMsg, pitchcorrectiondegrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalControlPBMsg, rollcorrectiondegrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalControlPBMsg, delxcorrectioncentimeters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalControlPBMsg, delycorrectioncentimeters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalControlPBMsg, delzcorrectioncentimeters_),
  };
  CameraCalControlPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CameraCalControlPBMsg_descriptor_,
      CameraCalControlPBMsg::default_instance_,
      CameraCalControlPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalControlPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(CameraCalControlPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalControlPBMsg, _internal_metadata_),
      -1);
  CameraCalControlPBMsg_CameraCalibrationType_e_descriptor_ = CameraCalControlPBMsg_descriptor_->enum_type(0);
  CameraCalControlPBMsg_CameraCalCmd_e_descriptor_ = CameraCalControlPBMsg_descriptor_->enum_type(1);
  CameraCalStatusPBMsg_descriptor_ = file->message_type(25);
  static const int CameraCalStatusPBMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalStatusPBMsg, cameracalstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalStatusPBMsg, numberofimagescaptured_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalStatusPBMsg, cameracalstatusmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalStatusPBMsg, imageok_),
  };
  CameraCalStatusPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CameraCalStatusPBMsg_descriptor_,
      CameraCalStatusPBMsg::default_instance_,
      CameraCalStatusPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalStatusPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(CameraCalStatusPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalStatusPBMsg, _internal_metadata_),
      -1);
  CameraCalStatusPBMsg_CameraCalState_e_descriptor_ = CameraCalStatusPBMsg_descriptor_->enum_type(0);
  FeatureMatchProcCtrlPBMsg_descriptor_ = file->message_type(26);
  static const int FeatureMatchProcCtrlPBMsg_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, featurematchingproccmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, featureextractiontyperoutine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, featurematchtyperoutine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, fmimagepostprocessmethod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, usegpuprocessing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, parami_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, parami_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, parami_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, parami_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, parami_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, parami_6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, parami_7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, parami_8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, parami_9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, paramf_10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, paramf_11_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, paramf_12_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, paramf_13_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, paramf_14_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, paramf_15_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, paramf_16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, paramf_17_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, paramf_18_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, paramf_19_),
  };
  FeatureMatchProcCtrlPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeatureMatchProcCtrlPBMsg_descriptor_,
      FeatureMatchProcCtrlPBMsg::default_instance_,
      FeatureMatchProcCtrlPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(FeatureMatchProcCtrlPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcCtrlPBMsg, _internal_metadata_),
      -1);
  FeatureMatchProcStatusPBMsg_descriptor_ = file->message_type(27);
  static const int FeatureMatchProcStatusPBMsg_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, featurematchingstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, featureextractiontyperoutine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, featurematchtyperoutine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, statusmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, numberofimagescaptured_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, processtimer_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, processtimer_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, statusvali_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, statusvali_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, statusvali_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, statusvali_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, statusvali_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, statusvali_6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, statusvali_7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, statusvali_8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, statusvali_9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, statusvalf_10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, statusvalf_11_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, statusvalf_12_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, statusvalf_13_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, statusvalf_14_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, statusvalf_15_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, statusvalf_16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, statusvalf_17_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, statusvalf_18_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, statusvalf_19_),
  };
  FeatureMatchProcStatusPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeatureMatchProcStatusPBMsg_descriptor_,
      FeatureMatchProcStatusPBMsg::default_instance_,
      FeatureMatchProcStatusPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(FeatureMatchProcStatusPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureMatchProcStatusPBMsg, _internal_metadata_),
      -1);
  ListOfManagerNamesPBMsg_descriptor_ = file->message_type(28);
  static const int ListOfManagerNamesPBMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOfManagerNamesPBMsg, numberofmanagers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOfManagerNamesPBMsg, listofmanagernames_),
  };
  ListOfManagerNamesPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListOfManagerNamesPBMsg_descriptor_,
      ListOfManagerNamesPBMsg::default_instance_,
      ListOfManagerNamesPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOfManagerNamesPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(ListOfManagerNamesPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOfManagerNamesPBMsg, _internal_metadata_),
      -1);
  SteeringTorqueCtrlPBMsg_descriptor_ = file->message_type(29);
  static const int SteeringTorqueCtrlPBMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SteeringTorqueCtrlPBMsg, steeringtorquepercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SteeringTorqueCtrlPBMsg, steeringtorquemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SteeringTorqueCtrlPBMsg, steeringcontrolenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SteeringTorqueCtrlPBMsg, manualextcontrol_),
  };
  SteeringTorqueCtrlPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SteeringTorqueCtrlPBMsg_descriptor_,
      SteeringTorqueCtrlPBMsg::default_instance_,
      SteeringTorqueCtrlPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SteeringTorqueCtrlPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(SteeringTorqueCtrlPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SteeringTorqueCtrlPBMsg, _internal_metadata_),
      -1);
  DceEPASteeringStatusPBMsg_descriptor_ = file->message_type(30);
  static const int DceEPASteeringStatusPBMsg_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DceEPASteeringStatusPBMsg, motorcurrentamps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DceEPASteeringStatusPBMsg, pwmdutycyclepercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DceEPASteeringStatusPBMsg, motortorquepercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DceEPASteeringStatusPBMsg, supplyvoltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DceEPASteeringStatusPBMsg, tempdegc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DceEPASteeringStatusPBMsg, steeringangledeg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DceEPASteeringStatusPBMsg, steeringtorquemapsetting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DceEPASteeringStatusPBMsg, switchposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DceEPASteeringStatusPBMsg, torquea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DceEPASteeringStatusPBMsg, torqueb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DceEPASteeringStatusPBMsg, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DceEPASteeringStatusPBMsg, statusflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DceEPASteeringStatusPBMsg, limitflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DceEPASteeringStatusPBMsg, manualextcontrol_),
  };
  DceEPASteeringStatusPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DceEPASteeringStatusPBMsg_descriptor_,
      DceEPASteeringStatusPBMsg::default_instance_,
      DceEPASteeringStatusPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DceEPASteeringStatusPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(DceEPASteeringStatusPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DceEPASteeringStatusPBMsg, _internal_metadata_),
      -1);
  LinearActuatorPositionCtrlPBMsg_descriptor_ = file->message_type(31);
  static const int LinearActuatorPositionCtrlPBMsg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearActuatorPositionCtrlPBMsg, positionpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearActuatorPositionCtrlPBMsg, clutchenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearActuatorPositionCtrlPBMsg, motorenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearActuatorPositionCtrlPBMsg, manualextcontrol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearActuatorPositionCtrlPBMsg, motorcurrentamps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearActuatorPositionCtrlPBMsg, tempdegc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearActuatorPositionCtrlPBMsg, errorflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearActuatorPositionCtrlPBMsg, actuatorsetupmode_),
  };
  LinearActuatorPositionCtrlPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LinearActuatorPositionCtrlPBMsg_descriptor_,
      LinearActuatorPositionCtrlPBMsg::default_instance_,
      LinearActuatorPositionCtrlPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearActuatorPositionCtrlPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(LinearActuatorPositionCtrlPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearActuatorPositionCtrlPBMsg, _internal_metadata_),
      -1);
  KarTechLinearActuatorParamsPBMsg_descriptor_ = file->message_type(32);
  static const int KarTechLinearActuatorParamsPBMsg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KarTechLinearActuatorParamsPBMsg, minpositioninches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KarTechLinearActuatorParamsPBMsg, maxpositioninches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KarTechLinearActuatorParamsPBMsg, motormaxcurrentlimitamps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KarTechLinearActuatorParamsPBMsg, feedbackctrl_errdeadbandinces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KarTechLinearActuatorParamsPBMsg, feedbackctrl_kp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KarTechLinearActuatorParamsPBMsg, feedbackctrl_ki_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KarTechLinearActuatorParamsPBMsg, feedbackctrl_kd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KarTechLinearActuatorParamsPBMsg, feedbackctrl_clfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KarTechLinearActuatorParamsPBMsg, motor_minpwm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KarTechLinearActuatorParamsPBMsg, motor_maxpwm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KarTechLinearActuatorParamsPBMsg, motor_pwmfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KarTechLinearActuatorParamsPBMsg, positionreachederrortimemsec_),
  };
  KarTechLinearActuatorParamsPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KarTechLinearActuatorParamsPBMsg_descriptor_,
      KarTechLinearActuatorParamsPBMsg::default_instance_,
      KarTechLinearActuatorParamsPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KarTechLinearActuatorParamsPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(KarTechLinearActuatorParamsPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KarTechLinearActuatorParamsPBMsg, _internal_metadata_),
      -1);
  KarTechLinearActuatorSetupPBMsg_descriptor_ = file->message_type(33);
  static const int KarTechLinearActuatorSetupPBMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KarTechLinearActuatorSetupPBMsg, resetoutputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KarTechLinearActuatorSetupPBMsg, resethardwarecfgs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KarTechLinearActuatorSetupPBMsg, resetusercfgs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KarTechLinearActuatorSetupPBMsg, resetall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KarTechLinearActuatorSetupPBMsg, autozerocal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KarTechLinearActuatorSetupPBMsg, setcancommandresponsids_),
  };
  KarTechLinearActuatorSetupPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KarTechLinearActuatorSetupPBMsg_descriptor_,
      KarTechLinearActuatorSetupPBMsg::default_instance_,
      KarTechLinearActuatorSetupPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KarTechLinearActuatorSetupPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(KarTechLinearActuatorSetupPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KarTechLinearActuatorSetupPBMsg, _internal_metadata_),
      -1);
  HeadOrientationPBMsg_descriptor_ = file->message_type(34);
  static const int HeadOrientationPBMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadOrientationPBMsg, headrolldegrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadOrientationPBMsg, headpitchdegrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadOrientationPBMsg, headyawdegrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadOrientationPBMsg, covariancenorm_),
  };
  HeadOrientationPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeadOrientationPBMsg_descriptor_,
      HeadOrientationPBMsg::default_instance_,
      HeadOrientationPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadOrientationPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(HeadOrientationPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadOrientationPBMsg, _internal_metadata_),
      -1);
  SipAndPuffPBMsg_descriptor_ = file->message_type(35);
  static const int SipAndPuffPBMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SipAndPuffPBMsg, sipandpuffpecent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SipAndPuffPBMsg, sipandpuffintegralpercent_),
  };
  SipAndPuffPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SipAndPuffPBMsg_descriptor_,
      SipAndPuffPBMsg::default_instance_,
      SipAndPuffPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SipAndPuffPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(SipAndPuffPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SipAndPuffPBMsg, _internal_metadata_),
      -1);
  IMUCommandResponsePBMsg_descriptor_ = file->message_type(36);
  static const int IMUCommandResponsePBMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUCommandResponsePBMsg, imuremotectrlenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUCommandResponsePBMsg, cmdrspmsg_),
  };
  IMUCommandResponsePBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IMUCommandResponsePBMsg_descriptor_,
      IMUCommandResponsePBMsg::default_instance_,
      IMUCommandResponsePBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUCommandResponsePBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(IMUCommandResponsePBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUCommandResponsePBMsg, _internal_metadata_),
      -1);
  PlaybackControlPBMsg_descriptor_ = file->message_type(37);
  static const int PlaybackControlPBMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackControlPBMsg, datalogdirectory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackControlPBMsg, enableplayback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackControlPBMsg, loopbacktostartofdatarecords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackControlPBMsg, startplayback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackControlPBMsg, timesyncplayback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackControlPBMsg, resetplayback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackControlPBMsg, playfortimeseconds_),
  };
  PlaybackControlPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlaybackControlPBMsg_descriptor_,
      PlaybackControlPBMsg::default_instance_,
      PlaybackControlPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackControlPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlaybackControlPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaybackControlPBMsg, _internal_metadata_),
      -1);
  HeadTrackingControlPBMsg_descriptor_ = file->message_type(38);
  static const int HeadTrackingControlPBMsg_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadTrackingControlPBMsg, canny_low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadTrackingControlPBMsg, canny_high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadTrackingControlPBMsg, glyphareapixels_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadTrackingControlPBMsg, glyphareapixels_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadTrackingControlPBMsg, numberofiterations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadTrackingControlPBMsg, reprojectionerrordistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadTrackingControlPBMsg, confidencepercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadTrackingControlPBMsg, headtrackingimagedisplaytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadTrackingControlPBMsg, glyphmodelindex_),
  };
  HeadTrackingControlPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeadTrackingControlPBMsg_descriptor_,
      HeadTrackingControlPBMsg::default_instance_,
      HeadTrackingControlPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadTrackingControlPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(HeadTrackingControlPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadTrackingControlPBMsg, _internal_metadata_),
      -1);
  TrackHeadOrientationPBMsg_descriptor_ = file->message_type(39);
  static const int TrackHeadOrientationPBMsg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackHeadOrientationPBMsg, headorientationquaternion_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackHeadOrientationPBMsg, headorientationquaternion_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackHeadOrientationPBMsg, headorientationquaternion_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackHeadOrientationPBMsg, headorientationquaternion_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackHeadOrientationPBMsg, headtranslationvec_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackHeadOrientationPBMsg, headtranslationvec_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackHeadOrientationPBMsg, headtranslationvec_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackHeadOrientationPBMsg, isdatavalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackHeadOrientationPBMsg, imagenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackHeadOrientationPBMsg, imagecapturetimestampsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackHeadOrientationPBMsg, videretimestampsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackHeadOrientationPBMsg, covariancenorm_),
  };
  TrackHeadOrientationPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrackHeadOrientationPBMsg_descriptor_,
      TrackHeadOrientationPBMsg::default_instance_,
      TrackHeadOrientationPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackHeadOrientationPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrackHeadOrientationPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackHeadOrientationPBMsg, _internal_metadata_),
      -1);
  IMUAccelGyroDataPBMsg_descriptor_ = file->message_type(40);
  static const int IMUAccelGyroDataPBMsg_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUAccelGyroDataPBMsg, imulocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUAccelGyroDataPBMsg, imutimestampsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUAccelGyroDataPBMsg, videretimestampsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUAccelGyroDataPBMsg, accelmps2_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUAccelGyroDataPBMsg, accelmps2_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUAccelGyroDataPBMsg, accelmps2_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUAccelGyroDataPBMsg, gyroradpersec_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUAccelGyroDataPBMsg, gyroradpersec_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUAccelGyroDataPBMsg, gyroradpersec_z_),
  };
  IMUAccelGyroDataPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IMUAccelGyroDataPBMsg_descriptor_,
      IMUAccelGyroDataPBMsg::default_instance_,
      IMUAccelGyroDataPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUAccelGyroDataPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(IMUAccelGyroDataPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUAccelGyroDataPBMsg, _internal_metadata_),
      -1);
  GPSFixPBMsg_descriptor_ = file->message_type(41);
  static const int GPSFixPBMsg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFixPBMsg, trackingsatellites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFixPBMsg, latitudedeg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFixPBMsg, longitudedeg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFixPBMsg, altitudemsl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFixPBMsg, position_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFixPBMsg, position_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFixPBMsg, position_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFixPBMsg, velocity_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFixPBMsg, velocity_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFixPBMsg, velocity_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFixPBMsg, gpstimestampsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFixPBMsg, videretimestampsec_),
  };
  GPSFixPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GPSFixPBMsg_descriptor_,
      GPSFixPBMsg::default_instance_,
      GPSFixPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFixPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(GPSFixPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFixPBMsg, _internal_metadata_),
      -1);
  VidereSystemControlPBMsg_descriptor_ = file->message_type(42);
  static const int VidereSystemControlPBMsg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidereSystemControlPBMsg, systemstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidereSystemControlPBMsg, startprocess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidereSystemControlPBMsg, pauseproces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidereSystemControlPBMsg, stopprocess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidereSystemControlPBMsg, systemstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidereSystemControlPBMsg, statuscounter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidereSystemControlPBMsg, driverenableswitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidereSystemControlPBMsg, headcontrolenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidereSystemControlPBMsg, throttlecontrolenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidereSystemControlPBMsg, brakecontrolenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidereSystemControlPBMsg, nexusbcicontrolenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidereSystemControlPBMsg, nexusbcithrottleenable_),
  };
  VidereSystemControlPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VidereSystemControlPBMsg_descriptor_,
      VidereSystemControlPBMsg::default_instance_,
      VidereSystemControlPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidereSystemControlPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(VidereSystemControlPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidereSystemControlPBMsg, _internal_metadata_),
      -1);
  HeadOrientationControlPBMsg_descriptor_ = file->message_type(43);
  static const int HeadOrientationControlPBMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadOrientationControlPBMsg, headorientationoutputselect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadOrientationControlPBMsg, disableheadorientationkalmanfilter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadOrientationControlPBMsg, disablevehicleinputtoheadorientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadOrientationControlPBMsg, disablevehiclegravityfeedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadOrientationControlPBMsg, vehiclegravityfeedbackgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadOrientationControlPBMsg, headorientation_qvar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadOrientationControlPBMsg, headorientation_rvar_),
  };
  HeadOrientationControlPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeadOrientationControlPBMsg_descriptor_,
      HeadOrientationControlPBMsg::default_instance_,
      HeadOrientationControlPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadOrientationControlPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(HeadOrientationControlPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadOrientationControlPBMsg, _internal_metadata_),
      -1);
  VehicleControlParametersPBMsg_descriptor_ = file->message_type(44);
  static const int VehicleControlParametersPBMsg_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, sipnpuffblowgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, sipnpuffsuckgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, sipnpuffdeadbandpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, reversesipnpuffthrottlebrake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, throttlesipnpuffgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, brakesipnpuffgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, throttlebrakeheadtiltenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, throttlebrakeheadtiltforwarddeadbanddegrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, throttlebrakeheadtiltbackdeadbanddegrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, throttleheadtiltgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, brakeheadtiltgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, usesteeringanglecontrol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, steeringdeadband_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, steeringcontrolgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, maxlrheadrotationdegrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, headleftrighlpforder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, headleftrighlpfcutofffreqhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, steeringanglefeedback_kp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, steeringanglefeedback_kd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, steeringanglefeedback_ki_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, steeringbiasangledegrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, rcsteeringgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, bcigain_),
  };
  VehicleControlParametersPBMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleControlParametersPBMsg_descriptor_,
      VehicleControlParametersPBMsg::default_instance_,
      VehicleControlParametersPBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(VehicleControlParametersPBMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleControlParametersPBMsg, _internal_metadata_),
      -1);
  ImageCaptureSource_e_descriptor_ = file->enum_type(0);
  CPImageCaptureFormat_e_descriptor_ = file->enum_type(1);
  ImageCaptureError_e_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vision_5fmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VisionMessageWrapperPBMsg_descriptor_, &VisionMessageWrapperPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VisionCommandPBMsg_descriptor_, &VisionCommandPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VisionResponsePBMsg_descriptor_, &VisionResponsePBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleInertialStatePBMsg_descriptor_, &VehicleInertialStatePBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TargetInfoPBMsg_descriptor_, &TargetInfoPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BroadcastPBMsg_descriptor_, &BroadcastPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimpleFilterVisionObjPBMsg_descriptor_, &SimpleFilterVisionObjPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ManagerStatsPBMsg_descriptor_, &ManagerStatsPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ManagerControlPBMsg_descriptor_, &ManagerControlPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CameraSteeringPBMsg_descriptor_, &CameraSteeringPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImageCompressionControlPBMsg_descriptor_, &ImageCompressionControlPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImageLoggingControlPBMsg_descriptor_, &ImageLoggingControlPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImageLocationPBMsg_descriptor_, &ImageLocationPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GroundTargetLocationPBMsg_descriptor_, &GroundTargetLocationPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImageProcTargetInfoResultsPBMsg_descriptor_, &ImageProcTargetInfoResultsPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TargetParametersPBMsg_descriptor_, &TargetParametersPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimeSyncPBMsg_descriptor_, &TimeSyncPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GeoCoordinateSystemSetupPBMsg_descriptor_, &GeoCoordinateSystemSetupPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LatLonXYConversionPBMsg_descriptor_, &LatLonXYConversionPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImageCaptureControlPBMsg_descriptor_, &ImageCaptureControlPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CameraParametersSetupPBMsg_descriptor_, &CameraParametersSetupPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StreamControlPBMsg_descriptor_, &StreamControlPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImageCaptureStatusPBMsg_descriptor_, &ImageCaptureStatusPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VisionProcessingControlPBMsg_descriptor_, &VisionProcessingControlPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CameraCalControlPBMsg_descriptor_, &CameraCalControlPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CameraCalStatusPBMsg_descriptor_, &CameraCalStatusPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeatureMatchProcCtrlPBMsg_descriptor_, &FeatureMatchProcCtrlPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeatureMatchProcStatusPBMsg_descriptor_, &FeatureMatchProcStatusPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListOfManagerNamesPBMsg_descriptor_, &ListOfManagerNamesPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SteeringTorqueCtrlPBMsg_descriptor_, &SteeringTorqueCtrlPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DceEPASteeringStatusPBMsg_descriptor_, &DceEPASteeringStatusPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LinearActuatorPositionCtrlPBMsg_descriptor_, &LinearActuatorPositionCtrlPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KarTechLinearActuatorParamsPBMsg_descriptor_, &KarTechLinearActuatorParamsPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KarTechLinearActuatorSetupPBMsg_descriptor_, &KarTechLinearActuatorSetupPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeadOrientationPBMsg_descriptor_, &HeadOrientationPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SipAndPuffPBMsg_descriptor_, &SipAndPuffPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IMUCommandResponsePBMsg_descriptor_, &IMUCommandResponsePBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlaybackControlPBMsg_descriptor_, &PlaybackControlPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeadTrackingControlPBMsg_descriptor_, &HeadTrackingControlPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrackHeadOrientationPBMsg_descriptor_, &TrackHeadOrientationPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IMUAccelGyroDataPBMsg_descriptor_, &IMUAccelGyroDataPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GPSFixPBMsg_descriptor_, &GPSFixPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VidereSystemControlPBMsg_descriptor_, &VidereSystemControlPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeadOrientationControlPBMsg_descriptor_, &HeadOrientationControlPBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleControlParametersPBMsg_descriptor_, &VehicleControlParametersPBMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vision_5fmessages_2eproto() {
  delete VisionMessageWrapperPBMsg::default_instance_;
  delete VisionMessageWrapperPBMsg_reflection_;
  delete VisionCommandPBMsg::default_instance_;
  delete VisionCommandPBMsg_reflection_;
  delete VisionResponsePBMsg::default_instance_;
  delete VisionResponsePBMsg_reflection_;
  delete VehicleInertialStatePBMsg::default_instance_;
  delete VehicleInertialStatePBMsg_reflection_;
  delete TargetInfoPBMsg::default_instance_;
  delete TargetInfoPBMsg_reflection_;
  delete BroadcastPBMsg::default_instance_;
  delete BroadcastPBMsg_reflection_;
  delete SimpleFilterVisionObjPBMsg::default_instance_;
  delete SimpleFilterVisionObjPBMsg_reflection_;
  delete ManagerStatsPBMsg::default_instance_;
  delete ManagerStatsPBMsg_reflection_;
  delete ManagerControlPBMsg::default_instance_;
  delete ManagerControlPBMsg_reflection_;
  delete CameraSteeringPBMsg::default_instance_;
  delete CameraSteeringPBMsg_reflection_;
  delete ImageCompressionControlPBMsg::default_instance_;
  delete ImageCompressionControlPBMsg_reflection_;
  delete ImageLoggingControlPBMsg::default_instance_;
  delete ImageLoggingControlPBMsg_reflection_;
  delete ImageLocationPBMsg::default_instance_;
  delete ImageLocationPBMsg_reflection_;
  delete GroundTargetLocationPBMsg::default_instance_;
  delete GroundTargetLocationPBMsg_reflection_;
  delete ImageProcTargetInfoResultsPBMsg::default_instance_;
  delete ImageProcTargetInfoResultsPBMsg_reflection_;
  delete TargetParametersPBMsg::default_instance_;
  delete TargetParametersPBMsg_reflection_;
  delete TimeSyncPBMsg::default_instance_;
  delete TimeSyncPBMsg_reflection_;
  delete GeoCoordinateSystemSetupPBMsg::default_instance_;
  delete GeoCoordinateSystemSetupPBMsg_reflection_;
  delete LatLonXYConversionPBMsg::default_instance_;
  delete LatLonXYConversionPBMsg_reflection_;
  delete ImageCaptureControlPBMsg::default_instance_;
  delete ImageCaptureControlPBMsg_reflection_;
  delete CameraParametersSetupPBMsg::default_instance_;
  delete CameraParametersSetupPBMsg_reflection_;
  delete StreamControlPBMsg::default_instance_;
  delete StreamControlPBMsg_reflection_;
  delete ImageCaptureStatusPBMsg::default_instance_;
  delete ImageCaptureStatusPBMsg_reflection_;
  delete VisionProcessingControlPBMsg::default_instance_;
  delete VisionProcessingControlPBMsg_reflection_;
  delete CameraCalControlPBMsg::default_instance_;
  delete CameraCalControlPBMsg_reflection_;
  delete CameraCalStatusPBMsg::default_instance_;
  delete CameraCalStatusPBMsg_reflection_;
  delete FeatureMatchProcCtrlPBMsg::default_instance_;
  delete FeatureMatchProcCtrlPBMsg_reflection_;
  delete FeatureMatchProcStatusPBMsg::default_instance_;
  delete FeatureMatchProcStatusPBMsg_reflection_;
  delete ListOfManagerNamesPBMsg::default_instance_;
  delete ListOfManagerNamesPBMsg_reflection_;
  delete SteeringTorqueCtrlPBMsg::default_instance_;
  delete SteeringTorqueCtrlPBMsg_reflection_;
  delete DceEPASteeringStatusPBMsg::default_instance_;
  delete DceEPASteeringStatusPBMsg_reflection_;
  delete LinearActuatorPositionCtrlPBMsg::default_instance_;
  delete LinearActuatorPositionCtrlPBMsg_reflection_;
  delete KarTechLinearActuatorParamsPBMsg::default_instance_;
  delete KarTechLinearActuatorParamsPBMsg_reflection_;
  delete KarTechLinearActuatorSetupPBMsg::default_instance_;
  delete KarTechLinearActuatorSetupPBMsg_reflection_;
  delete HeadOrientationPBMsg::default_instance_;
  delete HeadOrientationPBMsg_reflection_;
  delete SipAndPuffPBMsg::default_instance_;
  delete SipAndPuffPBMsg_reflection_;
  delete IMUCommandResponsePBMsg::default_instance_;
  delete IMUCommandResponsePBMsg_reflection_;
  delete PlaybackControlPBMsg::default_instance_;
  delete PlaybackControlPBMsg_reflection_;
  delete HeadTrackingControlPBMsg::default_instance_;
  delete HeadTrackingControlPBMsg_reflection_;
  delete TrackHeadOrientationPBMsg::default_instance_;
  delete TrackHeadOrientationPBMsg_reflection_;
  delete IMUAccelGyroDataPBMsg::default_instance_;
  delete IMUAccelGyroDataPBMsg_reflection_;
  delete GPSFixPBMsg::default_instance_;
  delete GPSFixPBMsg_reflection_;
  delete VidereSystemControlPBMsg::default_instance_;
  delete VidereSystemControlPBMsg_reflection_;
  delete HeadOrientationControlPBMsg::default_instance_;
  delete HeadOrientationControlPBMsg_reflection_;
  delete VehicleControlParametersPBMsg::default_instance_;
  delete VehicleControlParametersPBMsg_reflection_;
}

void protobuf_AddDesc_vision_5fmessages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_vision_5fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025vision_messages.proto\022\017vision_messages"
    "\"h\n\031VisionMessageWrapperPBMsg\022\017\n\007MsgName"
    "\030\001 \002(\t\022\024\n\014MsgQualifier\030\002 \001(\t\022\017\n\007MsgData\030"
    "\003 \001(\014\022\023\n\013MsgDataSize\030\004 \001(\r\"L\n\022VisionComm"
    "andPBMsg\022\017\n\007Command\030\001 \002(\t\022\024\n\014CmdQualifie"
    "r\030\002 \001(\t\022\017\n\007CmdData\030\003 \001(\014\"\277\001\n\023VisionRespo"
    "nsePBMsg\022L\n\017CmdResponseType\030\001 \001(\01623.visi"
    "on_messages.VisionResponsePBMsg.Response"
    "Type_e\022\032\n\022CmdResponseMessage\030\002 \001(\t\022\027\n\017Cm"
    "dResponseData\030\003 \001(\014\"%\n\016ResponseType_e\022\007\n"
    "\003kOK\020\000\022\n\n\006kError\020\001\"\341\002\n\031VehicleInertialSt"
    "atePBMsg\022\035\n\025CoordinatesLatLonOrXY\030\001 \001(\010\022"
    "\026\n\016LatitudeRadOrY\030\002 \001(\001\022\027\n\017LongitudeRadO"
    "rX\030\003 \001(\001\022\023\n\013AltitudeMSL\030\004 \001(\001\022\021\n\tHeightA"
    "GL\030\005 \001(\001\022\022\n\nVelEastMpS\030\006 \001(\001\022\023\n\013VelNorth"
    "MpS\030\007 \001(\001\022\022\n\nVelDownMpS\030\010 \001(\001\022\017\n\007RollRad"
    "\030\t \001(\001\022\020\n\010PitchRad\030\n \001(\001\022\016\n\006YawRad\030\013 \001(\001"
    "\022\025\n\rRollRateRadps\030\014 \001(\001\022\026\n\016PitchRateRadp"
    "s\030\r \001(\001\022\024\n\014YawRateRadps\030\016 \001(\001\022\027\n\017gpsTime"
    "StampSec\030\017 \001(\001\"q\n\017TargetInfoPBMsg\022\023\n\013Ima"
    "geNumber\030\001 \001(\r\022I\n\025VehicleInertialStates\030"
    "\002 \001(\0132*.vision_messages.VehicleInertialS"
    "tatePBMsg\"N\n\016BroadcastPBMsg\022\026\n\016message_s"
    "tring\030\001 \001(\t\022\024\n\014is_exception\030\002 \001(\010\022\016\n\006rep"
    "ort\030\003 \001(\014\">\n\032SimpleFilterVisionObjPBMsg\022"
    "\014\n\004info\030\001 \001(\t\022\022\n\nimage_jpeg\030\002 \001(\014\"\244\004\n\021Ma"
    "nagerStatsPBMsg\022\023\n\013ManagerName\030\001 \001(\t\022\024\n\014"
    "RunningState\030\002 \001(\021\022\026\n\016ErrorCondition\030\003 \001"
    "(\010\022\021\n\tErrorCode\030\004 \001(\021\022\"\n\032TotalNumberOfEx"
    "ecuteCycles\030\005 \001(\021\022\035\n\025NumberOfExecuteCycl"
    "es\030\006 \001(\021\022#\n\033TimeSinceLastStatsReset_Sec\030"
    "\007 \001(\001\022$\n\034MinExecuteUnitOfWorkTime_Sec\030\010 "
    "\001(\001\022$\n\034MaxExecuteUnitOfWorkTime_Sec\030\t \001("
    "\001\022$\n\034AveExecuteUnitOfWorkTime_Sec\030\n \001(\001\022"
    "&\n\036TotalExecuteUnitOfWorkTime_Sec\030\013 \001(\001\022"
    "\030\n\020MinSleepTime_Sec\030\014 \001(\001\022\030\n\020MaxSleepTim"
    "e_Sec\030\r \001(\001\022\030\n\020AveSleepTime_Sec\030\016 \001(\001\022\032\n"
    "\022TotalSleepTime_Sec\030\017 \001(\001\022&\n\036NumberOfWak"
    "eUpCallsWhileAsleep\030\020 \001(\021\022%\n\035NumberOfWak"
    "eUpCallsWhileAwake\030\021 \001(\021\"\201\001\n\023ManagerCont"
    "rolPBMsg\022\023\n\013ManagerName\030\001 \001(\t\022\027\n\017Shutdow"
    "nManager\030\002 \001(\010\022\033\n\023ResetMgrStatsToggle\030\003 "
    "\001(\010\022\037\n\027PublishMgrStatsTime_Sec\030\004 \001(\001\"\350\001\n"
    "\023CameraSteeringPBMsg\022\036\n\026CameraSteeringMo"
    "deSPOI\030\001 \001(\010\022\035\n\025CoordinatesLatLonOrXY\030\014 "
    "\001(\010\022\032\n\022SpoiLatitudeRadOrY\030\003 \001(\001\022\033\n\023SpoiL"
    "ongitudeRadOrX\030\004 \001(\001\022\035\n\025CameraAzimuthAng"
    "leRad\030\005 \001(\001\022\037\n\027CameraElevationAngleRad\030\006"
    " \001(\001\022\031\n\021CameraZoomPercent\030\007 \001(\001\"\270\002\n\034Imag"
    "eCompressionControlPBMsg\022\036\n\026EnableImageC"
    "ompression\030\001 \001(\010\022 \n\030TransmitCompressedIm"
    "ages\030\002 \001(\010\022g\n\023ImageComressionType\030\003 \001(\0162"
    "J.vision_messages.ImageCompressionContro"
    "lPBMsg.VisionImageCompressionType_e\022\035\n\025I"
    "mageCompressionRatio\030\004 \001(\001\022\021\n\tFrameRate\030"
    "\005 \001(\001\";\n\034VisionImageCompressionType_e\022\010\n"
    "\004jpeg\020\000\022\010\n\004mpeg\020\001\022\007\n\003gif\020\002\"\334\001\n\030ImageLogg"
    "ingControlPBMsg\022\025\n\rEnableLogging\030\001 \001(\010\022R"
    "\n\013LoggingType\030\002 \001(\0162=.vision_messages.Im"
    "ageLoggingControlPBMsg.VisionLoggingType"
    "_e\"U\n\023VisionLoggingType_e\022\023\n\017LogMetaData"
    "Only\020\000\022\020\n\014LogRawImages\020\001\022\027\n\023LogCompresse"
    "dImages\020\002\"\262\001\n\022ImageLocationPBMsg\022\023\n\013Imag"
    "eNumber\030\001 \001(\r\022\"\n\032ImageCenterLatitudeRadi"
    "ans\030\002 \001(\001\022#\n\033ImageCenterLongitudeRadians"
    "\030\003 \001(\001\022\035\n\025TargetCornerLocations\030\004 \003(\001\022\037\n"
    "\027TargetCornersLatLonOrXY\030\005 \001(\010\"\311\003\n\031Groun"
    "dTargetLocationPBMsg\022\026\n\016TargetTypeCode\030\001"
    " \001(\r\022\020\n\010TargetID\030\002 \001(\r\022\035\n\025TargetLatitude"
    "Radians\030\003 \001(\001\022\036\n\026TargetLongitudeRadians\030"
    "\004 \001(\001\022\031\n\021TargetAltitudeMSL\030\005 \001(\001\022\033\n\023Targ"
    "etAltitudeValid\030\006 \001(\010\022\034\n\024TargetAzimuthRa"
    "dians\030\007 \001(\001\022\036\n\026TargetElevationRadians\030\010 "
    "\001(\001\022 \n\030TargetOrientationRadians\030\t \001(\001\022.\n"
    "&TargetAzimuthElevationOrientationValid\030"
    "\n \001(\010\022\036\n\026TargetCovarianceMatrix\030\013 \003(\001\022\035\n"
    "\025TargetCovarianceValid\030\014 \001(\010\022\035\n\025TargetPi"
    "xelLocation_x\030\r \001(\005\022\035\n\025TargetPixelLocati"
    "on_y\030\016 \001(\005\"\355\001\n\037ImageProcTargetInfoResult"
    "sPBMsg\022:\n\rImageLocation\030\001 \001(\0132#.vision_m"
    "essages.ImageLocationPBMsg\022I\n\025VehicleIne"
    "rtialStates\030\002 \001(\0132*.vision_messages.Vehi"
    "cleInertialStatePBMsg\022C\n\017TargetLocations"
    "\030\003 \003(\0132*.vision_messages.GroundTargetLoc"
    "ationPBMsg\"\324\001\n\025TargetParametersPBMsg\022\026\n\016"
    "TargetTypeCode\030\001 \001(\r\022\027\n\017IsTaticalTarget\030"
    "\002 \001(\010\022\031\n\021TargetSizeOrWidth\030\003 \001(\001\022\037\n\027Targ"
    "etPerimeterOrLenght\030\004 \001(\001\022\034\n\024TargetIRHea"
    "tGradient\030\005 \001(\001\022\024\n\014TargetIRSize\030\006 \001(\001\022\032\n"
    "\022TargetRGBColorCode\030\007 \001(\r\".\n\rTimeSyncPBM"
    "sg\022\035\n\025TimeSyncOffsetSeconds\030\001 \001(\001\"\213\003\n\035Ge"
    "oCoordinateSystemSetupPBMsg\022}\n!GeoCoordi"
    "nateSystemConversionType\030\001 \001(\0162R.vision_"
    "messages.GeoCoordinateSystemSetupPBMsg.G"
    "eoCoordinateSystemConversionType_e\022\035\n\025Ce"
    "nterLatitudeDegrees\030\002 \001(\001\022\036\n\026CenterLongi"
    "tudeDegrees\030\003 \001(\001\022\031\n\021GroundAltitudeMSL\030\004"
    " \001(\001\022\034\n\024DeltaLatitudeDegrees\030\005 \001(\001\022\035\n\025De"
    "ltaLongitudeDegrees\030\006 \001(\001\"T\n#GeoCoordina"
    "teSystemConversionType_e\022\n\n\006Linear\020\000\022\022\n\016"
    "WGS84_Relative\020\001\022\r\n\tWGS84_Map\020\002\"\224\001\n\027LatL"
    "onXYConversionPBMsg\022\034\n\024LatLonToXYConvers"
    "ion\030\001 \001(\010\022\027\n\017LatitudeDegrees\030\002 \001(\001\022\030\n\020Lo"
    "ngitudeDegrees\030\003 \001(\001\022\023\n\013X_PosMeters\030\004 \001("
    "\001\022\023\n\013Y_PosMeters\030\005 \001(\001\"\271\003\n\030ImageCaptureC"
    "ontrolPBMsg\022\033\n\023ImageCaptureEnabled\030\001 \001(\010"
    "\022\037\n\027NumberOfImagesToCapture\030\002 \001(\r\022\036\n\026Des"
    "iredFramesPerSecond\030\003 \001(\001\022\031\n\021DesiredImag"
    "eWidth\030\004 \001(\r\022\032\n\022DesiredImageHeight\030\005 \001(\r"
    "\022A\n\022ImageCaptureSource\030\006 \001(\0162%.vision_me"
    "ssages.ImageCaptureSource_e\022C\n\022ImageCapt"
    "ureFormat\030\007 \001(\0162\'.vision_messages.CPImag"
    "eCaptureFormat_e\022#\n\033ImageCaptureSourceCo"
    "nfigPri\030\010 \001(\t\022#\n\033ImageCaptureSourceConfi"
    "gSec\030\t \001(\t\022\035\n\025ImageSourceLoopAround\030\n \001("
    "\010\022\027\n\017AutoFocusEnable\030\013 \001(\010\"\212\003\n\032CameraPar"
    "ametersSetupPBMsg\022C\n\022ImageCaptureFormat\030"
    "\001 \001(\0162\'.vision_messages.CPImageCaptureFo"
    "rmat_e\022\014\n\004Mode\030\002 \001(\r\022\022\n\nFrameWidth\030\003 \001(\r"
    "\022\023\n\013FrameHeight\030\004 \001(\r\022\024\n\014FrameRateFPS\030\005 "
    "\001(\001\022\021\n\tAutofocus\030\006 \001(\010\022\022\n\nFocusValue\030\007 \001"
    "(\001\022\022\n\nBrightness\030\010 \001(\001\022\020\n\010Contrast\030\t \001(\001"
    "\022\022\n\nSaturation\030\n \001(\001\022\013\n\003Hue\030\013 \001(\001\022\014\n\004Gai"
    "n\030\014 \001(\001\022\020\n\010Exposure\030\r \001(\001\022\031\n\021WhiteBallan"
    "ceBlue\030\016 \001(\001\022\030\n\020WhiteBallanceRed\030\017 \001(\001\022\027"
    "\n\017ExternalTrigger\030\020 \001(\010\"\224\001\n\022StreamContro"
    "lPBMsg\022\033\n\023StreamImagesEnabled\030\001 \001(\010\022\034\n\024S"
    "treamImageFrameRate\030\002 \001(\001\022\037\n\027ImageCompre"
    "ssionQuality\030\003 \001(\r\022\"\n\032StreamImageScaleDo"
    "wnFactor\030\004 \001(\001\"\321\002\n\027ImageCaptureStatusPBM"
    "sg\022\033\n\023ImageCaptureEnabled\030\001 \001(\010\022\034\n\024Image"
    "CaptureComplete\030\002 \001(\010\022\023\n\013EndOfImages\030\003 \001"
    "(\010\022#\n\033TotalNumberOfImagesCaptured\030\004 \001(\r\022"
    "%\n\035CurrentNumberOfImagesCaptured\030\005 \001(\r\022\036"
    "\n\026AverageFramesPerSecond\030\006 \001(\001\022A\n\022ImageC"
    "aptureSource\030\007 \001(\0162%.vision_messages.Ima"
    "geCaptureSource_e\0227\n\tErrorCode\030\010 \001(\0162$.v"
    "ision_messages.ImageCaptureError_e\"\251\010\n\034V"
    "isionProcessingControlPBMsg\022\033\n\023ImageCapt"
    "ureEnabled\030\001 \001(\010\022\037\n\027NumberOfImagesToCapt"
    "ure\030\002 \001(\021\022\036\n\026DesiredFramesPerSecond\030\003 \001("
    "\001\022\034\n\024GPUProcessingEnabled\030\004 \001(\010\022$\n\034Targe"
    "tImageProcessingEnabled\030\005 \001(\010\022d\n\024VisionP"
    "rocessingMode\030\006 \001(\0162F.vision_messages.Vi"
    "sionProcessingControlPBMsg.VisionProcess"
    "ingModeEnum\022d\n\024TargetProcessingMode\030\007 \001("
    "\0162F.vision_messages.VisionProcessingCont"
    "rolPBMsg.TargetProcessingModeEnum\022\"\n\032GPS"
    "DeniedProcessingEnabled\030\010 \001(\010\022j\n\027GPSDeni"
    "edProcessingMode\030\t \001(\0162I.vision_messages"
    ".VisionProcessingControlPBMsg.GPSDeniedP"
    "rocessingModeEnum\022\033\n\023RecordImagesEnabled"
    "\030\n \001(\010\022\033\n\023StreamImagesEnabled\030\013 \001(\010\"\207\002\n\030"
    "VisionProcessingModeEnum\022\027\n\023VisionProcMo"
    "de_None\020\000\022\031\n\025VisionProcMode_Target\020\001\022\034\n\030"
    "VisionProcMode_GPSDenied\020\002\022$\n VisionProc"
    "Mode_CameraCalibration\020\003\022#\n\037VisionProcMo"
    "de_FeatureMatchProc\020\004\022#\n\037VisionProcMode_"
    "HeadTrackingProc\020\005\022)\n%VisionProcMode_Hea"
    "dOrientationCalProc\020\006\"y\n\030TargetProcessin"
    "gModeEnum\022\024\n\020TgtProcMode_None\020\000\022\023\n\017TgtPr"
    "ocMode_Std\020\001\022\024\n\020TgtProcMode_Blob\020\002\022\034\n\030Tg"
    "tProcMode_CheckerBoard\020\003\"L\n\033GPSDeniedPro"
    "cessingModeEnum\022\026\n\022GpsDeniedMode_None\020\000\022"
    "\025\n\021GpsDeniedMode_Std\020\001\"\307\005\n\025CameraCalCont"
    "rolPBMsg\022]\n\025CameraCalibrationType\030\001 \001(\0162"
    ">.vision_messages.CameraCalControlPBMsg."
    "CameraCalibrationType_e\022K\n\014CameraCalCmd\030"
    "\002 \001(\01625.vision_messages.CameraCalControl"
    "PBMsg.CameraCalCmd_e\022\035\n\025CameraCalBaseFil"
    "ename\030\003 \001(\t\022\024\n\014NumberOfRows\030\004 \001(\005\022\024\n\014Num"
    "berOfCols\030\005 \001(\005\022\035\n\025SquareSizeMilliMeters"
    "\030\006 \001(\001\022\034\n\024YawCorrectionDegrees\030\007 \001(\001\022\036\n\026"
    "PitchCorrectionDegrees\030\010 \001(\001\022\035\n\025RollCorr"
    "ectionDegrees\030\t \001(\001\022!\n\031DelXCorrectionCen"
    "tiMeters\030\n \001(\001\022!\n\031DelYCorrectionCentiMet"
    "ers\030\013 \001(\001\022!\n\031DelZCorrectionCentiMeters\030\014"
    " \001(\001\"<\n\027CameraCalibrationType_e\022!\n\035Camer"
    "aCal_2DPlaneCheckerBoard\020\000\"\223\001\n\016CameraCal"
    "Cmd_e\022\013\n\007NullCmd\020\000\022\t\n\005Reset\020\001\022\021\n\rClearIm"
    "ageSet\020\002\022\020\n\014StreamImages\020\003\022\020\n\014CaptureIma"
    "ge\020\004\022\016\n\nSetImageOk\020\005\022\017\n\013RejectImage\020\006\022\021\n"
    "\rRunCalProcess\020\007\"\320\002\n\024CameraCalStatusPBMs"
    "g\022N\n\016CameraCalState\030\001 \001(\01626.vision_messa"
    "ges.CameraCalStatusPBMsg.CameraCalState_"
    "e\022\036\n\026NumberOfImagesCaptured\030\002 \001(\005\022\032\n\022Cam"
    "eraCalStatusMsg\030\003 \001(\t\022\017\n\007ImageOk\030\004 \001(\010\"\232"
    "\001\n\020CameraCalState_e\022\t\n\005Reset\020\000\022\020\n\014WaitFo"
    "rStart\020\001\022\020\n\014StreamImages\020\002\022\021\n\rImageValid"
    "ate\020\003\022\025\n\021ImageCapturedWait\020\004\022\016\n\nCalProce"
    "ss\020\005\022\017\n\013CalComplete\020\006\022\014\n\010CalError\020\007\"\236\004\n\031"
    "FeatureMatchProcCtrlPBMsg\022\036\n\026FeatureMatc"
    "hingProcCmd\030\001 \001(\005\022$\n\034FeatureExtractionTy"
    "peRoutine\030\002 \001(\005\022\037\n\027FeatureMatchTypeRouti"
    "ne\030\003 \001(\005\022 \n\030FMImagePostProcessMethod\030\004 \001"
    "(\005\022\030\n\020UseGPUProcessing\030\005 \001(\010\022\020\n\010ParamI_1"
    "\030\n \001(\005\022\020\n\010ParamI_2\030\013 \001(\005\022\020\n\010ParamI_3\030\014 \001"
    "(\005\022\020\n\010ParamI_4\030\r \001(\005\022\020\n\010ParamI_5\030\016 \001(\005\022\020"
    "\n\010ParamI_6\030\017 \001(\005\022\020\n\010ParamI_7\030\020 \001(\005\022\020\n\010Pa"
    "ramI_8\030\021 \001(\005\022\020\n\010ParamI_9\030\022 \001(\005\022\021\n\tParamF"
    "_10\030\024 \001(\001\022\021\n\tParamF_11\030\025 \001(\001\022\021\n\tParamF_1"
    "2\030\026 \001(\001\022\021\n\tParamF_13\030\027 \001(\001\022\021\n\tParamF_14\030"
    "\030 \001(\001\022\021\n\tParamF_15\030\031 \001(\001\022\021\n\tParamF_16\030\032 "
    "\001(\001\022\021\n\tParamF_17\030\033 \001(\001\022\021\n\tParamF_18\030\034 \001("
    "\001\022\021\n\tParamF_19\030\035 \001(\001\"\225\005\n\033FeatureMatchPro"
    "cStatusPBMsg\022\034\n\024FeatureMatchingState\030\001 \001"
    "(\005\022$\n\034FeatureExtractionTypeRoutine\030\002 \001(\005"
    "\022\037\n\027FeatureMatchTypeRoutine\030\003 \001(\005\022\025\n\rSta"
    "tusMessage\030\004 \001(\t\022\036\n\026NumberOfImagesCaptur"
    "ed\030\005 \001(\005\022\026\n\016ProcessTimer_1\030\006 \001(\001\022\026\n\016Proc"
    "essTimer_2\030\007 \001(\001\022\024\n\014StatusValI_1\030\n \001(\005\022\024"
    "\n\014StatusValI_2\030\013 \001(\005\022\024\n\014StatusValI_3\030\014 \001"
    "(\005\022\024\n\014StatusValI_4\030\r \001(\005\022\024\n\014StatusValI_5"
    "\030\016 \001(\005\022\024\n\014StatusValI_6\030\017 \001(\005\022\024\n\014StatusVa"
    "lI_7\030\020 \001(\005\022\024\n\014StatusValI_8\030\021 \001(\005\022\024\n\014Stat"
    "usValI_9\030\022 \001(\005\022\025\n\rStatusValF_10\030\024 \001(\001\022\025\n"
    "\rStatusValF_11\030\025 \001(\001\022\025\n\rStatusValF_12\030\026 "
    "\001(\001\022\025\n\rStatusValF_13\030\027 \001(\001\022\025\n\rStatusValF"
    "_14\030\030 \001(\001\022\025\n\rStatusValF_15\030\031 \001(\001\022\025\n\rStat"
    "usValF_16\030\032 \001(\001\022\025\n\rStatusValF_17\030\033 \001(\001\022\025"
    "\n\rStatusValF_18\030\034 \001(\001\022\025\n\rStatusValF_19\030\035"
    " \001(\001\"O\n\027ListOfManagerNamesPBMsg\022\030\n\020Numbe"
    "rOfManagers\030\001 \001(\005\022\032\n\022ListOfManagerNames\030"
    "\002 \003(\t\"\215\001\n\027SteeringTorqueCtrlPBMsg\022\035\n\025Ste"
    "eringTorquePercent\030\001 \001(\001\022\031\n\021SteeringTorq"
    "ueMap\030\002 \001(\r\022\036\n\026SteeringControlEnabled\030\003 "
    "\001(\010\022\030\n\020ManualExtControl\030\004 \001(\010\"\343\002\n\031DceEPA"
    "SteeringStatusPBMsg\022\030\n\020MotorCurrentAmps\030"
    "\001 \001(\001\022\033\n\023PWMDutyCyclePercent\030\002 \001(\001\022\032\n\022Mo"
    "torTorquePercent\030\003 \001(\001\022\025\n\rSupplyVoltage\030"
    "\004 \001(\001\022\020\n\010TempDegC\030\005 \001(\001\022\030\n\020SteeringAngle"
    "Deg\030\006 \001(\001\022 \n\030SteeringTorqueMapSetting\030\007 "
    "\001(\005\022\026\n\016SwitchPosition\030\010 \001(\005\022\017\n\007TorqueA\030\t"
    " \001(\005\022\017\n\007TorqueB\030\n \001(\005\022\021\n\tErrorCode\030\013 \001(\005"
    "\022\023\n\013StatusFlags\030\014 \001(\005\022\022\n\nLimitFlags\030\r \001("
    "\005\022\030\n\020ManualExtControl\030\016 \001(\010\"\332\001\n\037LinearAc"
    "tuatorPositionCtrlPBMsg\022\027\n\017PositionPerce"
    "nt\030\001 \001(\001\022\024\n\014ClutchEnable\030\002 \001(\010\022\023\n\013MotorE"
    "nable\030\003 \001(\010\022\030\n\020ManualExtControl\030\004 \001(\010\022\030\n"
    "\020MotorCurrentAmps\030\005 \001(\001\022\020\n\010TempDegC\030\006 \001("
    "\001\022\022\n\nErrorFlags\030\007 \001(\005\022\031\n\021ActuatorSetupMo"
    "de\030\010 \001(\010\"\362\002\n KarTechLinearActuatorParams"
    "PBMsg\022\031\n\021MinPositionInches\030\001 \001(\001\022\031\n\021MaxP"
    "ositionInches\030\002 \001(\001\022 \n\030MotorMaxCurrentLi"
    "mitAmps\030\003 \001(\001\022%\n\035FeedbackCtrl_ErrDeadban"
    "dInces\030\004 \001(\001\022\027\n\017FeedbackCtrl_KP\030\005 \001(\r\022\027\n"
    "\017FeedbackCtrl_KI\030\006 \001(\r\022\027\n\017FeedbackCtrl_K"
    "D\030\007 \001(\r\022\033\n\023FeedbackCtrl_CLFreq\030\010 \001(\r\022\024\n\014"
    "Motor_MinPWM\030\t \001(\r\022\024\n\014Motor_MaxPWM\030\n \001(\r"
    "\022\025\n\rMotor_pwmFreq\030\013 \001(\r\022$\n\034PositionReach"
    "edErrorTimeMSec\030\014 \001(\r\"\261\001\n\037KarTechLinearA"
    "ctuatorSetupPBMsg\022\024\n\014ResetOutputs\030\001 \001(\010\022"
    "\031\n\021ResetHardwareCfgs\030\002 \001(\010\022\025\n\rResetUserC"
    "fgs\030\003 \001(\010\022\020\n\010ResetAll\030\004 \001(\010\022\023\n\013AutoZeroC"
    "al\030\005 \001(\010\022\037\n\027SetCanCommandResponsIDs\030\006 \001("
    "\010\"y\n\024HeadOrientationPBMsg\022\027\n\017HeadRollDeg"
    "rees\030\001 \001(\001\022\030\n\020HeadPitchDegrees\030\002 \001(\001\022\026\n\016"
    "HeadYawDegrees\030\003 \001(\001\022\026\n\016CovarianceNorm\030\004"
    " \001(\001\"N\n\017SipAndPuffPBMsg\022\030\n\020SipAndPuffPec"
    "ent\030\001 \001(\001\022!\n\031SipAndPuffIntegralPercent\030\002"
    " \001(\001\"I\n\027IMUCommandResponsePBMsg\022\033\n\023IMURe"
    "moteCtrlEnable\030\001 \001(\010\022\021\n\tCmdRspMsg\030\002 \001(\t\""
    "\322\001\n\024PlaybackControlPBMsg\022\030\n\020DataLogDirec"
    "tory\030\001 \001(\t\022\026\n\016EnablePlayback\030\002 \001(\010\022$\n\034Lo"
    "opBackToStartOfDataRecords\030\003 \001(\010\022\025\n\rStar"
    "tPlayback\030\004 \001(\010\022\030\n\020TimeSyncPlayback\030\005 \001("
    "\010\022\025\n\rResetPlayback\030\006 \001(\010\022\032\n\022PlayForTimeS"
    "econds\030\007 \001(\001\"\224\002\n\030HeadTrackingControlPBMs"
    "g\022\021\n\tCanny_low\030\001 \001(\005\022\022\n\nCanny_high\030\002 \001(\005"
    "\022\033\n\023GlyphAreaPixels_min\030\003 \001(\005\022\033\n\023GlyphAr"
    "eaPixels_max\030\004 \001(\005\022\032\n\022NumberOfIterations"
    "\030\005 \001(\005\022!\n\031ReprojectionErrorDistance\030\006 \001("
    "\001\022\031\n\021ConfidencePercent\030\007 \001(\001\022$\n\034HeadTrac"
    "kingImageDisplayType\030\010 \001(\r\022\027\n\017GlyphModel"
    "Index\030\t \001(\r\"\211\003\n\031TrackHeadOrientationPBMs"
    "g\022#\n\033HeadOrientationQuaternion_W\030\001 \001(\001\022#"
    "\n\033HeadOrientationQuaternion_X\030\002 \001(\001\022#\n\033H"
    "eadOrientationQuaternion_Y\030\003 \001(\001\022#\n\033Head"
    "OrientationQuaternion_Z\030\004 \001(\001\022\034\n\024HeadTra"
    "nslationVec_X\030\005 \001(\001\022\034\n\024HeadTranslationVe"
    "c_Y\030\006 \001(\001\022\034\n\024HeadTranslationVec_Z\030\007 \001(\001\022"
    "\023\n\013IsDataValid\030\010 \001(\010\022\023\n\013ImageNumber\030\t \001("
    "\r\022 \n\030ImageCaptureTimeStampSec\030\n \001(\001\022\032\n\022V"
    "idereTimeStampSec\030\013 \001(\001\022\026\n\016CovarianceNor"
    "m\030\014 \001(\001\"\353\001\n\025IMUAccelGyroDataPBMsg\022\023\n\013IMU"
    "Location\030\001 \001(\005\022\027\n\017IMUTimeStampSec\030\002 \001(\001\022"
    "\032\n\022VidereTimeStampSec\030\003 \001(\001\022\023\n\013AccelMPS2"
    "_X\030\004 \001(\001\022\023\n\013AccelMPS2_Y\030\005 \001(\001\022\023\n\013AccelMP"
    "S2_Z\030\006 \001(\001\022\027\n\017GyroRadPerSec_X\030\007 \001(\001\022\027\n\017G"
    "yroRadPerSec_Y\030\010 \001(\001\022\027\n\017GyroRadPerSec_Z\030"
    "\t \001(\001\"\226\002\n\013GPSFixPBMsg\022\032\n\022TrackingSatelli"
    "tes\030\001 \001(\005\022\023\n\013LatitudeDeg\030\002 \001(\001\022\024\n\014Longit"
    "udeDeg\030\003 \001(\001\022\023\n\013AltitudeMSL\030\004 \001(\001\022\022\n\nPos"
    "ition_X\030\005 \001(\001\022\022\n\nPosition_Y\030\006 \001(\001\022\022\n\nPos"
    "ition_Z\030\007 \001(\001\022\022\n\nVelocity_X\030\010 \001(\001\022\022\n\nVel"
    "ocity_Y\030\t \001(\001\022\022\n\nVelocity_Z\030\n \001(\001\022\027\n\017GPS"
    "TimeStampSec\030\013 \001(\001\022\032\n\022VidereTimeStampSec"
    "\030\014 \001(\001\"\316\002\n\030VidereSystemControlPBMsg\022\023\n\013S"
    "ystemState\030\001 \001(\r\022\024\n\014StartProcess\030\002 \001(\010\022\023"
    "\n\013PauseProces\030\003 \001(\010\022\023\n\013StopProcess\030\004 \001(\010"
    "\022\024\n\014SystemStatus\030\005 \001(\r\022\025\n\rStatusCounter\030"
    "\006 \001(\r\022\032\n\022DriverEnableSwitch\030\007 \001(\010\022\031\n\021Hea"
    "dControlEnable\030\010 \001(\010\022\035\n\025ThrottleControlE"
    "nable\030\t \001(\010\022\032\n\022BrakeControlEnable\030\n \001(\010\022"
    "\036\n\026NexusBCIControlEnabled\030\013 \001(\010\022\036\n\026Nexus"
    "BCIThrottleEnable\030\014 \001(\010\"\243\002\n\033HeadOrientat"
    "ionControlPBMsg\022#\n\033HeadOrientationOutput"
    "Select\030\001 \001(\r\022*\n\"DisableHeadOrientationKa"
    "lmanFilter\030\002 \001(\010\022,\n$DisableVehicleInputT"
    "oHeadOrientation\030\003 \001(\010\022%\n\035DisableVehicle"
    "GravityFeedback\030\004 \001(\010\022\"\n\032VehicleGravityF"
    "eedbackGain\030\005 \001(\001\022\034\n\024HeadOrientation_QVa"
    "r\030\006 \001(\001\022\034\n\024HeadOrientation_RVar\030\007 \001(\001\"\206\006"
    "\n\035VehicleControlParametersPBMsg\022\030\n\020SipnP"
    "uffBlowGain\030\001 \001(\001\022\030\n\020SipnPuffSuckGain\030\002 "
    "\001(\001\022\037\n\027SipnPuffDeadBandPercent\030\003 \001(\001\022$\n\034"
    "ReverseSipnPuffThrottleBrake\030\004 \001(\010\022\034\n\024Th"
    "rottleSipnPuffGain\030\005 \001(\001\022\031\n\021BrakeSipnPuf"
    "fGain\030\006 \001(\001\022#\n\033ThrottleBrakeHeadTiltEnab"
    "le\030\007 \001(\010\0223\n+ThrottleBrakeHeadTiltForward"
    "DeadbandDegrees\030\010 \001(\001\0220\n(ThrottleBrakeHe"
    "adTiltBackDeadbandDegrees\030\t \001(\001\022\034\n\024Throt"
    "tleHeadTiltGain\030\n \001(\001\022\031\n\021BrakeHeadTiltGa"
    "in\030\013 \001(\001\022\037\n\027UseSteeringAngleControl\030\014 \001("
    "\010\022\030\n\020SteeringDeadband\030\r \001(\001\022\033\n\023SteeringC"
    "ontrolGain\030\016 \001(\001\022 \n\030MaxLRHeadRotationDeg"
    "rees\030\017 \001(\001\022\034\n\024HeadLeftRighLPFOrder\030\020 \001(\005"
    "\022#\n\033HeadLeftRighLPFCutoffFreqHz\030\021 \001(\001\022 \n"
    "\030SteeringAngleFeedback_Kp\030\022 \001(\001\022 \n\030Steer"
    "ingAngleFeedback_Kd\030\023 \001(\001\022 \n\030SteeringAng"
    "leFeedback_Ki\030\024 \001(\001\022 \n\030SteeringBiasAngle"
    "Degrees\030\025 \001(\001\022\026\n\016RCSteeringGain\030\026 \001(\001\022\017\n"
    "\007BCIGain\030\027 \001(\001*\212\002\n\024ImageCaptureSource_e\022"
    "\037\n\033ImageCaptureSource_NoChange\020\000\022#\n\037Imag"
    "eCaptureSource_OpenCVWebCam\020\001\022\037\n\033ImageCa"
    "ptureSource_IPMFiles\020\002\022\"\n\036ImageCaptureSo"
    "urce_CImageFiles\020\003\022#\n\037ImageCaptureSource"
    "_Sensoray2253\020\004\022 \n\034ImageCaptureSource_NV"
    "idiaCSI\020\005\022 \n\034ImageCaptureSource_VideoFil"
    "e\020\006*i\n\026CPImageCaptureFormat_e\022\013\n\007Unknown"
    "\020\000\022\t\n\005Grey8\020\001\022\n\n\006Grey16\020\002\022\t\n\005RGB24\020\003\022\t\n\005"
    "BGR24\020\004\022\t\n\005MJPEG\020\005\022\n\n\006YUV422\020\006*z\n\023ImageC"
    "aptureError_e\022\032\n\026ImageCaptureError_None\020"
    "\000\022\"\n\036ImageCaptureError_SourceConfig\020\001\022#\n"
    "\037ImageCaptureError_SourceCapture\020\002", 13794);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vision_messages.proto", &protobuf_RegisterTypes);
  VisionMessageWrapperPBMsg::default_instance_ = new VisionMessageWrapperPBMsg();
  VisionCommandPBMsg::default_instance_ = new VisionCommandPBMsg();
  VisionResponsePBMsg::default_instance_ = new VisionResponsePBMsg();
  VehicleInertialStatePBMsg::default_instance_ = new VehicleInertialStatePBMsg();
  TargetInfoPBMsg::default_instance_ = new TargetInfoPBMsg();
  BroadcastPBMsg::default_instance_ = new BroadcastPBMsg();
  SimpleFilterVisionObjPBMsg::default_instance_ = new SimpleFilterVisionObjPBMsg();
  ManagerStatsPBMsg::default_instance_ = new ManagerStatsPBMsg();
  ManagerControlPBMsg::default_instance_ = new ManagerControlPBMsg();
  CameraSteeringPBMsg::default_instance_ = new CameraSteeringPBMsg();
  ImageCompressionControlPBMsg::default_instance_ = new ImageCompressionControlPBMsg();
  ImageLoggingControlPBMsg::default_instance_ = new ImageLoggingControlPBMsg();
  ImageLocationPBMsg::default_instance_ = new ImageLocationPBMsg();
  GroundTargetLocationPBMsg::default_instance_ = new GroundTargetLocationPBMsg();
  ImageProcTargetInfoResultsPBMsg::default_instance_ = new ImageProcTargetInfoResultsPBMsg();
  TargetParametersPBMsg::default_instance_ = new TargetParametersPBMsg();
  TimeSyncPBMsg::default_instance_ = new TimeSyncPBMsg();
  GeoCoordinateSystemSetupPBMsg::default_instance_ = new GeoCoordinateSystemSetupPBMsg();
  LatLonXYConversionPBMsg::default_instance_ = new LatLonXYConversionPBMsg();
  ImageCaptureControlPBMsg::default_instance_ = new ImageCaptureControlPBMsg();
  CameraParametersSetupPBMsg::default_instance_ = new CameraParametersSetupPBMsg();
  StreamControlPBMsg::default_instance_ = new StreamControlPBMsg();
  ImageCaptureStatusPBMsg::default_instance_ = new ImageCaptureStatusPBMsg();
  VisionProcessingControlPBMsg::default_instance_ = new VisionProcessingControlPBMsg();
  CameraCalControlPBMsg::default_instance_ = new CameraCalControlPBMsg();
  CameraCalStatusPBMsg::default_instance_ = new CameraCalStatusPBMsg();
  FeatureMatchProcCtrlPBMsg::default_instance_ = new FeatureMatchProcCtrlPBMsg();
  FeatureMatchProcStatusPBMsg::default_instance_ = new FeatureMatchProcStatusPBMsg();
  ListOfManagerNamesPBMsg::default_instance_ = new ListOfManagerNamesPBMsg();
  SteeringTorqueCtrlPBMsg::default_instance_ = new SteeringTorqueCtrlPBMsg();
  DceEPASteeringStatusPBMsg::default_instance_ = new DceEPASteeringStatusPBMsg();
  LinearActuatorPositionCtrlPBMsg::default_instance_ = new LinearActuatorPositionCtrlPBMsg();
  KarTechLinearActuatorParamsPBMsg::default_instance_ = new KarTechLinearActuatorParamsPBMsg();
  KarTechLinearActuatorSetupPBMsg::default_instance_ = new KarTechLinearActuatorSetupPBMsg();
  HeadOrientationPBMsg::default_instance_ = new HeadOrientationPBMsg();
  SipAndPuffPBMsg::default_instance_ = new SipAndPuffPBMsg();
  IMUCommandResponsePBMsg::default_instance_ = new IMUCommandResponsePBMsg();
  PlaybackControlPBMsg::default_instance_ = new PlaybackControlPBMsg();
  HeadTrackingControlPBMsg::default_instance_ = new HeadTrackingControlPBMsg();
  TrackHeadOrientationPBMsg::default_instance_ = new TrackHeadOrientationPBMsg();
  IMUAccelGyroDataPBMsg::default_instance_ = new IMUAccelGyroDataPBMsg();
  GPSFixPBMsg::default_instance_ = new GPSFixPBMsg();
  VidereSystemControlPBMsg::default_instance_ = new VidereSystemControlPBMsg();
  HeadOrientationControlPBMsg::default_instance_ = new HeadOrientationControlPBMsg();
  VehicleControlParametersPBMsg::default_instance_ = new VehicleControlParametersPBMsg();
  VisionMessageWrapperPBMsg::default_instance_->InitAsDefaultInstance();
  VisionCommandPBMsg::default_instance_->InitAsDefaultInstance();
  VisionResponsePBMsg::default_instance_->InitAsDefaultInstance();
  VehicleInertialStatePBMsg::default_instance_->InitAsDefaultInstance();
  TargetInfoPBMsg::default_instance_->InitAsDefaultInstance();
  BroadcastPBMsg::default_instance_->InitAsDefaultInstance();
  SimpleFilterVisionObjPBMsg::default_instance_->InitAsDefaultInstance();
  ManagerStatsPBMsg::default_instance_->InitAsDefaultInstance();
  ManagerControlPBMsg::default_instance_->InitAsDefaultInstance();
  CameraSteeringPBMsg::default_instance_->InitAsDefaultInstance();
  ImageCompressionControlPBMsg::default_instance_->InitAsDefaultInstance();
  ImageLoggingControlPBMsg::default_instance_->InitAsDefaultInstance();
  ImageLocationPBMsg::default_instance_->InitAsDefaultInstance();
  GroundTargetLocationPBMsg::default_instance_->InitAsDefaultInstance();
  ImageProcTargetInfoResultsPBMsg::default_instance_->InitAsDefaultInstance();
  TargetParametersPBMsg::default_instance_->InitAsDefaultInstance();
  TimeSyncPBMsg::default_instance_->InitAsDefaultInstance();
  GeoCoordinateSystemSetupPBMsg::default_instance_->InitAsDefaultInstance();
  LatLonXYConversionPBMsg::default_instance_->InitAsDefaultInstance();
  ImageCaptureControlPBMsg::default_instance_->InitAsDefaultInstance();
  CameraParametersSetupPBMsg::default_instance_->InitAsDefaultInstance();
  StreamControlPBMsg::default_instance_->InitAsDefaultInstance();
  ImageCaptureStatusPBMsg::default_instance_->InitAsDefaultInstance();
  VisionProcessingControlPBMsg::default_instance_->InitAsDefaultInstance();
  CameraCalControlPBMsg::default_instance_->InitAsDefaultInstance();
  CameraCalStatusPBMsg::default_instance_->InitAsDefaultInstance();
  FeatureMatchProcCtrlPBMsg::default_instance_->InitAsDefaultInstance();
  FeatureMatchProcStatusPBMsg::default_instance_->InitAsDefaultInstance();
  ListOfManagerNamesPBMsg::default_instance_->InitAsDefaultInstance();
  SteeringTorqueCtrlPBMsg::default_instance_->InitAsDefaultInstance();
  DceEPASteeringStatusPBMsg::default_instance_->InitAsDefaultInstance();
  LinearActuatorPositionCtrlPBMsg::default_instance_->InitAsDefaultInstance();
  KarTechLinearActuatorParamsPBMsg::default_instance_->InitAsDefaultInstance();
  KarTechLinearActuatorSetupPBMsg::default_instance_->InitAsDefaultInstance();
  HeadOrientationPBMsg::default_instance_->InitAsDefaultInstance();
  SipAndPuffPBMsg::default_instance_->InitAsDefaultInstance();
  IMUCommandResponsePBMsg::default_instance_->InitAsDefaultInstance();
  PlaybackControlPBMsg::default_instance_->InitAsDefaultInstance();
  HeadTrackingControlPBMsg::default_instance_->InitAsDefaultInstance();
  TrackHeadOrientationPBMsg::default_instance_->InitAsDefaultInstance();
  IMUAccelGyroDataPBMsg::default_instance_->InitAsDefaultInstance();
  GPSFixPBMsg::default_instance_->InitAsDefaultInstance();
  VidereSystemControlPBMsg::default_instance_->InitAsDefaultInstance();
  HeadOrientationControlPBMsg::default_instance_->InitAsDefaultInstance();
  VehicleControlParametersPBMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vision_5fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vision_5fmessages_2eproto {
  StaticDescriptorInitializer_vision_5fmessages_2eproto() {
    protobuf_AddDesc_vision_5fmessages_2eproto();
  }
} static_descriptor_initializer_vision_5fmessages_2eproto_;
const ::google::protobuf::EnumDescriptor* ImageCaptureSource_e_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageCaptureSource_e_descriptor_;
}
bool ImageCaptureSource_e_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CPImageCaptureFormat_e_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPImageCaptureFormat_e_descriptor_;
}
bool CPImageCaptureFormat_e_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ImageCaptureError_e_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageCaptureError_e_descriptor_;
}
bool ImageCaptureError_e_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VisionMessageWrapperPBMsg::kMsgNameFieldNumber;
const int VisionMessageWrapperPBMsg::kMsgQualifierFieldNumber;
const int VisionMessageWrapperPBMsg::kMsgDataFieldNumber;
const int VisionMessageWrapperPBMsg::kMsgDataSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VisionMessageWrapperPBMsg::VisionMessageWrapperPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.VisionMessageWrapperPBMsg)
}

void VisionMessageWrapperPBMsg::InitAsDefaultInstance() {
}

VisionMessageWrapperPBMsg::VisionMessageWrapperPBMsg(const VisionMessageWrapperPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.VisionMessageWrapperPBMsg)
}

void VisionMessageWrapperPBMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgqualifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgdatasize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisionMessageWrapperPBMsg::~VisionMessageWrapperPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.VisionMessageWrapperPBMsg)
  SharedDtor();
}

void VisionMessageWrapperPBMsg::SharedDtor() {
  msgname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgqualifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VisionMessageWrapperPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisionMessageWrapperPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisionMessageWrapperPBMsg_descriptor_;
}

const VisionMessageWrapperPBMsg& VisionMessageWrapperPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

VisionMessageWrapperPBMsg* VisionMessageWrapperPBMsg::default_instance_ = NULL;

VisionMessageWrapperPBMsg* VisionMessageWrapperPBMsg::New(::google::protobuf::Arena* arena) const {
  VisionMessageWrapperPBMsg* n = new VisionMessageWrapperPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VisionMessageWrapperPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.VisionMessageWrapperPBMsg)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_msgname()) {
      msgname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_msgqualifier()) {
      msgqualifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_msgdata()) {
      msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    msgdatasize_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VisionMessageWrapperPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.VisionMessageWrapperPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string MsgName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vision_messages.VisionMessageWrapperPBMsg.MsgName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MsgQualifier;
        break;
      }

      // optional string MsgQualifier = 2;
      case 2: {
        if (tag == 18) {
         parse_MsgQualifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgqualifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgqualifier().data(), this->msgqualifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vision_messages.VisionMessageWrapperPBMsg.MsgQualifier");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_MsgData;
        break;
      }

      // optional bytes MsgData = 3;
      case 3: {
        if (tag == 26) {
         parse_MsgData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msgdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MsgDataSize;
        break;
      }

      // optional uint32 MsgDataSize = 4;
      case 4: {
        if (tag == 32) {
         parse_MsgDataSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgdatasize_)));
          set_has_msgdatasize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.VisionMessageWrapperPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.VisionMessageWrapperPBMsg)
  return false;
#undef DO_
}

void VisionMessageWrapperPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.VisionMessageWrapperPBMsg)
  // required string MsgName = 1;
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.VisionMessageWrapperPBMsg.MsgName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msgname(), output);
  }

  // optional string MsgQualifier = 2;
  if (has_msgqualifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgqualifier().data(), this->msgqualifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.VisionMessageWrapperPBMsg.MsgQualifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msgqualifier(), output);
  }

  // optional bytes MsgData = 3;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->msgdata(), output);
  }

  // optional uint32 MsgDataSize = 4;
  if (has_msgdatasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msgdatasize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.VisionMessageWrapperPBMsg)
}

::google::protobuf::uint8* VisionMessageWrapperPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.VisionMessageWrapperPBMsg)
  // required string MsgName = 1;
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.VisionMessageWrapperPBMsg.MsgName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string MsgQualifier = 2;
  if (has_msgqualifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgqualifier().data(), this->msgqualifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.VisionMessageWrapperPBMsg.MsgQualifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msgqualifier(), target);
  }

  // optional bytes MsgData = 3;
  if (has_msgdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msgdata(), target);
  }

  // optional uint32 MsgDataSize = 4;
  if (has_msgdatasize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->msgdatasize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.VisionMessageWrapperPBMsg)
  return target;
}

int VisionMessageWrapperPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.VisionMessageWrapperPBMsg)
  int total_size = 0;

  // required string MsgName = 1;
  if (has_msgname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msgname());
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional string MsgQualifier = 2;
    if (has_msgqualifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgqualifier());
    }

    // optional bytes MsgData = 3;
    if (has_msgdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msgdata());
    }

    // optional uint32 MsgDataSize = 4;
    if (has_msgdatasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgdatasize());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisionMessageWrapperPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.VisionMessageWrapperPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VisionMessageWrapperPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VisionMessageWrapperPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.VisionMessageWrapperPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.VisionMessageWrapperPBMsg)
    MergeFrom(*source);
  }
}

void VisionMessageWrapperPBMsg::MergeFrom(const VisionMessageWrapperPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.VisionMessageWrapperPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_has_msgname();
      msgname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgname_);
    }
    if (from.has_msgqualifier()) {
      set_has_msgqualifier();
      msgqualifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgqualifier_);
    }
    if (from.has_msgdata()) {
      set_has_msgdata();
      msgdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgdata_);
    }
    if (from.has_msgdatasize()) {
      set_msgdatasize(from.msgdatasize());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VisionMessageWrapperPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.VisionMessageWrapperPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisionMessageWrapperPBMsg::CopyFrom(const VisionMessageWrapperPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.VisionMessageWrapperPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionMessageWrapperPBMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VisionMessageWrapperPBMsg::Swap(VisionMessageWrapperPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VisionMessageWrapperPBMsg::InternalSwap(VisionMessageWrapperPBMsg* other) {
  msgname_.Swap(&other->msgname_);
  msgqualifier_.Swap(&other->msgqualifier_);
  msgdata_.Swap(&other->msgdata_);
  std::swap(msgdatasize_, other->msgdatasize_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VisionMessageWrapperPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisionMessageWrapperPBMsg_descriptor_;
  metadata.reflection = VisionMessageWrapperPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VisionMessageWrapperPBMsg

// required string MsgName = 1;
bool VisionMessageWrapperPBMsg::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VisionMessageWrapperPBMsg::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
void VisionMessageWrapperPBMsg::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
void VisionMessageWrapperPBMsg::clear_msgname() {
  msgname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgname();
}
 const ::std::string& VisionMessageWrapperPBMsg::msgname() const {
  // @@protoc_insertion_point(field_get:vision_messages.VisionMessageWrapperPBMsg.MsgName)
  return msgname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VisionMessageWrapperPBMsg::set_msgname(const ::std::string& value) {
  set_has_msgname();
  msgname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vision_messages.VisionMessageWrapperPBMsg.MsgName)
}
 void VisionMessageWrapperPBMsg::set_msgname(const char* value) {
  set_has_msgname();
  msgname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vision_messages.VisionMessageWrapperPBMsg.MsgName)
}
 void VisionMessageWrapperPBMsg::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  msgname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vision_messages.VisionMessageWrapperPBMsg.MsgName)
}
 ::std::string* VisionMessageWrapperPBMsg::mutable_msgname() {
  set_has_msgname();
  // @@protoc_insertion_point(field_mutable:vision_messages.VisionMessageWrapperPBMsg.MsgName)
  return msgname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VisionMessageWrapperPBMsg::release_msgname() {
  // @@protoc_insertion_point(field_release:vision_messages.VisionMessageWrapperPBMsg.MsgName)
  clear_has_msgname();
  return msgname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VisionMessageWrapperPBMsg::set_allocated_msgname(::std::string* msgname) {
  if (msgname != NULL) {
    set_has_msgname();
  } else {
    clear_has_msgname();
  }
  msgname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgname);
  // @@protoc_insertion_point(field_set_allocated:vision_messages.VisionMessageWrapperPBMsg.MsgName)
}

// optional string MsgQualifier = 2;
bool VisionMessageWrapperPBMsg::has_msgqualifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VisionMessageWrapperPBMsg::set_has_msgqualifier() {
  _has_bits_[0] |= 0x00000002u;
}
void VisionMessageWrapperPBMsg::clear_has_msgqualifier() {
  _has_bits_[0] &= ~0x00000002u;
}
void VisionMessageWrapperPBMsg::clear_msgqualifier() {
  msgqualifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgqualifier();
}
 const ::std::string& VisionMessageWrapperPBMsg::msgqualifier() const {
  // @@protoc_insertion_point(field_get:vision_messages.VisionMessageWrapperPBMsg.MsgQualifier)
  return msgqualifier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VisionMessageWrapperPBMsg::set_msgqualifier(const ::std::string& value) {
  set_has_msgqualifier();
  msgqualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vision_messages.VisionMessageWrapperPBMsg.MsgQualifier)
}
 void VisionMessageWrapperPBMsg::set_msgqualifier(const char* value) {
  set_has_msgqualifier();
  msgqualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vision_messages.VisionMessageWrapperPBMsg.MsgQualifier)
}
 void VisionMessageWrapperPBMsg::set_msgqualifier(const char* value, size_t size) {
  set_has_msgqualifier();
  msgqualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vision_messages.VisionMessageWrapperPBMsg.MsgQualifier)
}
 ::std::string* VisionMessageWrapperPBMsg::mutable_msgqualifier() {
  set_has_msgqualifier();
  // @@protoc_insertion_point(field_mutable:vision_messages.VisionMessageWrapperPBMsg.MsgQualifier)
  return msgqualifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VisionMessageWrapperPBMsg::release_msgqualifier() {
  // @@protoc_insertion_point(field_release:vision_messages.VisionMessageWrapperPBMsg.MsgQualifier)
  clear_has_msgqualifier();
  return msgqualifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VisionMessageWrapperPBMsg::set_allocated_msgqualifier(::std::string* msgqualifier) {
  if (msgqualifier != NULL) {
    set_has_msgqualifier();
  } else {
    clear_has_msgqualifier();
  }
  msgqualifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgqualifier);
  // @@protoc_insertion_point(field_set_allocated:vision_messages.VisionMessageWrapperPBMsg.MsgQualifier)
}

// optional bytes MsgData = 3;
bool VisionMessageWrapperPBMsg::has_msgdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VisionMessageWrapperPBMsg::set_has_msgdata() {
  _has_bits_[0] |= 0x00000004u;
}
void VisionMessageWrapperPBMsg::clear_has_msgdata() {
  _has_bits_[0] &= ~0x00000004u;
}
void VisionMessageWrapperPBMsg::clear_msgdata() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgdata();
}
 const ::std::string& VisionMessageWrapperPBMsg::msgdata() const {
  // @@protoc_insertion_point(field_get:vision_messages.VisionMessageWrapperPBMsg.MsgData)
  return msgdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VisionMessageWrapperPBMsg::set_msgdata(const ::std::string& value) {
  set_has_msgdata();
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vision_messages.VisionMessageWrapperPBMsg.MsgData)
}
 void VisionMessageWrapperPBMsg::set_msgdata(const char* value) {
  set_has_msgdata();
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vision_messages.VisionMessageWrapperPBMsg.MsgData)
}
 void VisionMessageWrapperPBMsg::set_msgdata(const void* value, size_t size) {
  set_has_msgdata();
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vision_messages.VisionMessageWrapperPBMsg.MsgData)
}
 ::std::string* VisionMessageWrapperPBMsg::mutable_msgdata() {
  set_has_msgdata();
  // @@protoc_insertion_point(field_mutable:vision_messages.VisionMessageWrapperPBMsg.MsgData)
  return msgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VisionMessageWrapperPBMsg::release_msgdata() {
  // @@protoc_insertion_point(field_release:vision_messages.VisionMessageWrapperPBMsg.MsgData)
  clear_has_msgdata();
  return msgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VisionMessageWrapperPBMsg::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata != NULL) {
    set_has_msgdata();
  } else {
    clear_has_msgdata();
  }
  msgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdata);
  // @@protoc_insertion_point(field_set_allocated:vision_messages.VisionMessageWrapperPBMsg.MsgData)
}

// optional uint32 MsgDataSize = 4;
bool VisionMessageWrapperPBMsg::has_msgdatasize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VisionMessageWrapperPBMsg::set_has_msgdatasize() {
  _has_bits_[0] |= 0x00000008u;
}
void VisionMessageWrapperPBMsg::clear_has_msgdatasize() {
  _has_bits_[0] &= ~0x00000008u;
}
void VisionMessageWrapperPBMsg::clear_msgdatasize() {
  msgdatasize_ = 0u;
  clear_has_msgdatasize();
}
 ::google::protobuf::uint32 VisionMessageWrapperPBMsg::msgdatasize() const {
  // @@protoc_insertion_point(field_get:vision_messages.VisionMessageWrapperPBMsg.MsgDataSize)
  return msgdatasize_;
}
 void VisionMessageWrapperPBMsg::set_msgdatasize(::google::protobuf::uint32 value) {
  set_has_msgdatasize();
  msgdatasize_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VisionMessageWrapperPBMsg.MsgDataSize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VisionCommandPBMsg::kCommandFieldNumber;
const int VisionCommandPBMsg::kCmdQualifierFieldNumber;
const int VisionCommandPBMsg::kCmdDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VisionCommandPBMsg::VisionCommandPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.VisionCommandPBMsg)
}

void VisionCommandPBMsg::InitAsDefaultInstance() {
}

VisionCommandPBMsg::VisionCommandPBMsg(const VisionCommandPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.VisionCommandPBMsg)
}

void VisionCommandPBMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmdqualifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisionCommandPBMsg::~VisionCommandPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.VisionCommandPBMsg)
  SharedDtor();
}

void VisionCommandPBMsg::SharedDtor() {
  command_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmdqualifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmddata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VisionCommandPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisionCommandPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisionCommandPBMsg_descriptor_;
}

const VisionCommandPBMsg& VisionCommandPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

VisionCommandPBMsg* VisionCommandPBMsg::default_instance_ = NULL;

VisionCommandPBMsg* VisionCommandPBMsg::New(::google::protobuf::Arena* arena) const {
  VisionCommandPBMsg* n = new VisionCommandPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VisionCommandPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.VisionCommandPBMsg)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_command()) {
      command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cmdqualifier()) {
      cmdqualifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cmddata()) {
      cmddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VisionCommandPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.VisionCommandPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Command = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vision_messages.VisionCommandPBMsg.Command");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CmdQualifier;
        break;
      }

      // optional string CmdQualifier = 2;
      case 2: {
        if (tag == 18) {
         parse_CmdQualifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmdqualifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmdqualifier().data(), this->cmdqualifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vision_messages.VisionCommandPBMsg.CmdQualifier");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_CmdData;
        break;
      }

      // optional bytes CmdData = 3;
      case 3: {
        if (tag == 26) {
         parse_CmdData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cmddata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.VisionCommandPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.VisionCommandPBMsg)
  return false;
#undef DO_
}

void VisionCommandPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.VisionCommandPBMsg)
  // required string Command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.VisionCommandPBMsg.Command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->command(), output);
  }

  // optional string CmdQualifier = 2;
  if (has_cmdqualifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdqualifier().data(), this->cmdqualifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.VisionCommandPBMsg.CmdQualifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cmdqualifier(), output);
  }

  // optional bytes CmdData = 3;
  if (has_cmddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->cmddata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.VisionCommandPBMsg)
}

::google::protobuf::uint8* VisionCommandPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.VisionCommandPBMsg)
  // required string Command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.VisionCommandPBMsg.Command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }

  // optional string CmdQualifier = 2;
  if (has_cmdqualifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdqualifier().data(), this->cmdqualifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.VisionCommandPBMsg.CmdQualifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cmdqualifier(), target);
  }

  // optional bytes CmdData = 3;
  if (has_cmddata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cmddata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.VisionCommandPBMsg)
  return target;
}

int VisionCommandPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.VisionCommandPBMsg)
  int total_size = 0;

  // required string Command = 1;
  if (has_command()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->command());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional string CmdQualifier = 2;
    if (has_cmdqualifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmdqualifier());
    }

    // optional bytes CmdData = 3;
    if (has_cmddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cmddata());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisionCommandPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.VisionCommandPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VisionCommandPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VisionCommandPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.VisionCommandPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.VisionCommandPBMsg)
    MergeFrom(*source);
  }
}

void VisionCommandPBMsg::MergeFrom(const VisionCommandPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.VisionCommandPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_has_command();
      command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_);
    }
    if (from.has_cmdqualifier()) {
      set_has_cmdqualifier();
      cmdqualifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmdqualifier_);
    }
    if (from.has_cmddata()) {
      set_has_cmddata();
      cmddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmddata_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VisionCommandPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.VisionCommandPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisionCommandPBMsg::CopyFrom(const VisionCommandPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.VisionCommandPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionCommandPBMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VisionCommandPBMsg::Swap(VisionCommandPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VisionCommandPBMsg::InternalSwap(VisionCommandPBMsg* other) {
  command_.Swap(&other->command_);
  cmdqualifier_.Swap(&other->cmdqualifier_);
  cmddata_.Swap(&other->cmddata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VisionCommandPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisionCommandPBMsg_descriptor_;
  metadata.reflection = VisionCommandPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VisionCommandPBMsg

// required string Command = 1;
bool VisionCommandPBMsg::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VisionCommandPBMsg::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
void VisionCommandPBMsg::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
void VisionCommandPBMsg::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_command();
}
 const ::std::string& VisionCommandPBMsg::command() const {
  // @@protoc_insertion_point(field_get:vision_messages.VisionCommandPBMsg.Command)
  return command_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VisionCommandPBMsg::set_command(const ::std::string& value) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vision_messages.VisionCommandPBMsg.Command)
}
 void VisionCommandPBMsg::set_command(const char* value) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vision_messages.VisionCommandPBMsg.Command)
}
 void VisionCommandPBMsg::set_command(const char* value, size_t size) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vision_messages.VisionCommandPBMsg.Command)
}
 ::std::string* VisionCommandPBMsg::mutable_command() {
  set_has_command();
  // @@protoc_insertion_point(field_mutable:vision_messages.VisionCommandPBMsg.Command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VisionCommandPBMsg::release_command() {
  // @@protoc_insertion_point(field_release:vision_messages.VisionCommandPBMsg.Command)
  clear_has_command();
  return command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VisionCommandPBMsg::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    set_has_command();
  } else {
    clear_has_command();
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:vision_messages.VisionCommandPBMsg.Command)
}

// optional string CmdQualifier = 2;
bool VisionCommandPBMsg::has_cmdqualifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VisionCommandPBMsg::set_has_cmdqualifier() {
  _has_bits_[0] |= 0x00000002u;
}
void VisionCommandPBMsg::clear_has_cmdqualifier() {
  _has_bits_[0] &= ~0x00000002u;
}
void VisionCommandPBMsg::clear_cmdqualifier() {
  cmdqualifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmdqualifier();
}
 const ::std::string& VisionCommandPBMsg::cmdqualifier() const {
  // @@protoc_insertion_point(field_get:vision_messages.VisionCommandPBMsg.CmdQualifier)
  return cmdqualifier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VisionCommandPBMsg::set_cmdqualifier(const ::std::string& value) {
  set_has_cmdqualifier();
  cmdqualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vision_messages.VisionCommandPBMsg.CmdQualifier)
}
 void VisionCommandPBMsg::set_cmdqualifier(const char* value) {
  set_has_cmdqualifier();
  cmdqualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vision_messages.VisionCommandPBMsg.CmdQualifier)
}
 void VisionCommandPBMsg::set_cmdqualifier(const char* value, size_t size) {
  set_has_cmdqualifier();
  cmdqualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vision_messages.VisionCommandPBMsg.CmdQualifier)
}
 ::std::string* VisionCommandPBMsg::mutable_cmdqualifier() {
  set_has_cmdqualifier();
  // @@protoc_insertion_point(field_mutable:vision_messages.VisionCommandPBMsg.CmdQualifier)
  return cmdqualifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VisionCommandPBMsg::release_cmdqualifier() {
  // @@protoc_insertion_point(field_release:vision_messages.VisionCommandPBMsg.CmdQualifier)
  clear_has_cmdqualifier();
  return cmdqualifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VisionCommandPBMsg::set_allocated_cmdqualifier(::std::string* cmdqualifier) {
  if (cmdqualifier != NULL) {
    set_has_cmdqualifier();
  } else {
    clear_has_cmdqualifier();
  }
  cmdqualifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmdqualifier);
  // @@protoc_insertion_point(field_set_allocated:vision_messages.VisionCommandPBMsg.CmdQualifier)
}

// optional bytes CmdData = 3;
bool VisionCommandPBMsg::has_cmddata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VisionCommandPBMsg::set_has_cmddata() {
  _has_bits_[0] |= 0x00000004u;
}
void VisionCommandPBMsg::clear_has_cmddata() {
  _has_bits_[0] &= ~0x00000004u;
}
void VisionCommandPBMsg::clear_cmddata() {
  cmddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmddata();
}
 const ::std::string& VisionCommandPBMsg::cmddata() const {
  // @@protoc_insertion_point(field_get:vision_messages.VisionCommandPBMsg.CmdData)
  return cmddata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VisionCommandPBMsg::set_cmddata(const ::std::string& value) {
  set_has_cmddata();
  cmddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vision_messages.VisionCommandPBMsg.CmdData)
}
 void VisionCommandPBMsg::set_cmddata(const char* value) {
  set_has_cmddata();
  cmddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vision_messages.VisionCommandPBMsg.CmdData)
}
 void VisionCommandPBMsg::set_cmddata(const void* value, size_t size) {
  set_has_cmddata();
  cmddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vision_messages.VisionCommandPBMsg.CmdData)
}
 ::std::string* VisionCommandPBMsg::mutable_cmddata() {
  set_has_cmddata();
  // @@protoc_insertion_point(field_mutable:vision_messages.VisionCommandPBMsg.CmdData)
  return cmddata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VisionCommandPBMsg::release_cmddata() {
  // @@protoc_insertion_point(field_release:vision_messages.VisionCommandPBMsg.CmdData)
  clear_has_cmddata();
  return cmddata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VisionCommandPBMsg::set_allocated_cmddata(::std::string* cmddata) {
  if (cmddata != NULL) {
    set_has_cmddata();
  } else {
    clear_has_cmddata();
  }
  cmddata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmddata);
  // @@protoc_insertion_point(field_set_allocated:vision_messages.VisionCommandPBMsg.CmdData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* VisionResponsePBMsg_ResponseType_e_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisionResponsePBMsg_ResponseType_e_descriptor_;
}
bool VisionResponsePBMsg_ResponseType_e_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VisionResponsePBMsg_ResponseType_e VisionResponsePBMsg::kOK;
const VisionResponsePBMsg_ResponseType_e VisionResponsePBMsg::kError;
const VisionResponsePBMsg_ResponseType_e VisionResponsePBMsg::ResponseType_e_MIN;
const VisionResponsePBMsg_ResponseType_e VisionResponsePBMsg::ResponseType_e_MAX;
const int VisionResponsePBMsg::ResponseType_e_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VisionResponsePBMsg::kCmdResponseTypeFieldNumber;
const int VisionResponsePBMsg::kCmdResponseMessageFieldNumber;
const int VisionResponsePBMsg::kCmdResponseDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VisionResponsePBMsg::VisionResponsePBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.VisionResponsePBMsg)
}

void VisionResponsePBMsg::InitAsDefaultInstance() {
}

VisionResponsePBMsg::VisionResponsePBMsg(const VisionResponsePBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.VisionResponsePBMsg)
}

void VisionResponsePBMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdresponsetype_ = 0;
  cmdresponsemessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmdresponsedata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisionResponsePBMsg::~VisionResponsePBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.VisionResponsePBMsg)
  SharedDtor();
}

void VisionResponsePBMsg::SharedDtor() {
  cmdresponsemessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmdresponsedata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VisionResponsePBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisionResponsePBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisionResponsePBMsg_descriptor_;
}

const VisionResponsePBMsg& VisionResponsePBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

VisionResponsePBMsg* VisionResponsePBMsg::default_instance_ = NULL;

VisionResponsePBMsg* VisionResponsePBMsg::New(::google::protobuf::Arena* arena) const {
  VisionResponsePBMsg* n = new VisionResponsePBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VisionResponsePBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.VisionResponsePBMsg)
  if (_has_bits_[0 / 32] & 7u) {
    cmdresponsetype_ = 0;
    if (has_cmdresponsemessage()) {
      cmdresponsemessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cmdresponsedata()) {
      cmdresponsedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VisionResponsePBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.VisionResponsePBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vision_messages.VisionResponsePBMsg.ResponseType_e CmdResponseType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vision_messages::VisionResponsePBMsg_ResponseType_e_IsValid(value)) {
            set_cmdresponsetype(static_cast< ::vision_messages::VisionResponsePBMsg_ResponseType_e >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CmdResponseMessage;
        break;
      }

      // optional string CmdResponseMessage = 2;
      case 2: {
        if (tag == 18) {
         parse_CmdResponseMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmdresponsemessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmdresponsemessage().data(), this->cmdresponsemessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vision_messages.VisionResponsePBMsg.CmdResponseMessage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_CmdResponseData;
        break;
      }

      // optional bytes CmdResponseData = 3;
      case 3: {
        if (tag == 26) {
         parse_CmdResponseData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cmdresponsedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.VisionResponsePBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.VisionResponsePBMsg)
  return false;
#undef DO_
}

void VisionResponsePBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.VisionResponsePBMsg)
  // optional .vision_messages.VisionResponsePBMsg.ResponseType_e CmdResponseType = 1;
  if (has_cmdresponsetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdresponsetype(), output);
  }

  // optional string CmdResponseMessage = 2;
  if (has_cmdresponsemessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdresponsemessage().data(), this->cmdresponsemessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.VisionResponsePBMsg.CmdResponseMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cmdresponsemessage(), output);
  }

  // optional bytes CmdResponseData = 3;
  if (has_cmdresponsedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->cmdresponsedata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.VisionResponsePBMsg)
}

::google::protobuf::uint8* VisionResponsePBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.VisionResponsePBMsg)
  // optional .vision_messages.VisionResponsePBMsg.ResponseType_e CmdResponseType = 1;
  if (has_cmdresponsetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdresponsetype(), target);
  }

  // optional string CmdResponseMessage = 2;
  if (has_cmdresponsemessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdresponsemessage().data(), this->cmdresponsemessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.VisionResponsePBMsg.CmdResponseMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cmdresponsemessage(), target);
  }

  // optional bytes CmdResponseData = 3;
  if (has_cmdresponsedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cmdresponsedata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.VisionResponsePBMsg)
  return target;
}

int VisionResponsePBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.VisionResponsePBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .vision_messages.VisionResponsePBMsg.ResponseType_e CmdResponseType = 1;
    if (has_cmdresponsetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdresponsetype());
    }

    // optional string CmdResponseMessage = 2;
    if (has_cmdresponsemessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmdresponsemessage());
    }

    // optional bytes CmdResponseData = 3;
    if (has_cmdresponsedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cmdresponsedata());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisionResponsePBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.VisionResponsePBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VisionResponsePBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VisionResponsePBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.VisionResponsePBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.VisionResponsePBMsg)
    MergeFrom(*source);
  }
}

void VisionResponsePBMsg::MergeFrom(const VisionResponsePBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.VisionResponsePBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdresponsetype()) {
      set_cmdresponsetype(from.cmdresponsetype());
    }
    if (from.has_cmdresponsemessage()) {
      set_has_cmdresponsemessage();
      cmdresponsemessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmdresponsemessage_);
    }
    if (from.has_cmdresponsedata()) {
      set_has_cmdresponsedata();
      cmdresponsedata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmdresponsedata_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VisionResponsePBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.VisionResponsePBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisionResponsePBMsg::CopyFrom(const VisionResponsePBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.VisionResponsePBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionResponsePBMsg::IsInitialized() const {

  return true;
}

void VisionResponsePBMsg::Swap(VisionResponsePBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VisionResponsePBMsg::InternalSwap(VisionResponsePBMsg* other) {
  std::swap(cmdresponsetype_, other->cmdresponsetype_);
  cmdresponsemessage_.Swap(&other->cmdresponsemessage_);
  cmdresponsedata_.Swap(&other->cmdresponsedata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VisionResponsePBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisionResponsePBMsg_descriptor_;
  metadata.reflection = VisionResponsePBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VisionResponsePBMsg

// optional .vision_messages.VisionResponsePBMsg.ResponseType_e CmdResponseType = 1;
bool VisionResponsePBMsg::has_cmdresponsetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VisionResponsePBMsg::set_has_cmdresponsetype() {
  _has_bits_[0] |= 0x00000001u;
}
void VisionResponsePBMsg::clear_has_cmdresponsetype() {
  _has_bits_[0] &= ~0x00000001u;
}
void VisionResponsePBMsg::clear_cmdresponsetype() {
  cmdresponsetype_ = 0;
  clear_has_cmdresponsetype();
}
 ::vision_messages::VisionResponsePBMsg_ResponseType_e VisionResponsePBMsg::cmdresponsetype() const {
  // @@protoc_insertion_point(field_get:vision_messages.VisionResponsePBMsg.CmdResponseType)
  return static_cast< ::vision_messages::VisionResponsePBMsg_ResponseType_e >(cmdresponsetype_);
}
 void VisionResponsePBMsg::set_cmdresponsetype(::vision_messages::VisionResponsePBMsg_ResponseType_e value) {
  assert(::vision_messages::VisionResponsePBMsg_ResponseType_e_IsValid(value));
  set_has_cmdresponsetype();
  cmdresponsetype_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VisionResponsePBMsg.CmdResponseType)
}

// optional string CmdResponseMessage = 2;
bool VisionResponsePBMsg::has_cmdresponsemessage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VisionResponsePBMsg::set_has_cmdresponsemessage() {
  _has_bits_[0] |= 0x00000002u;
}
void VisionResponsePBMsg::clear_has_cmdresponsemessage() {
  _has_bits_[0] &= ~0x00000002u;
}
void VisionResponsePBMsg::clear_cmdresponsemessage() {
  cmdresponsemessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmdresponsemessage();
}
 const ::std::string& VisionResponsePBMsg::cmdresponsemessage() const {
  // @@protoc_insertion_point(field_get:vision_messages.VisionResponsePBMsg.CmdResponseMessage)
  return cmdresponsemessage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VisionResponsePBMsg::set_cmdresponsemessage(const ::std::string& value) {
  set_has_cmdresponsemessage();
  cmdresponsemessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vision_messages.VisionResponsePBMsg.CmdResponseMessage)
}
 void VisionResponsePBMsg::set_cmdresponsemessage(const char* value) {
  set_has_cmdresponsemessage();
  cmdresponsemessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vision_messages.VisionResponsePBMsg.CmdResponseMessage)
}
 void VisionResponsePBMsg::set_cmdresponsemessage(const char* value, size_t size) {
  set_has_cmdresponsemessage();
  cmdresponsemessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vision_messages.VisionResponsePBMsg.CmdResponseMessage)
}
 ::std::string* VisionResponsePBMsg::mutable_cmdresponsemessage() {
  set_has_cmdresponsemessage();
  // @@protoc_insertion_point(field_mutable:vision_messages.VisionResponsePBMsg.CmdResponseMessage)
  return cmdresponsemessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VisionResponsePBMsg::release_cmdresponsemessage() {
  // @@protoc_insertion_point(field_release:vision_messages.VisionResponsePBMsg.CmdResponseMessage)
  clear_has_cmdresponsemessage();
  return cmdresponsemessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VisionResponsePBMsg::set_allocated_cmdresponsemessage(::std::string* cmdresponsemessage) {
  if (cmdresponsemessage != NULL) {
    set_has_cmdresponsemessage();
  } else {
    clear_has_cmdresponsemessage();
  }
  cmdresponsemessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmdresponsemessage);
  // @@protoc_insertion_point(field_set_allocated:vision_messages.VisionResponsePBMsg.CmdResponseMessage)
}

// optional bytes CmdResponseData = 3;
bool VisionResponsePBMsg::has_cmdresponsedata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VisionResponsePBMsg::set_has_cmdresponsedata() {
  _has_bits_[0] |= 0x00000004u;
}
void VisionResponsePBMsg::clear_has_cmdresponsedata() {
  _has_bits_[0] &= ~0x00000004u;
}
void VisionResponsePBMsg::clear_cmdresponsedata() {
  cmdresponsedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmdresponsedata();
}
 const ::std::string& VisionResponsePBMsg::cmdresponsedata() const {
  // @@protoc_insertion_point(field_get:vision_messages.VisionResponsePBMsg.CmdResponseData)
  return cmdresponsedata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VisionResponsePBMsg::set_cmdresponsedata(const ::std::string& value) {
  set_has_cmdresponsedata();
  cmdresponsedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vision_messages.VisionResponsePBMsg.CmdResponseData)
}
 void VisionResponsePBMsg::set_cmdresponsedata(const char* value) {
  set_has_cmdresponsedata();
  cmdresponsedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vision_messages.VisionResponsePBMsg.CmdResponseData)
}
 void VisionResponsePBMsg::set_cmdresponsedata(const void* value, size_t size) {
  set_has_cmdresponsedata();
  cmdresponsedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vision_messages.VisionResponsePBMsg.CmdResponseData)
}
 ::std::string* VisionResponsePBMsg::mutable_cmdresponsedata() {
  set_has_cmdresponsedata();
  // @@protoc_insertion_point(field_mutable:vision_messages.VisionResponsePBMsg.CmdResponseData)
  return cmdresponsedata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VisionResponsePBMsg::release_cmdresponsedata() {
  // @@protoc_insertion_point(field_release:vision_messages.VisionResponsePBMsg.CmdResponseData)
  clear_has_cmdresponsedata();
  return cmdresponsedata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VisionResponsePBMsg::set_allocated_cmdresponsedata(::std::string* cmdresponsedata) {
  if (cmdresponsedata != NULL) {
    set_has_cmdresponsedata();
  } else {
    clear_has_cmdresponsedata();
  }
  cmdresponsedata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmdresponsedata);
  // @@protoc_insertion_point(field_set_allocated:vision_messages.VisionResponsePBMsg.CmdResponseData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleInertialStatePBMsg::kCoordinatesLatLonOrXYFieldNumber;
const int VehicleInertialStatePBMsg::kLatitudeRadOrYFieldNumber;
const int VehicleInertialStatePBMsg::kLongitudeRadOrXFieldNumber;
const int VehicleInertialStatePBMsg::kAltitudeMSLFieldNumber;
const int VehicleInertialStatePBMsg::kHeightAGLFieldNumber;
const int VehicleInertialStatePBMsg::kVelEastMpSFieldNumber;
const int VehicleInertialStatePBMsg::kVelNorthMpSFieldNumber;
const int VehicleInertialStatePBMsg::kVelDownMpSFieldNumber;
const int VehicleInertialStatePBMsg::kRollRadFieldNumber;
const int VehicleInertialStatePBMsg::kPitchRadFieldNumber;
const int VehicleInertialStatePBMsg::kYawRadFieldNumber;
const int VehicleInertialStatePBMsg::kRollRateRadpsFieldNumber;
const int VehicleInertialStatePBMsg::kPitchRateRadpsFieldNumber;
const int VehicleInertialStatePBMsg::kYawRateRadpsFieldNumber;
const int VehicleInertialStatePBMsg::kGpsTimeStampSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleInertialStatePBMsg::VehicleInertialStatePBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.VehicleInertialStatePBMsg)
}

void VehicleInertialStatePBMsg::InitAsDefaultInstance() {
}

VehicleInertialStatePBMsg::VehicleInertialStatePBMsg(const VehicleInertialStatePBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.VehicleInertialStatePBMsg)
}

void VehicleInertialStatePBMsg::SharedCtor() {
  _cached_size_ = 0;
  coordinateslatlonorxy_ = false;
  latituderadory_ = 0;
  longituderadorx_ = 0;
  altitudemsl_ = 0;
  heightagl_ = 0;
  veleastmps_ = 0;
  velnorthmps_ = 0;
  veldownmps_ = 0;
  rollrad_ = 0;
  pitchrad_ = 0;
  yawrad_ = 0;
  rollrateradps_ = 0;
  pitchrateradps_ = 0;
  yawrateradps_ = 0;
  gpstimestampsec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleInertialStatePBMsg::~VehicleInertialStatePBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.VehicleInertialStatePBMsg)
  SharedDtor();
}

void VehicleInertialStatePBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VehicleInertialStatePBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleInertialStatePBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleInertialStatePBMsg_descriptor_;
}

const VehicleInertialStatePBMsg& VehicleInertialStatePBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

VehicleInertialStatePBMsg* VehicleInertialStatePBMsg::default_instance_ = NULL;

VehicleInertialStatePBMsg* VehicleInertialStatePBMsg::New(::google::protobuf::Arena* arena) const {
  VehicleInertialStatePBMsg* n = new VehicleInertialStatePBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleInertialStatePBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.VehicleInertialStatePBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VehicleInertialStatePBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VehicleInertialStatePBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(latituderadory_, veldownmps_);
    coordinateslatlonorxy_ = false;
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ZR_(rollrad_, gpstimestampsec_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VehicleInertialStatePBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.VehicleInertialStatePBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool CoordinatesLatLonOrXY = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &coordinateslatlonorxy_)));
          set_has_coordinateslatlonorxy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_LatitudeRadOrY;
        break;
      }

      // optional double LatitudeRadOrY = 2;
      case 2: {
        if (tag == 17) {
         parse_LatitudeRadOrY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latituderadory_)));
          set_has_latituderadory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_LongitudeRadOrX;
        break;
      }

      // optional double LongitudeRadOrX = 3;
      case 3: {
        if (tag == 25) {
         parse_LongitudeRadOrX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longituderadorx_)));
          set_has_longituderadorx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_AltitudeMSL;
        break;
      }

      // optional double AltitudeMSL = 4;
      case 4: {
        if (tag == 33) {
         parse_AltitudeMSL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitudemsl_)));
          set_has_altitudemsl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_HeightAGL;
        break;
      }

      // optional double HeightAGL = 5;
      case 5: {
        if (tag == 41) {
         parse_HeightAGL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heightagl_)));
          set_has_heightagl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_VelEastMpS;
        break;
      }

      // optional double VelEastMpS = 6;
      case 6: {
        if (tag == 49) {
         parse_VelEastMpS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &veleastmps_)));
          set_has_veleastmps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_VelNorthMpS;
        break;
      }

      // optional double VelNorthMpS = 7;
      case 7: {
        if (tag == 57) {
         parse_VelNorthMpS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velnorthmps_)));
          set_has_velnorthmps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_VelDownMpS;
        break;
      }

      // optional double VelDownMpS = 8;
      case 8: {
        if (tag == 65) {
         parse_VelDownMpS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &veldownmps_)));
          set_has_veldownmps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_RollRad;
        break;
      }

      // optional double RollRad = 9;
      case 9: {
        if (tag == 73) {
         parse_RollRad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rollrad_)));
          set_has_rollrad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_PitchRad;
        break;
      }

      // optional double PitchRad = 10;
      case 10: {
        if (tag == 81) {
         parse_PitchRad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitchrad_)));
          set_has_pitchrad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_YawRad;
        break;
      }

      // optional double YawRad = 11;
      case 11: {
        if (tag == 89) {
         parse_YawRad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yawrad_)));
          set_has_yawrad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_RollRateRadps;
        break;
      }

      // optional double RollRateRadps = 12;
      case 12: {
        if (tag == 97) {
         parse_RollRateRadps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rollrateradps_)));
          set_has_rollrateradps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_PitchRateRadps;
        break;
      }

      // optional double PitchRateRadps = 13;
      case 13: {
        if (tag == 105) {
         parse_PitchRateRadps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitchrateradps_)));
          set_has_pitchrateradps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_YawRateRadps;
        break;
      }

      // optional double YawRateRadps = 14;
      case 14: {
        if (tag == 113) {
         parse_YawRateRadps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yawrateradps_)));
          set_has_yawrateradps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_gpsTimeStampSec;
        break;
      }

      // optional double gpsTimeStampSec = 15;
      case 15: {
        if (tag == 121) {
         parse_gpsTimeStampSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gpstimestampsec_)));
          set_has_gpstimestampsec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.VehicleInertialStatePBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.VehicleInertialStatePBMsg)
  return false;
#undef DO_
}

void VehicleInertialStatePBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.VehicleInertialStatePBMsg)
  // optional bool CoordinatesLatLonOrXY = 1;
  if (has_coordinateslatlonorxy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->coordinateslatlonorxy(), output);
  }

  // optional double LatitudeRadOrY = 2;
  if (has_latituderadory()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latituderadory(), output);
  }

  // optional double LongitudeRadOrX = 3;
  if (has_longituderadorx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longituderadorx(), output);
  }

  // optional double AltitudeMSL = 4;
  if (has_altitudemsl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->altitudemsl(), output);
  }

  // optional double HeightAGL = 5;
  if (has_heightagl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heightagl(), output);
  }

  // optional double VelEastMpS = 6;
  if (has_veleastmps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->veleastmps(), output);
  }

  // optional double VelNorthMpS = 7;
  if (has_velnorthmps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->velnorthmps(), output);
  }

  // optional double VelDownMpS = 8;
  if (has_veldownmps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->veldownmps(), output);
  }

  // optional double RollRad = 9;
  if (has_rollrad()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->rollrad(), output);
  }

  // optional double PitchRad = 10;
  if (has_pitchrad()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->pitchrad(), output);
  }

  // optional double YawRad = 11;
  if (has_yawrad()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->yawrad(), output);
  }

  // optional double RollRateRadps = 12;
  if (has_rollrateradps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->rollrateradps(), output);
  }

  // optional double PitchRateRadps = 13;
  if (has_pitchrateradps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->pitchrateradps(), output);
  }

  // optional double YawRateRadps = 14;
  if (has_yawrateradps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->yawrateradps(), output);
  }

  // optional double gpsTimeStampSec = 15;
  if (has_gpstimestampsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->gpstimestampsec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.VehicleInertialStatePBMsg)
}

::google::protobuf::uint8* VehicleInertialStatePBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.VehicleInertialStatePBMsg)
  // optional bool CoordinatesLatLonOrXY = 1;
  if (has_coordinateslatlonorxy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->coordinateslatlonorxy(), target);
  }

  // optional double LatitudeRadOrY = 2;
  if (has_latituderadory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latituderadory(), target);
  }

  // optional double LongitudeRadOrX = 3;
  if (has_longituderadorx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longituderadorx(), target);
  }

  // optional double AltitudeMSL = 4;
  if (has_altitudemsl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->altitudemsl(), target);
  }

  // optional double HeightAGL = 5;
  if (has_heightagl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heightagl(), target);
  }

  // optional double VelEastMpS = 6;
  if (has_veleastmps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->veleastmps(), target);
  }

  // optional double VelNorthMpS = 7;
  if (has_velnorthmps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->velnorthmps(), target);
  }

  // optional double VelDownMpS = 8;
  if (has_veldownmps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->veldownmps(), target);
  }

  // optional double RollRad = 9;
  if (has_rollrad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->rollrad(), target);
  }

  // optional double PitchRad = 10;
  if (has_pitchrad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->pitchrad(), target);
  }

  // optional double YawRad = 11;
  if (has_yawrad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->yawrad(), target);
  }

  // optional double RollRateRadps = 12;
  if (has_rollrateradps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->rollrateradps(), target);
  }

  // optional double PitchRateRadps = 13;
  if (has_pitchrateradps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->pitchrateradps(), target);
  }

  // optional double YawRateRadps = 14;
  if (has_yawrateradps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->yawrateradps(), target);
  }

  // optional double gpsTimeStampSec = 15;
  if (has_gpstimestampsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->gpstimestampsec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.VehicleInertialStatePBMsg)
  return target;
}

int VehicleInertialStatePBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.VehicleInertialStatePBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool CoordinatesLatLonOrXY = 1;
    if (has_coordinateslatlonorxy()) {
      total_size += 1 + 1;
    }

    // optional double LatitudeRadOrY = 2;
    if (has_latituderadory()) {
      total_size += 1 + 8;
    }

    // optional double LongitudeRadOrX = 3;
    if (has_longituderadorx()) {
      total_size += 1 + 8;
    }

    // optional double AltitudeMSL = 4;
    if (has_altitudemsl()) {
      total_size += 1 + 8;
    }

    // optional double HeightAGL = 5;
    if (has_heightagl()) {
      total_size += 1 + 8;
    }

    // optional double VelEastMpS = 6;
    if (has_veleastmps()) {
      total_size += 1 + 8;
    }

    // optional double VelNorthMpS = 7;
    if (has_velnorthmps()) {
      total_size += 1 + 8;
    }

    // optional double VelDownMpS = 8;
    if (has_veldownmps()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional double RollRad = 9;
    if (has_rollrad()) {
      total_size += 1 + 8;
    }

    // optional double PitchRad = 10;
    if (has_pitchrad()) {
      total_size += 1 + 8;
    }

    // optional double YawRad = 11;
    if (has_yawrad()) {
      total_size += 1 + 8;
    }

    // optional double RollRateRadps = 12;
    if (has_rollrateradps()) {
      total_size += 1 + 8;
    }

    // optional double PitchRateRadps = 13;
    if (has_pitchrateradps()) {
      total_size += 1 + 8;
    }

    // optional double YawRateRadps = 14;
    if (has_yawrateradps()) {
      total_size += 1 + 8;
    }

    // optional double gpsTimeStampSec = 15;
    if (has_gpstimestampsec()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleInertialStatePBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.VehicleInertialStatePBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VehicleInertialStatePBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleInertialStatePBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.VehicleInertialStatePBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.VehicleInertialStatePBMsg)
    MergeFrom(*source);
  }
}

void VehicleInertialStatePBMsg::MergeFrom(const VehicleInertialStatePBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.VehicleInertialStatePBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coordinateslatlonorxy()) {
      set_coordinateslatlonorxy(from.coordinateslatlonorxy());
    }
    if (from.has_latituderadory()) {
      set_latituderadory(from.latituderadory());
    }
    if (from.has_longituderadorx()) {
      set_longituderadorx(from.longituderadorx());
    }
    if (from.has_altitudemsl()) {
      set_altitudemsl(from.altitudemsl());
    }
    if (from.has_heightagl()) {
      set_heightagl(from.heightagl());
    }
    if (from.has_veleastmps()) {
      set_veleastmps(from.veleastmps());
    }
    if (from.has_velnorthmps()) {
      set_velnorthmps(from.velnorthmps());
    }
    if (from.has_veldownmps()) {
      set_veldownmps(from.veldownmps());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rollrad()) {
      set_rollrad(from.rollrad());
    }
    if (from.has_pitchrad()) {
      set_pitchrad(from.pitchrad());
    }
    if (from.has_yawrad()) {
      set_yawrad(from.yawrad());
    }
    if (from.has_rollrateradps()) {
      set_rollrateradps(from.rollrateradps());
    }
    if (from.has_pitchrateradps()) {
      set_pitchrateradps(from.pitchrateradps());
    }
    if (from.has_yawrateradps()) {
      set_yawrateradps(from.yawrateradps());
    }
    if (from.has_gpstimestampsec()) {
      set_gpstimestampsec(from.gpstimestampsec());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VehicleInertialStatePBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.VehicleInertialStatePBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleInertialStatePBMsg::CopyFrom(const VehicleInertialStatePBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.VehicleInertialStatePBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleInertialStatePBMsg::IsInitialized() const {

  return true;
}

void VehicleInertialStatePBMsg::Swap(VehicleInertialStatePBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleInertialStatePBMsg::InternalSwap(VehicleInertialStatePBMsg* other) {
  std::swap(coordinateslatlonorxy_, other->coordinateslatlonorxy_);
  std::swap(latituderadory_, other->latituderadory_);
  std::swap(longituderadorx_, other->longituderadorx_);
  std::swap(altitudemsl_, other->altitudemsl_);
  std::swap(heightagl_, other->heightagl_);
  std::swap(veleastmps_, other->veleastmps_);
  std::swap(velnorthmps_, other->velnorthmps_);
  std::swap(veldownmps_, other->veldownmps_);
  std::swap(rollrad_, other->rollrad_);
  std::swap(pitchrad_, other->pitchrad_);
  std::swap(yawrad_, other->yawrad_);
  std::swap(rollrateradps_, other->rollrateradps_);
  std::swap(pitchrateradps_, other->pitchrateradps_);
  std::swap(yawrateradps_, other->yawrateradps_);
  std::swap(gpstimestampsec_, other->gpstimestampsec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleInertialStatePBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleInertialStatePBMsg_descriptor_;
  metadata.reflection = VehicleInertialStatePBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleInertialStatePBMsg

// optional bool CoordinatesLatLonOrXY = 1;
bool VehicleInertialStatePBMsg::has_coordinateslatlonorxy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleInertialStatePBMsg::set_has_coordinateslatlonorxy() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleInertialStatePBMsg::clear_has_coordinateslatlonorxy() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleInertialStatePBMsg::clear_coordinateslatlonorxy() {
  coordinateslatlonorxy_ = false;
  clear_has_coordinateslatlonorxy();
}
 bool VehicleInertialStatePBMsg::coordinateslatlonorxy() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleInertialStatePBMsg.CoordinatesLatLonOrXY)
  return coordinateslatlonorxy_;
}
 void VehicleInertialStatePBMsg::set_coordinateslatlonorxy(bool value) {
  set_has_coordinateslatlonorxy();
  coordinateslatlonorxy_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleInertialStatePBMsg.CoordinatesLatLonOrXY)
}

// optional double LatitudeRadOrY = 2;
bool VehicleInertialStatePBMsg::has_latituderadory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleInertialStatePBMsg::set_has_latituderadory() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleInertialStatePBMsg::clear_has_latituderadory() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleInertialStatePBMsg::clear_latituderadory() {
  latituderadory_ = 0;
  clear_has_latituderadory();
}
 double VehicleInertialStatePBMsg::latituderadory() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleInertialStatePBMsg.LatitudeRadOrY)
  return latituderadory_;
}
 void VehicleInertialStatePBMsg::set_latituderadory(double value) {
  set_has_latituderadory();
  latituderadory_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleInertialStatePBMsg.LatitudeRadOrY)
}

// optional double LongitudeRadOrX = 3;
bool VehicleInertialStatePBMsg::has_longituderadorx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleInertialStatePBMsg::set_has_longituderadorx() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleInertialStatePBMsg::clear_has_longituderadorx() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleInertialStatePBMsg::clear_longituderadorx() {
  longituderadorx_ = 0;
  clear_has_longituderadorx();
}
 double VehicleInertialStatePBMsg::longituderadorx() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleInertialStatePBMsg.LongitudeRadOrX)
  return longituderadorx_;
}
 void VehicleInertialStatePBMsg::set_longituderadorx(double value) {
  set_has_longituderadorx();
  longituderadorx_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleInertialStatePBMsg.LongitudeRadOrX)
}

// optional double AltitudeMSL = 4;
bool VehicleInertialStatePBMsg::has_altitudemsl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VehicleInertialStatePBMsg::set_has_altitudemsl() {
  _has_bits_[0] |= 0x00000008u;
}
void VehicleInertialStatePBMsg::clear_has_altitudemsl() {
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleInertialStatePBMsg::clear_altitudemsl() {
  altitudemsl_ = 0;
  clear_has_altitudemsl();
}
 double VehicleInertialStatePBMsg::altitudemsl() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleInertialStatePBMsg.AltitudeMSL)
  return altitudemsl_;
}
 void VehicleInertialStatePBMsg::set_altitudemsl(double value) {
  set_has_altitudemsl();
  altitudemsl_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleInertialStatePBMsg.AltitudeMSL)
}

// optional double HeightAGL = 5;
bool VehicleInertialStatePBMsg::has_heightagl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VehicleInertialStatePBMsg::set_has_heightagl() {
  _has_bits_[0] |= 0x00000010u;
}
void VehicleInertialStatePBMsg::clear_has_heightagl() {
  _has_bits_[0] &= ~0x00000010u;
}
void VehicleInertialStatePBMsg::clear_heightagl() {
  heightagl_ = 0;
  clear_has_heightagl();
}
 double VehicleInertialStatePBMsg::heightagl() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleInertialStatePBMsg.HeightAGL)
  return heightagl_;
}
 void VehicleInertialStatePBMsg::set_heightagl(double value) {
  set_has_heightagl();
  heightagl_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleInertialStatePBMsg.HeightAGL)
}

// optional double VelEastMpS = 6;
bool VehicleInertialStatePBMsg::has_veleastmps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VehicleInertialStatePBMsg::set_has_veleastmps() {
  _has_bits_[0] |= 0x00000020u;
}
void VehicleInertialStatePBMsg::clear_has_veleastmps() {
  _has_bits_[0] &= ~0x00000020u;
}
void VehicleInertialStatePBMsg::clear_veleastmps() {
  veleastmps_ = 0;
  clear_has_veleastmps();
}
 double VehicleInertialStatePBMsg::veleastmps() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleInertialStatePBMsg.VelEastMpS)
  return veleastmps_;
}
 void VehicleInertialStatePBMsg::set_veleastmps(double value) {
  set_has_veleastmps();
  veleastmps_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleInertialStatePBMsg.VelEastMpS)
}

// optional double VelNorthMpS = 7;
bool VehicleInertialStatePBMsg::has_velnorthmps() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VehicleInertialStatePBMsg::set_has_velnorthmps() {
  _has_bits_[0] |= 0x00000040u;
}
void VehicleInertialStatePBMsg::clear_has_velnorthmps() {
  _has_bits_[0] &= ~0x00000040u;
}
void VehicleInertialStatePBMsg::clear_velnorthmps() {
  velnorthmps_ = 0;
  clear_has_velnorthmps();
}
 double VehicleInertialStatePBMsg::velnorthmps() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleInertialStatePBMsg.VelNorthMpS)
  return velnorthmps_;
}
 void VehicleInertialStatePBMsg::set_velnorthmps(double value) {
  set_has_velnorthmps();
  velnorthmps_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleInertialStatePBMsg.VelNorthMpS)
}

// optional double VelDownMpS = 8;
bool VehicleInertialStatePBMsg::has_veldownmps() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VehicleInertialStatePBMsg::set_has_veldownmps() {
  _has_bits_[0] |= 0x00000080u;
}
void VehicleInertialStatePBMsg::clear_has_veldownmps() {
  _has_bits_[0] &= ~0x00000080u;
}
void VehicleInertialStatePBMsg::clear_veldownmps() {
  veldownmps_ = 0;
  clear_has_veldownmps();
}
 double VehicleInertialStatePBMsg::veldownmps() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleInertialStatePBMsg.VelDownMpS)
  return veldownmps_;
}
 void VehicleInertialStatePBMsg::set_veldownmps(double value) {
  set_has_veldownmps();
  veldownmps_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleInertialStatePBMsg.VelDownMpS)
}

// optional double RollRad = 9;
bool VehicleInertialStatePBMsg::has_rollrad() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VehicleInertialStatePBMsg::set_has_rollrad() {
  _has_bits_[0] |= 0x00000100u;
}
void VehicleInertialStatePBMsg::clear_has_rollrad() {
  _has_bits_[0] &= ~0x00000100u;
}
void VehicleInertialStatePBMsg::clear_rollrad() {
  rollrad_ = 0;
  clear_has_rollrad();
}
 double VehicleInertialStatePBMsg::rollrad() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleInertialStatePBMsg.RollRad)
  return rollrad_;
}
 void VehicleInertialStatePBMsg::set_rollrad(double value) {
  set_has_rollrad();
  rollrad_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleInertialStatePBMsg.RollRad)
}

// optional double PitchRad = 10;
bool VehicleInertialStatePBMsg::has_pitchrad() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VehicleInertialStatePBMsg::set_has_pitchrad() {
  _has_bits_[0] |= 0x00000200u;
}
void VehicleInertialStatePBMsg::clear_has_pitchrad() {
  _has_bits_[0] &= ~0x00000200u;
}
void VehicleInertialStatePBMsg::clear_pitchrad() {
  pitchrad_ = 0;
  clear_has_pitchrad();
}
 double VehicleInertialStatePBMsg::pitchrad() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleInertialStatePBMsg.PitchRad)
  return pitchrad_;
}
 void VehicleInertialStatePBMsg::set_pitchrad(double value) {
  set_has_pitchrad();
  pitchrad_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleInertialStatePBMsg.PitchRad)
}

// optional double YawRad = 11;
bool VehicleInertialStatePBMsg::has_yawrad() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VehicleInertialStatePBMsg::set_has_yawrad() {
  _has_bits_[0] |= 0x00000400u;
}
void VehicleInertialStatePBMsg::clear_has_yawrad() {
  _has_bits_[0] &= ~0x00000400u;
}
void VehicleInertialStatePBMsg::clear_yawrad() {
  yawrad_ = 0;
  clear_has_yawrad();
}
 double VehicleInertialStatePBMsg::yawrad() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleInertialStatePBMsg.YawRad)
  return yawrad_;
}
 void VehicleInertialStatePBMsg::set_yawrad(double value) {
  set_has_yawrad();
  yawrad_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleInertialStatePBMsg.YawRad)
}

// optional double RollRateRadps = 12;
bool VehicleInertialStatePBMsg::has_rollrateradps() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VehicleInertialStatePBMsg::set_has_rollrateradps() {
  _has_bits_[0] |= 0x00000800u;
}
void VehicleInertialStatePBMsg::clear_has_rollrateradps() {
  _has_bits_[0] &= ~0x00000800u;
}
void VehicleInertialStatePBMsg::clear_rollrateradps() {
  rollrateradps_ = 0;
  clear_has_rollrateradps();
}
 double VehicleInertialStatePBMsg::rollrateradps() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleInertialStatePBMsg.RollRateRadps)
  return rollrateradps_;
}
 void VehicleInertialStatePBMsg::set_rollrateradps(double value) {
  set_has_rollrateradps();
  rollrateradps_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleInertialStatePBMsg.RollRateRadps)
}

// optional double PitchRateRadps = 13;
bool VehicleInertialStatePBMsg::has_pitchrateradps() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void VehicleInertialStatePBMsg::set_has_pitchrateradps() {
  _has_bits_[0] |= 0x00001000u;
}
void VehicleInertialStatePBMsg::clear_has_pitchrateradps() {
  _has_bits_[0] &= ~0x00001000u;
}
void VehicleInertialStatePBMsg::clear_pitchrateradps() {
  pitchrateradps_ = 0;
  clear_has_pitchrateradps();
}
 double VehicleInertialStatePBMsg::pitchrateradps() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleInertialStatePBMsg.PitchRateRadps)
  return pitchrateradps_;
}
 void VehicleInertialStatePBMsg::set_pitchrateradps(double value) {
  set_has_pitchrateradps();
  pitchrateradps_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleInertialStatePBMsg.PitchRateRadps)
}

// optional double YawRateRadps = 14;
bool VehicleInertialStatePBMsg::has_yawrateradps() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void VehicleInertialStatePBMsg::set_has_yawrateradps() {
  _has_bits_[0] |= 0x00002000u;
}
void VehicleInertialStatePBMsg::clear_has_yawrateradps() {
  _has_bits_[0] &= ~0x00002000u;
}
void VehicleInertialStatePBMsg::clear_yawrateradps() {
  yawrateradps_ = 0;
  clear_has_yawrateradps();
}
 double VehicleInertialStatePBMsg::yawrateradps() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleInertialStatePBMsg.YawRateRadps)
  return yawrateradps_;
}
 void VehicleInertialStatePBMsg::set_yawrateradps(double value) {
  set_has_yawrateradps();
  yawrateradps_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleInertialStatePBMsg.YawRateRadps)
}

// optional double gpsTimeStampSec = 15;
bool VehicleInertialStatePBMsg::has_gpstimestampsec() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void VehicleInertialStatePBMsg::set_has_gpstimestampsec() {
  _has_bits_[0] |= 0x00004000u;
}
void VehicleInertialStatePBMsg::clear_has_gpstimestampsec() {
  _has_bits_[0] &= ~0x00004000u;
}
void VehicleInertialStatePBMsg::clear_gpstimestampsec() {
  gpstimestampsec_ = 0;
  clear_has_gpstimestampsec();
}
 double VehicleInertialStatePBMsg::gpstimestampsec() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleInertialStatePBMsg.gpsTimeStampSec)
  return gpstimestampsec_;
}
 void VehicleInertialStatePBMsg::set_gpstimestampsec(double value) {
  set_has_gpstimestampsec();
  gpstimestampsec_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleInertialStatePBMsg.gpsTimeStampSec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetInfoPBMsg::kImageNumberFieldNumber;
const int TargetInfoPBMsg::kVehicleInertialStatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetInfoPBMsg::TargetInfoPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.TargetInfoPBMsg)
}

void TargetInfoPBMsg::InitAsDefaultInstance() {
  vehicleinertialstates_ = const_cast< ::vision_messages::VehicleInertialStatePBMsg*>(&::vision_messages::VehicleInertialStatePBMsg::default_instance());
}

TargetInfoPBMsg::TargetInfoPBMsg(const TargetInfoPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.TargetInfoPBMsg)
}

void TargetInfoPBMsg::SharedCtor() {
  _cached_size_ = 0;
  imagenumber_ = 0u;
  vehicleinertialstates_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetInfoPBMsg::~TargetInfoPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.TargetInfoPBMsg)
  SharedDtor();
}

void TargetInfoPBMsg::SharedDtor() {
  if (this != default_instance_) {
    delete vehicleinertialstates_;
  }
}

void TargetInfoPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetInfoPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetInfoPBMsg_descriptor_;
}

const TargetInfoPBMsg& TargetInfoPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

TargetInfoPBMsg* TargetInfoPBMsg::default_instance_ = NULL;

TargetInfoPBMsg* TargetInfoPBMsg::New(::google::protobuf::Arena* arena) const {
  TargetInfoPBMsg* n = new TargetInfoPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetInfoPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.TargetInfoPBMsg)
  if (_has_bits_[0 / 32] & 3u) {
    imagenumber_ = 0u;
    if (has_vehicleinertialstates()) {
      if (vehicleinertialstates_ != NULL) vehicleinertialstates_->::vision_messages::VehicleInertialStatePBMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TargetInfoPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.TargetInfoPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ImageNumber = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imagenumber_)));
          set_has_imagenumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_VehicleInertialStates;
        break;
      }

      // optional .vision_messages.VehicleInertialStatePBMsg VehicleInertialStates = 2;
      case 2: {
        if (tag == 18) {
         parse_VehicleInertialStates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicleinertialstates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.TargetInfoPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.TargetInfoPBMsg)
  return false;
#undef DO_
}

void TargetInfoPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.TargetInfoPBMsg)
  // optional uint32 ImageNumber = 1;
  if (has_imagenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->imagenumber(), output);
  }

  // optional .vision_messages.VehicleInertialStatePBMsg VehicleInertialStates = 2;
  if (has_vehicleinertialstates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->vehicleinertialstates_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.TargetInfoPBMsg)
}

::google::protobuf::uint8* TargetInfoPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.TargetInfoPBMsg)
  // optional uint32 ImageNumber = 1;
  if (has_imagenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->imagenumber(), target);
  }

  // optional .vision_messages.VehicleInertialStatePBMsg VehicleInertialStates = 2;
  if (has_vehicleinertialstates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->vehicleinertialstates_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.TargetInfoPBMsg)
  return target;
}

int TargetInfoPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.TargetInfoPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 ImageNumber = 1;
    if (has_imagenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imagenumber());
    }

    // optional .vision_messages.VehicleInertialStatePBMsg VehicleInertialStates = 2;
    if (has_vehicleinertialstates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicleinertialstates_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetInfoPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.TargetInfoPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TargetInfoPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetInfoPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.TargetInfoPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.TargetInfoPBMsg)
    MergeFrom(*source);
  }
}

void TargetInfoPBMsg::MergeFrom(const TargetInfoPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.TargetInfoPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imagenumber()) {
      set_imagenumber(from.imagenumber());
    }
    if (from.has_vehicleinertialstates()) {
      mutable_vehicleinertialstates()->::vision_messages::VehicleInertialStatePBMsg::MergeFrom(from.vehicleinertialstates());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TargetInfoPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.TargetInfoPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetInfoPBMsg::CopyFrom(const TargetInfoPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.TargetInfoPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetInfoPBMsg::IsInitialized() const {

  return true;
}

void TargetInfoPBMsg::Swap(TargetInfoPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetInfoPBMsg::InternalSwap(TargetInfoPBMsg* other) {
  std::swap(imagenumber_, other->imagenumber_);
  std::swap(vehicleinertialstates_, other->vehicleinertialstates_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TargetInfoPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetInfoPBMsg_descriptor_;
  metadata.reflection = TargetInfoPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TargetInfoPBMsg

// optional uint32 ImageNumber = 1;
bool TargetInfoPBMsg::has_imagenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TargetInfoPBMsg::set_has_imagenumber() {
  _has_bits_[0] |= 0x00000001u;
}
void TargetInfoPBMsg::clear_has_imagenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
void TargetInfoPBMsg::clear_imagenumber() {
  imagenumber_ = 0u;
  clear_has_imagenumber();
}
 ::google::protobuf::uint32 TargetInfoPBMsg::imagenumber() const {
  // @@protoc_insertion_point(field_get:vision_messages.TargetInfoPBMsg.ImageNumber)
  return imagenumber_;
}
 void TargetInfoPBMsg::set_imagenumber(::google::protobuf::uint32 value) {
  set_has_imagenumber();
  imagenumber_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.TargetInfoPBMsg.ImageNumber)
}

// optional .vision_messages.VehicleInertialStatePBMsg VehicleInertialStates = 2;
bool TargetInfoPBMsg::has_vehicleinertialstates() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TargetInfoPBMsg::set_has_vehicleinertialstates() {
  _has_bits_[0] |= 0x00000002u;
}
void TargetInfoPBMsg::clear_has_vehicleinertialstates() {
  _has_bits_[0] &= ~0x00000002u;
}
void TargetInfoPBMsg::clear_vehicleinertialstates() {
  if (vehicleinertialstates_ != NULL) vehicleinertialstates_->::vision_messages::VehicleInertialStatePBMsg::Clear();
  clear_has_vehicleinertialstates();
}
const ::vision_messages::VehicleInertialStatePBMsg& TargetInfoPBMsg::vehicleinertialstates() const {
  // @@protoc_insertion_point(field_get:vision_messages.TargetInfoPBMsg.VehicleInertialStates)
  return vehicleinertialstates_ != NULL ? *vehicleinertialstates_ : *default_instance_->vehicleinertialstates_;
}
::vision_messages::VehicleInertialStatePBMsg* TargetInfoPBMsg::mutable_vehicleinertialstates() {
  set_has_vehicleinertialstates();
  if (vehicleinertialstates_ == NULL) {
    vehicleinertialstates_ = new ::vision_messages::VehicleInertialStatePBMsg;
  }
  // @@protoc_insertion_point(field_mutable:vision_messages.TargetInfoPBMsg.VehicleInertialStates)
  return vehicleinertialstates_;
}
::vision_messages::VehicleInertialStatePBMsg* TargetInfoPBMsg::release_vehicleinertialstates() {
  // @@protoc_insertion_point(field_release:vision_messages.TargetInfoPBMsg.VehicleInertialStates)
  clear_has_vehicleinertialstates();
  ::vision_messages::VehicleInertialStatePBMsg* temp = vehicleinertialstates_;
  vehicleinertialstates_ = NULL;
  return temp;
}
void TargetInfoPBMsg::set_allocated_vehicleinertialstates(::vision_messages::VehicleInertialStatePBMsg* vehicleinertialstates) {
  delete vehicleinertialstates_;
  vehicleinertialstates_ = vehicleinertialstates;
  if (vehicleinertialstates) {
    set_has_vehicleinertialstates();
  } else {
    clear_has_vehicleinertialstates();
  }
  // @@protoc_insertion_point(field_set_allocated:vision_messages.TargetInfoPBMsg.VehicleInertialStates)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BroadcastPBMsg::kMessageStringFieldNumber;
const int BroadcastPBMsg::kIsExceptionFieldNumber;
const int BroadcastPBMsg::kReportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BroadcastPBMsg::BroadcastPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.BroadcastPBMsg)
}

void BroadcastPBMsg::InitAsDefaultInstance() {
}

BroadcastPBMsg::BroadcastPBMsg(const BroadcastPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.BroadcastPBMsg)
}

void BroadcastPBMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_exception_ = false;
  report_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastPBMsg::~BroadcastPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.BroadcastPBMsg)
  SharedDtor();
}

void BroadcastPBMsg::SharedDtor() {
  message_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  report_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BroadcastPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastPBMsg_descriptor_;
}

const BroadcastPBMsg& BroadcastPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

BroadcastPBMsg* BroadcastPBMsg::default_instance_ = NULL;

BroadcastPBMsg* BroadcastPBMsg::New(::google::protobuf::Arena* arena) const {
  BroadcastPBMsg* n = new BroadcastPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BroadcastPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.BroadcastPBMsg)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_message_string()) {
      message_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    is_exception_ = false;
    if (has_report()) {
      report_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BroadcastPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.BroadcastPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message_string = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message_string().data(), this->message_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vision_messages.BroadcastPBMsg.message_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_exception;
        break;
      }

      // optional bool is_exception = 2;
      case 2: {
        if (tag == 16) {
         parse_is_exception:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_exception_)));
          set_has_is_exception();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_report;
        break;
      }

      // optional bytes report = 3;
      case 3: {
        if (tag == 26) {
         parse_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_report()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.BroadcastPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.BroadcastPBMsg)
  return false;
#undef DO_
}

void BroadcastPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.BroadcastPBMsg)
  // optional string message_string = 1;
  if (has_message_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_string().data(), this->message_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.BroadcastPBMsg.message_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message_string(), output);
  }

  // optional bool is_exception = 2;
  if (has_is_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_exception(), output);
  }

  // optional bytes report = 3;
  if (has_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->report(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.BroadcastPBMsg)
}

::google::protobuf::uint8* BroadcastPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.BroadcastPBMsg)
  // optional string message_string = 1;
  if (has_message_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_string().data(), this->message_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.BroadcastPBMsg.message_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message_string(), target);
  }

  // optional bool is_exception = 2;
  if (has_is_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_exception(), target);
  }

  // optional bytes report = 3;
  if (has_report()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->report(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.BroadcastPBMsg)
  return target;
}

int BroadcastPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.BroadcastPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string message_string = 1;
    if (has_message_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_string());
    }

    // optional bool is_exception = 2;
    if (has_is_exception()) {
      total_size += 1 + 1;
    }

    // optional bytes report = 3;
    if (has_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->report());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.BroadcastPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BroadcastPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BroadcastPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.BroadcastPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.BroadcastPBMsg)
    MergeFrom(*source);
  }
}

void BroadcastPBMsg::MergeFrom(const BroadcastPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.BroadcastPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_string()) {
      set_has_message_string();
      message_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_string_);
    }
    if (from.has_is_exception()) {
      set_is_exception(from.is_exception());
    }
    if (from.has_report()) {
      set_has_report();
      report_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.report_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BroadcastPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.BroadcastPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastPBMsg::CopyFrom(const BroadcastPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.BroadcastPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastPBMsg::IsInitialized() const {

  return true;
}

void BroadcastPBMsg::Swap(BroadcastPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BroadcastPBMsg::InternalSwap(BroadcastPBMsg* other) {
  message_string_.Swap(&other->message_string_);
  std::swap(is_exception_, other->is_exception_);
  report_.Swap(&other->report_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BroadcastPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastPBMsg_descriptor_;
  metadata.reflection = BroadcastPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BroadcastPBMsg

// optional string message_string = 1;
bool BroadcastPBMsg::has_message_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BroadcastPBMsg::set_has_message_string() {
  _has_bits_[0] |= 0x00000001u;
}
void BroadcastPBMsg::clear_has_message_string() {
  _has_bits_[0] &= ~0x00000001u;
}
void BroadcastPBMsg::clear_message_string() {
  message_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message_string();
}
 const ::std::string& BroadcastPBMsg::message_string() const {
  // @@protoc_insertion_point(field_get:vision_messages.BroadcastPBMsg.message_string)
  return message_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BroadcastPBMsg::set_message_string(const ::std::string& value) {
  set_has_message_string();
  message_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vision_messages.BroadcastPBMsg.message_string)
}
 void BroadcastPBMsg::set_message_string(const char* value) {
  set_has_message_string();
  message_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vision_messages.BroadcastPBMsg.message_string)
}
 void BroadcastPBMsg::set_message_string(const char* value, size_t size) {
  set_has_message_string();
  message_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vision_messages.BroadcastPBMsg.message_string)
}
 ::std::string* BroadcastPBMsg::mutable_message_string() {
  set_has_message_string();
  // @@protoc_insertion_point(field_mutable:vision_messages.BroadcastPBMsg.message_string)
  return message_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BroadcastPBMsg::release_message_string() {
  // @@protoc_insertion_point(field_release:vision_messages.BroadcastPBMsg.message_string)
  clear_has_message_string();
  return message_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BroadcastPBMsg::set_allocated_message_string(::std::string* message_string) {
  if (message_string != NULL) {
    set_has_message_string();
  } else {
    clear_has_message_string();
  }
  message_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_string);
  // @@protoc_insertion_point(field_set_allocated:vision_messages.BroadcastPBMsg.message_string)
}

// optional bool is_exception = 2;
bool BroadcastPBMsg::has_is_exception() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BroadcastPBMsg::set_has_is_exception() {
  _has_bits_[0] |= 0x00000002u;
}
void BroadcastPBMsg::clear_has_is_exception() {
  _has_bits_[0] &= ~0x00000002u;
}
void BroadcastPBMsg::clear_is_exception() {
  is_exception_ = false;
  clear_has_is_exception();
}
 bool BroadcastPBMsg::is_exception() const {
  // @@protoc_insertion_point(field_get:vision_messages.BroadcastPBMsg.is_exception)
  return is_exception_;
}
 void BroadcastPBMsg::set_is_exception(bool value) {
  set_has_is_exception();
  is_exception_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.BroadcastPBMsg.is_exception)
}

// optional bytes report = 3;
bool BroadcastPBMsg::has_report() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BroadcastPBMsg::set_has_report() {
  _has_bits_[0] |= 0x00000004u;
}
void BroadcastPBMsg::clear_has_report() {
  _has_bits_[0] &= ~0x00000004u;
}
void BroadcastPBMsg::clear_report() {
  report_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_report();
}
 const ::std::string& BroadcastPBMsg::report() const {
  // @@protoc_insertion_point(field_get:vision_messages.BroadcastPBMsg.report)
  return report_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BroadcastPBMsg::set_report(const ::std::string& value) {
  set_has_report();
  report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vision_messages.BroadcastPBMsg.report)
}
 void BroadcastPBMsg::set_report(const char* value) {
  set_has_report();
  report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vision_messages.BroadcastPBMsg.report)
}
 void BroadcastPBMsg::set_report(const void* value, size_t size) {
  set_has_report();
  report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vision_messages.BroadcastPBMsg.report)
}
 ::std::string* BroadcastPBMsg::mutable_report() {
  set_has_report();
  // @@protoc_insertion_point(field_mutable:vision_messages.BroadcastPBMsg.report)
  return report_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BroadcastPBMsg::release_report() {
  // @@protoc_insertion_point(field_release:vision_messages.BroadcastPBMsg.report)
  clear_has_report();
  return report_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BroadcastPBMsg::set_allocated_report(::std::string* report) {
  if (report != NULL) {
    set_has_report();
  } else {
    clear_has_report();
  }
  report_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), report);
  // @@protoc_insertion_point(field_set_allocated:vision_messages.BroadcastPBMsg.report)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleFilterVisionObjPBMsg::kInfoFieldNumber;
const int SimpleFilterVisionObjPBMsg::kImageJpegFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleFilterVisionObjPBMsg::SimpleFilterVisionObjPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.SimpleFilterVisionObjPBMsg)
}

void SimpleFilterVisionObjPBMsg::InitAsDefaultInstance() {
}

SimpleFilterVisionObjPBMsg::SimpleFilterVisionObjPBMsg(const SimpleFilterVisionObjPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.SimpleFilterVisionObjPBMsg)
}

void SimpleFilterVisionObjPBMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_jpeg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleFilterVisionObjPBMsg::~SimpleFilterVisionObjPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.SimpleFilterVisionObjPBMsg)
  SharedDtor();
}

void SimpleFilterVisionObjPBMsg::SharedDtor() {
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_jpeg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SimpleFilterVisionObjPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleFilterVisionObjPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleFilterVisionObjPBMsg_descriptor_;
}

const SimpleFilterVisionObjPBMsg& SimpleFilterVisionObjPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

SimpleFilterVisionObjPBMsg* SimpleFilterVisionObjPBMsg::default_instance_ = NULL;

SimpleFilterVisionObjPBMsg* SimpleFilterVisionObjPBMsg::New(::google::protobuf::Arena* arena) const {
  SimpleFilterVisionObjPBMsg* n = new SimpleFilterVisionObjPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleFilterVisionObjPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.SimpleFilterVisionObjPBMsg)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_info()) {
      info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_image_jpeg()) {
      image_jpeg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SimpleFilterVisionObjPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.SimpleFilterVisionObjPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vision_messages.SimpleFilterVisionObjPBMsg.info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_image_jpeg;
        break;
      }

      // optional bytes image_jpeg = 2;
      case 2: {
        if (tag == 18) {
         parse_image_jpeg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image_jpeg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.SimpleFilterVisionObjPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.SimpleFilterVisionObjPBMsg)
  return false;
#undef DO_
}

void SimpleFilterVisionObjPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.SimpleFilterVisionObjPBMsg)
  // optional string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.SimpleFilterVisionObjPBMsg.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->info(), output);
  }

  // optional bytes image_jpeg = 2;
  if (has_image_jpeg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->image_jpeg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.SimpleFilterVisionObjPBMsg)
}

::google::protobuf::uint8* SimpleFilterVisionObjPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.SimpleFilterVisionObjPBMsg)
  // optional string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.SimpleFilterVisionObjPBMsg.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info(), target);
  }

  // optional bytes image_jpeg = 2;
  if (has_image_jpeg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->image_jpeg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.SimpleFilterVisionObjPBMsg)
  return target;
}

int SimpleFilterVisionObjPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.SimpleFilterVisionObjPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

    // optional bytes image_jpeg = 2;
    if (has_image_jpeg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->image_jpeg());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleFilterVisionObjPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.SimpleFilterVisionObjPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SimpleFilterVisionObjPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleFilterVisionObjPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.SimpleFilterVisionObjPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.SimpleFilterVisionObjPBMsg)
    MergeFrom(*source);
  }
}

void SimpleFilterVisionObjPBMsg::MergeFrom(const SimpleFilterVisionObjPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.SimpleFilterVisionObjPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      set_has_info();
      info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
    }
    if (from.has_image_jpeg()) {
      set_has_image_jpeg();
      image_jpeg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_jpeg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SimpleFilterVisionObjPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.SimpleFilterVisionObjPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleFilterVisionObjPBMsg::CopyFrom(const SimpleFilterVisionObjPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.SimpleFilterVisionObjPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleFilterVisionObjPBMsg::IsInitialized() const {

  return true;
}

void SimpleFilterVisionObjPBMsg::Swap(SimpleFilterVisionObjPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleFilterVisionObjPBMsg::InternalSwap(SimpleFilterVisionObjPBMsg* other) {
  info_.Swap(&other->info_);
  image_jpeg_.Swap(&other->image_jpeg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleFilterVisionObjPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleFilterVisionObjPBMsg_descriptor_;
  metadata.reflection = SimpleFilterVisionObjPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleFilterVisionObjPBMsg

// optional string info = 1;
bool SimpleFilterVisionObjPBMsg::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SimpleFilterVisionObjPBMsg::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
void SimpleFilterVisionObjPBMsg::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void SimpleFilterVisionObjPBMsg::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_info();
}
 const ::std::string& SimpleFilterVisionObjPBMsg::info() const {
  // @@protoc_insertion_point(field_get:vision_messages.SimpleFilterVisionObjPBMsg.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimpleFilterVisionObjPBMsg::set_info(const ::std::string& value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vision_messages.SimpleFilterVisionObjPBMsg.info)
}
 void SimpleFilterVisionObjPBMsg::set_info(const char* value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vision_messages.SimpleFilterVisionObjPBMsg.info)
}
 void SimpleFilterVisionObjPBMsg::set_info(const char* value, size_t size) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vision_messages.SimpleFilterVisionObjPBMsg.info)
}
 ::std::string* SimpleFilterVisionObjPBMsg::mutable_info() {
  set_has_info();
  // @@protoc_insertion_point(field_mutable:vision_messages.SimpleFilterVisionObjPBMsg.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SimpleFilterVisionObjPBMsg::release_info() {
  // @@protoc_insertion_point(field_release:vision_messages.SimpleFilterVisionObjPBMsg.info)
  clear_has_info();
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimpleFilterVisionObjPBMsg::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    set_has_info();
  } else {
    clear_has_info();
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:vision_messages.SimpleFilterVisionObjPBMsg.info)
}

// optional bytes image_jpeg = 2;
bool SimpleFilterVisionObjPBMsg::has_image_jpeg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SimpleFilterVisionObjPBMsg::set_has_image_jpeg() {
  _has_bits_[0] |= 0x00000002u;
}
void SimpleFilterVisionObjPBMsg::clear_has_image_jpeg() {
  _has_bits_[0] &= ~0x00000002u;
}
void SimpleFilterVisionObjPBMsg::clear_image_jpeg() {
  image_jpeg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image_jpeg();
}
 const ::std::string& SimpleFilterVisionObjPBMsg::image_jpeg() const {
  // @@protoc_insertion_point(field_get:vision_messages.SimpleFilterVisionObjPBMsg.image_jpeg)
  return image_jpeg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimpleFilterVisionObjPBMsg::set_image_jpeg(const ::std::string& value) {
  set_has_image_jpeg();
  image_jpeg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vision_messages.SimpleFilterVisionObjPBMsg.image_jpeg)
}
 void SimpleFilterVisionObjPBMsg::set_image_jpeg(const char* value) {
  set_has_image_jpeg();
  image_jpeg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vision_messages.SimpleFilterVisionObjPBMsg.image_jpeg)
}
 void SimpleFilterVisionObjPBMsg::set_image_jpeg(const void* value, size_t size) {
  set_has_image_jpeg();
  image_jpeg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vision_messages.SimpleFilterVisionObjPBMsg.image_jpeg)
}
 ::std::string* SimpleFilterVisionObjPBMsg::mutable_image_jpeg() {
  set_has_image_jpeg();
  // @@protoc_insertion_point(field_mutable:vision_messages.SimpleFilterVisionObjPBMsg.image_jpeg)
  return image_jpeg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SimpleFilterVisionObjPBMsg::release_image_jpeg() {
  // @@protoc_insertion_point(field_release:vision_messages.SimpleFilterVisionObjPBMsg.image_jpeg)
  clear_has_image_jpeg();
  return image_jpeg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimpleFilterVisionObjPBMsg::set_allocated_image_jpeg(::std::string* image_jpeg) {
  if (image_jpeg != NULL) {
    set_has_image_jpeg();
  } else {
    clear_has_image_jpeg();
  }
  image_jpeg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_jpeg);
  // @@protoc_insertion_point(field_set_allocated:vision_messages.SimpleFilterVisionObjPBMsg.image_jpeg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManagerStatsPBMsg::kManagerNameFieldNumber;
const int ManagerStatsPBMsg::kRunningStateFieldNumber;
const int ManagerStatsPBMsg::kErrorConditionFieldNumber;
const int ManagerStatsPBMsg::kErrorCodeFieldNumber;
const int ManagerStatsPBMsg::kTotalNumberOfExecuteCyclesFieldNumber;
const int ManagerStatsPBMsg::kNumberOfExecuteCyclesFieldNumber;
const int ManagerStatsPBMsg::kTimeSinceLastStatsResetSecFieldNumber;
const int ManagerStatsPBMsg::kMinExecuteUnitOfWorkTimeSecFieldNumber;
const int ManagerStatsPBMsg::kMaxExecuteUnitOfWorkTimeSecFieldNumber;
const int ManagerStatsPBMsg::kAveExecuteUnitOfWorkTimeSecFieldNumber;
const int ManagerStatsPBMsg::kTotalExecuteUnitOfWorkTimeSecFieldNumber;
const int ManagerStatsPBMsg::kMinSleepTimeSecFieldNumber;
const int ManagerStatsPBMsg::kMaxSleepTimeSecFieldNumber;
const int ManagerStatsPBMsg::kAveSleepTimeSecFieldNumber;
const int ManagerStatsPBMsg::kTotalSleepTimeSecFieldNumber;
const int ManagerStatsPBMsg::kNumberOfWakeUpCallsWhileAsleepFieldNumber;
const int ManagerStatsPBMsg::kNumberOfWakeUpCallsWhileAwakeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManagerStatsPBMsg::ManagerStatsPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.ManagerStatsPBMsg)
}

void ManagerStatsPBMsg::InitAsDefaultInstance() {
}

ManagerStatsPBMsg::ManagerStatsPBMsg(const ManagerStatsPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.ManagerStatsPBMsg)
}

void ManagerStatsPBMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  managername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  runningstate_ = 0;
  errorcondition_ = false;
  errorcode_ = 0;
  totalnumberofexecutecycles_ = 0;
  numberofexecutecycles_ = 0;
  timesincelaststatsreset_sec_ = 0;
  minexecuteunitofworktime_sec_ = 0;
  maxexecuteunitofworktime_sec_ = 0;
  aveexecuteunitofworktime_sec_ = 0;
  totalexecuteunitofworktime_sec_ = 0;
  minsleeptime_sec_ = 0;
  maxsleeptime_sec_ = 0;
  avesleeptime_sec_ = 0;
  totalsleeptime_sec_ = 0;
  numberofwakeupcallswhileasleep_ = 0;
  numberofwakeupcallswhileawake_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManagerStatsPBMsg::~ManagerStatsPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.ManagerStatsPBMsg)
  SharedDtor();
}

void ManagerStatsPBMsg::SharedDtor() {
  managername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ManagerStatsPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManagerStatsPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManagerStatsPBMsg_descriptor_;
}

const ManagerStatsPBMsg& ManagerStatsPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

ManagerStatsPBMsg* ManagerStatsPBMsg::default_instance_ = NULL;

ManagerStatsPBMsg* ManagerStatsPBMsg::New(::google::protobuf::Arena* arena) const {
  ManagerStatsPBMsg* n = new ManagerStatsPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManagerStatsPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.ManagerStatsPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ManagerStatsPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ManagerStatsPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(runningstate_, minexecuteunitofworktime_sec_);
    if (has_managername()) {
      managername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    numberofexecutecycles_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(maxexecuteunitofworktime_sec_, totalexecuteunitofworktime_sec_);
    ZR_(numberofwakeupcallswhileasleep_, totalsleeptime_sec_);
  }
  numberofwakeupcallswhileawake_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ManagerStatsPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.ManagerStatsPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ManagerName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_managername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->managername().data(), this->managername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vision_messages.ManagerStatsPBMsg.ManagerName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RunningState;
        break;
      }

      // optional sint32 RunningState = 2;
      case 2: {
        if (tag == 16) {
         parse_RunningState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &runningstate_)));
          set_has_runningstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ErrorCondition;
        break;
      }

      // optional bool ErrorCondition = 3;
      case 3: {
        if (tag == 24) {
         parse_ErrorCondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &errorcondition_)));
          set_has_errorcondition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ErrorCode;
        break;
      }

      // optional sint32 ErrorCode = 4;
      case 4: {
        if (tag == 32) {
         parse_ErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_TotalNumberOfExecuteCycles;
        break;
      }

      // optional sint32 TotalNumberOfExecuteCycles = 5;
      case 5: {
        if (tag == 40) {
         parse_TotalNumberOfExecuteCycles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &totalnumberofexecutecycles_)));
          set_has_totalnumberofexecutecycles();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_NumberOfExecuteCycles;
        break;
      }

      // optional sint32 NumberOfExecuteCycles = 6;
      case 6: {
        if (tag == 48) {
         parse_NumberOfExecuteCycles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &numberofexecutecycles_)));
          set_has_numberofexecutecycles();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_TimeSinceLastStatsReset_Sec;
        break;
      }

      // optional double TimeSinceLastStatsReset_Sec = 7;
      case 7: {
        if (tag == 57) {
         parse_TimeSinceLastStatsReset_Sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timesincelaststatsreset_sec_)));
          set_has_timesincelaststatsreset_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_MinExecuteUnitOfWorkTime_Sec;
        break;
      }

      // optional double MinExecuteUnitOfWorkTime_Sec = 8;
      case 8: {
        if (tag == 65) {
         parse_MinExecuteUnitOfWorkTime_Sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minexecuteunitofworktime_sec_)));
          set_has_minexecuteunitofworktime_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_MaxExecuteUnitOfWorkTime_Sec;
        break;
      }

      // optional double MaxExecuteUnitOfWorkTime_Sec = 9;
      case 9: {
        if (tag == 73) {
         parse_MaxExecuteUnitOfWorkTime_Sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxexecuteunitofworktime_sec_)));
          set_has_maxexecuteunitofworktime_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_AveExecuteUnitOfWorkTime_Sec;
        break;
      }

      // optional double AveExecuteUnitOfWorkTime_Sec = 10;
      case 10: {
        if (tag == 81) {
         parse_AveExecuteUnitOfWorkTime_Sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &aveexecuteunitofworktime_sec_)));
          set_has_aveexecuteunitofworktime_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_TotalExecuteUnitOfWorkTime_Sec;
        break;
      }

      // optional double TotalExecuteUnitOfWorkTime_Sec = 11;
      case 11: {
        if (tag == 89) {
         parse_TotalExecuteUnitOfWorkTime_Sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totalexecuteunitofworktime_sec_)));
          set_has_totalexecuteunitofworktime_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_MinSleepTime_Sec;
        break;
      }

      // optional double MinSleepTime_Sec = 12;
      case 12: {
        if (tag == 97) {
         parse_MinSleepTime_Sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minsleeptime_sec_)));
          set_has_minsleeptime_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_MaxSleepTime_Sec;
        break;
      }

      // optional double MaxSleepTime_Sec = 13;
      case 13: {
        if (tag == 105) {
         parse_MaxSleepTime_Sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxsleeptime_sec_)));
          set_has_maxsleeptime_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_AveSleepTime_Sec;
        break;
      }

      // optional double AveSleepTime_Sec = 14;
      case 14: {
        if (tag == 113) {
         parse_AveSleepTime_Sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avesleeptime_sec_)));
          set_has_avesleeptime_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_TotalSleepTime_Sec;
        break;
      }

      // optional double TotalSleepTime_Sec = 15;
      case 15: {
        if (tag == 121) {
         parse_TotalSleepTime_Sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totalsleeptime_sec_)));
          set_has_totalsleeptime_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_NumberOfWakeUpCallsWhileAsleep;
        break;
      }

      // optional sint32 NumberOfWakeUpCallsWhileAsleep = 16;
      case 16: {
        if (tag == 128) {
         parse_NumberOfWakeUpCallsWhileAsleep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &numberofwakeupcallswhileasleep_)));
          set_has_numberofwakeupcallswhileasleep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_NumberOfWakeUpCallsWhileAwake;
        break;
      }

      // optional sint32 NumberOfWakeUpCallsWhileAwake = 17;
      case 17: {
        if (tag == 136) {
         parse_NumberOfWakeUpCallsWhileAwake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &numberofwakeupcallswhileawake_)));
          set_has_numberofwakeupcallswhileawake();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.ManagerStatsPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.ManagerStatsPBMsg)
  return false;
#undef DO_
}

void ManagerStatsPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.ManagerStatsPBMsg)
  // optional string ManagerName = 1;
  if (has_managername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->managername().data(), this->managername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.ManagerStatsPBMsg.ManagerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->managername(), output);
  }

  // optional sint32 RunningState = 2;
  if (has_runningstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->runningstate(), output);
  }

  // optional bool ErrorCondition = 3;
  if (has_errorcondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->errorcondition(), output);
  }

  // optional sint32 ErrorCode = 4;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->errorcode(), output);
  }

  // optional sint32 TotalNumberOfExecuteCycles = 5;
  if (has_totalnumberofexecutecycles()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->totalnumberofexecutecycles(), output);
  }

  // optional sint32 NumberOfExecuteCycles = 6;
  if (has_numberofexecutecycles()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->numberofexecutecycles(), output);
  }

  // optional double TimeSinceLastStatsReset_Sec = 7;
  if (has_timesincelaststatsreset_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->timesincelaststatsreset_sec(), output);
  }

  // optional double MinExecuteUnitOfWorkTime_Sec = 8;
  if (has_minexecuteunitofworktime_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->minexecuteunitofworktime_sec(), output);
  }

  // optional double MaxExecuteUnitOfWorkTime_Sec = 9;
  if (has_maxexecuteunitofworktime_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->maxexecuteunitofworktime_sec(), output);
  }

  // optional double AveExecuteUnitOfWorkTime_Sec = 10;
  if (has_aveexecuteunitofworktime_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->aveexecuteunitofworktime_sec(), output);
  }

  // optional double TotalExecuteUnitOfWorkTime_Sec = 11;
  if (has_totalexecuteunitofworktime_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->totalexecuteunitofworktime_sec(), output);
  }

  // optional double MinSleepTime_Sec = 12;
  if (has_minsleeptime_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->minsleeptime_sec(), output);
  }

  // optional double MaxSleepTime_Sec = 13;
  if (has_maxsleeptime_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->maxsleeptime_sec(), output);
  }

  // optional double AveSleepTime_Sec = 14;
  if (has_avesleeptime_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->avesleeptime_sec(), output);
  }

  // optional double TotalSleepTime_Sec = 15;
  if (has_totalsleeptime_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->totalsleeptime_sec(), output);
  }

  // optional sint32 NumberOfWakeUpCallsWhileAsleep = 16;
  if (has_numberofwakeupcallswhileasleep()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(16, this->numberofwakeupcallswhileasleep(), output);
  }

  // optional sint32 NumberOfWakeUpCallsWhileAwake = 17;
  if (has_numberofwakeupcallswhileawake()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(17, this->numberofwakeupcallswhileawake(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.ManagerStatsPBMsg)
}

::google::protobuf::uint8* ManagerStatsPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.ManagerStatsPBMsg)
  // optional string ManagerName = 1;
  if (has_managername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->managername().data(), this->managername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.ManagerStatsPBMsg.ManagerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->managername(), target);
  }

  // optional sint32 RunningState = 2;
  if (has_runningstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->runningstate(), target);
  }

  // optional bool ErrorCondition = 3;
  if (has_errorcondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->errorcondition(), target);
  }

  // optional sint32 ErrorCode = 4;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->errorcode(), target);
  }

  // optional sint32 TotalNumberOfExecuteCycles = 5;
  if (has_totalnumberofexecutecycles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->totalnumberofexecutecycles(), target);
  }

  // optional sint32 NumberOfExecuteCycles = 6;
  if (has_numberofexecutecycles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->numberofexecutecycles(), target);
  }

  // optional double TimeSinceLastStatsReset_Sec = 7;
  if (has_timesincelaststatsreset_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->timesincelaststatsreset_sec(), target);
  }

  // optional double MinExecuteUnitOfWorkTime_Sec = 8;
  if (has_minexecuteunitofworktime_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->minexecuteunitofworktime_sec(), target);
  }

  // optional double MaxExecuteUnitOfWorkTime_Sec = 9;
  if (has_maxexecuteunitofworktime_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->maxexecuteunitofworktime_sec(), target);
  }

  // optional double AveExecuteUnitOfWorkTime_Sec = 10;
  if (has_aveexecuteunitofworktime_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->aveexecuteunitofworktime_sec(), target);
  }

  // optional double TotalExecuteUnitOfWorkTime_Sec = 11;
  if (has_totalexecuteunitofworktime_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->totalexecuteunitofworktime_sec(), target);
  }

  // optional double MinSleepTime_Sec = 12;
  if (has_minsleeptime_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->minsleeptime_sec(), target);
  }

  // optional double MaxSleepTime_Sec = 13;
  if (has_maxsleeptime_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->maxsleeptime_sec(), target);
  }

  // optional double AveSleepTime_Sec = 14;
  if (has_avesleeptime_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->avesleeptime_sec(), target);
  }

  // optional double TotalSleepTime_Sec = 15;
  if (has_totalsleeptime_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->totalsleeptime_sec(), target);
  }

  // optional sint32 NumberOfWakeUpCallsWhileAsleep = 16;
  if (has_numberofwakeupcallswhileasleep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(16, this->numberofwakeupcallswhileasleep(), target);
  }

  // optional sint32 NumberOfWakeUpCallsWhileAwake = 17;
  if (has_numberofwakeupcallswhileawake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(17, this->numberofwakeupcallswhileawake(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.ManagerStatsPBMsg)
  return target;
}

int ManagerStatsPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.ManagerStatsPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string ManagerName = 1;
    if (has_managername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->managername());
    }

    // optional sint32 RunningState = 2;
    if (has_runningstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->runningstate());
    }

    // optional bool ErrorCondition = 3;
    if (has_errorcondition()) {
      total_size += 1 + 1;
    }

    // optional sint32 ErrorCode = 4;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->errorcode());
    }

    // optional sint32 TotalNumberOfExecuteCycles = 5;
    if (has_totalnumberofexecutecycles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->totalnumberofexecutecycles());
    }

    // optional sint32 NumberOfExecuteCycles = 6;
    if (has_numberofexecutecycles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->numberofexecutecycles());
    }

    // optional double TimeSinceLastStatsReset_Sec = 7;
    if (has_timesincelaststatsreset_sec()) {
      total_size += 1 + 8;
    }

    // optional double MinExecuteUnitOfWorkTime_Sec = 8;
    if (has_minexecuteunitofworktime_sec()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double MaxExecuteUnitOfWorkTime_Sec = 9;
    if (has_maxexecuteunitofworktime_sec()) {
      total_size += 1 + 8;
    }

    // optional double AveExecuteUnitOfWorkTime_Sec = 10;
    if (has_aveexecuteunitofworktime_sec()) {
      total_size += 1 + 8;
    }

    // optional double TotalExecuteUnitOfWorkTime_Sec = 11;
    if (has_totalexecuteunitofworktime_sec()) {
      total_size += 1 + 8;
    }

    // optional double MinSleepTime_Sec = 12;
    if (has_minsleeptime_sec()) {
      total_size += 1 + 8;
    }

    // optional double MaxSleepTime_Sec = 13;
    if (has_maxsleeptime_sec()) {
      total_size += 1 + 8;
    }

    // optional double AveSleepTime_Sec = 14;
    if (has_avesleeptime_sec()) {
      total_size += 1 + 8;
    }

    // optional double TotalSleepTime_Sec = 15;
    if (has_totalsleeptime_sec()) {
      total_size += 1 + 8;
    }

    // optional sint32 NumberOfWakeUpCallsWhileAsleep = 16;
    if (has_numberofwakeupcallswhileasleep()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->numberofwakeupcallswhileasleep());
    }

  }
  // optional sint32 NumberOfWakeUpCallsWhileAwake = 17;
  if (has_numberofwakeupcallswhileawake()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->numberofwakeupcallswhileawake());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManagerStatsPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.ManagerStatsPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ManagerStatsPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ManagerStatsPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.ManagerStatsPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.ManagerStatsPBMsg)
    MergeFrom(*source);
  }
}

void ManagerStatsPBMsg::MergeFrom(const ManagerStatsPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.ManagerStatsPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_managername()) {
      set_has_managername();
      managername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.managername_);
    }
    if (from.has_runningstate()) {
      set_runningstate(from.runningstate());
    }
    if (from.has_errorcondition()) {
      set_errorcondition(from.errorcondition());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_totalnumberofexecutecycles()) {
      set_totalnumberofexecutecycles(from.totalnumberofexecutecycles());
    }
    if (from.has_numberofexecutecycles()) {
      set_numberofexecutecycles(from.numberofexecutecycles());
    }
    if (from.has_timesincelaststatsreset_sec()) {
      set_timesincelaststatsreset_sec(from.timesincelaststatsreset_sec());
    }
    if (from.has_minexecuteunitofworktime_sec()) {
      set_minexecuteunitofworktime_sec(from.minexecuteunitofworktime_sec());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxexecuteunitofworktime_sec()) {
      set_maxexecuteunitofworktime_sec(from.maxexecuteunitofworktime_sec());
    }
    if (from.has_aveexecuteunitofworktime_sec()) {
      set_aveexecuteunitofworktime_sec(from.aveexecuteunitofworktime_sec());
    }
    if (from.has_totalexecuteunitofworktime_sec()) {
      set_totalexecuteunitofworktime_sec(from.totalexecuteunitofworktime_sec());
    }
    if (from.has_minsleeptime_sec()) {
      set_minsleeptime_sec(from.minsleeptime_sec());
    }
    if (from.has_maxsleeptime_sec()) {
      set_maxsleeptime_sec(from.maxsleeptime_sec());
    }
    if (from.has_avesleeptime_sec()) {
      set_avesleeptime_sec(from.avesleeptime_sec());
    }
    if (from.has_totalsleeptime_sec()) {
      set_totalsleeptime_sec(from.totalsleeptime_sec());
    }
    if (from.has_numberofwakeupcallswhileasleep()) {
      set_numberofwakeupcallswhileasleep(from.numberofwakeupcallswhileasleep());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_numberofwakeupcallswhileawake()) {
      set_numberofwakeupcallswhileawake(from.numberofwakeupcallswhileawake());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ManagerStatsPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.ManagerStatsPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManagerStatsPBMsg::CopyFrom(const ManagerStatsPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.ManagerStatsPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManagerStatsPBMsg::IsInitialized() const {

  return true;
}

void ManagerStatsPBMsg::Swap(ManagerStatsPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManagerStatsPBMsg::InternalSwap(ManagerStatsPBMsg* other) {
  managername_.Swap(&other->managername_);
  std::swap(runningstate_, other->runningstate_);
  std::swap(errorcondition_, other->errorcondition_);
  std::swap(errorcode_, other->errorcode_);
  std::swap(totalnumberofexecutecycles_, other->totalnumberofexecutecycles_);
  std::swap(numberofexecutecycles_, other->numberofexecutecycles_);
  std::swap(timesincelaststatsreset_sec_, other->timesincelaststatsreset_sec_);
  std::swap(minexecuteunitofworktime_sec_, other->minexecuteunitofworktime_sec_);
  std::swap(maxexecuteunitofworktime_sec_, other->maxexecuteunitofworktime_sec_);
  std::swap(aveexecuteunitofworktime_sec_, other->aveexecuteunitofworktime_sec_);
  std::swap(totalexecuteunitofworktime_sec_, other->totalexecuteunitofworktime_sec_);
  std::swap(minsleeptime_sec_, other->minsleeptime_sec_);
  std::swap(maxsleeptime_sec_, other->maxsleeptime_sec_);
  std::swap(avesleeptime_sec_, other->avesleeptime_sec_);
  std::swap(totalsleeptime_sec_, other->totalsleeptime_sec_);
  std::swap(numberofwakeupcallswhileasleep_, other->numberofwakeupcallswhileasleep_);
  std::swap(numberofwakeupcallswhileawake_, other->numberofwakeupcallswhileawake_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManagerStatsPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManagerStatsPBMsg_descriptor_;
  metadata.reflection = ManagerStatsPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManagerStatsPBMsg

// optional string ManagerName = 1;
bool ManagerStatsPBMsg::has_managername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManagerStatsPBMsg::set_has_managername() {
  _has_bits_[0] |= 0x00000001u;
}
void ManagerStatsPBMsg::clear_has_managername() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManagerStatsPBMsg::clear_managername() {
  managername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_managername();
}
 const ::std::string& ManagerStatsPBMsg::managername() const {
  // @@protoc_insertion_point(field_get:vision_messages.ManagerStatsPBMsg.ManagerName)
  return managername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ManagerStatsPBMsg::set_managername(const ::std::string& value) {
  set_has_managername();
  managername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vision_messages.ManagerStatsPBMsg.ManagerName)
}
 void ManagerStatsPBMsg::set_managername(const char* value) {
  set_has_managername();
  managername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vision_messages.ManagerStatsPBMsg.ManagerName)
}
 void ManagerStatsPBMsg::set_managername(const char* value, size_t size) {
  set_has_managername();
  managername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vision_messages.ManagerStatsPBMsg.ManagerName)
}
 ::std::string* ManagerStatsPBMsg::mutable_managername() {
  set_has_managername();
  // @@protoc_insertion_point(field_mutable:vision_messages.ManagerStatsPBMsg.ManagerName)
  return managername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ManagerStatsPBMsg::release_managername() {
  // @@protoc_insertion_point(field_release:vision_messages.ManagerStatsPBMsg.ManagerName)
  clear_has_managername();
  return managername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ManagerStatsPBMsg::set_allocated_managername(::std::string* managername) {
  if (managername != NULL) {
    set_has_managername();
  } else {
    clear_has_managername();
  }
  managername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), managername);
  // @@protoc_insertion_point(field_set_allocated:vision_messages.ManagerStatsPBMsg.ManagerName)
}

// optional sint32 RunningState = 2;
bool ManagerStatsPBMsg::has_runningstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManagerStatsPBMsg::set_has_runningstate() {
  _has_bits_[0] |= 0x00000002u;
}
void ManagerStatsPBMsg::clear_has_runningstate() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManagerStatsPBMsg::clear_runningstate() {
  runningstate_ = 0;
  clear_has_runningstate();
}
 ::google::protobuf::int32 ManagerStatsPBMsg::runningstate() const {
  // @@protoc_insertion_point(field_get:vision_messages.ManagerStatsPBMsg.RunningState)
  return runningstate_;
}
 void ManagerStatsPBMsg::set_runningstate(::google::protobuf::int32 value) {
  set_has_runningstate();
  runningstate_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ManagerStatsPBMsg.RunningState)
}

// optional bool ErrorCondition = 3;
bool ManagerStatsPBMsg::has_errorcondition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ManagerStatsPBMsg::set_has_errorcondition() {
  _has_bits_[0] |= 0x00000004u;
}
void ManagerStatsPBMsg::clear_has_errorcondition() {
  _has_bits_[0] &= ~0x00000004u;
}
void ManagerStatsPBMsg::clear_errorcondition() {
  errorcondition_ = false;
  clear_has_errorcondition();
}
 bool ManagerStatsPBMsg::errorcondition() const {
  // @@protoc_insertion_point(field_get:vision_messages.ManagerStatsPBMsg.ErrorCondition)
  return errorcondition_;
}
 void ManagerStatsPBMsg::set_errorcondition(bool value) {
  set_has_errorcondition();
  errorcondition_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ManagerStatsPBMsg.ErrorCondition)
}

// optional sint32 ErrorCode = 4;
bool ManagerStatsPBMsg::has_errorcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ManagerStatsPBMsg::set_has_errorcode() {
  _has_bits_[0] |= 0x00000008u;
}
void ManagerStatsPBMsg::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000008u;
}
void ManagerStatsPBMsg::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
 ::google::protobuf::int32 ManagerStatsPBMsg::errorcode() const {
  // @@protoc_insertion_point(field_get:vision_messages.ManagerStatsPBMsg.ErrorCode)
  return errorcode_;
}
 void ManagerStatsPBMsg::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ManagerStatsPBMsg.ErrorCode)
}

// optional sint32 TotalNumberOfExecuteCycles = 5;
bool ManagerStatsPBMsg::has_totalnumberofexecutecycles() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ManagerStatsPBMsg::set_has_totalnumberofexecutecycles() {
  _has_bits_[0] |= 0x00000010u;
}
void ManagerStatsPBMsg::clear_has_totalnumberofexecutecycles() {
  _has_bits_[0] &= ~0x00000010u;
}
void ManagerStatsPBMsg::clear_totalnumberofexecutecycles() {
  totalnumberofexecutecycles_ = 0;
  clear_has_totalnumberofexecutecycles();
}
 ::google::protobuf::int32 ManagerStatsPBMsg::totalnumberofexecutecycles() const {
  // @@protoc_insertion_point(field_get:vision_messages.ManagerStatsPBMsg.TotalNumberOfExecuteCycles)
  return totalnumberofexecutecycles_;
}
 void ManagerStatsPBMsg::set_totalnumberofexecutecycles(::google::protobuf::int32 value) {
  set_has_totalnumberofexecutecycles();
  totalnumberofexecutecycles_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ManagerStatsPBMsg.TotalNumberOfExecuteCycles)
}

// optional sint32 NumberOfExecuteCycles = 6;
bool ManagerStatsPBMsg::has_numberofexecutecycles() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ManagerStatsPBMsg::set_has_numberofexecutecycles() {
  _has_bits_[0] |= 0x00000020u;
}
void ManagerStatsPBMsg::clear_has_numberofexecutecycles() {
  _has_bits_[0] &= ~0x00000020u;
}
void ManagerStatsPBMsg::clear_numberofexecutecycles() {
  numberofexecutecycles_ = 0;
  clear_has_numberofexecutecycles();
}
 ::google::protobuf::int32 ManagerStatsPBMsg::numberofexecutecycles() const {
  // @@protoc_insertion_point(field_get:vision_messages.ManagerStatsPBMsg.NumberOfExecuteCycles)
  return numberofexecutecycles_;
}
 void ManagerStatsPBMsg::set_numberofexecutecycles(::google::protobuf::int32 value) {
  set_has_numberofexecutecycles();
  numberofexecutecycles_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ManagerStatsPBMsg.NumberOfExecuteCycles)
}

// optional double TimeSinceLastStatsReset_Sec = 7;
bool ManagerStatsPBMsg::has_timesincelaststatsreset_sec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ManagerStatsPBMsg::set_has_timesincelaststatsreset_sec() {
  _has_bits_[0] |= 0x00000040u;
}
void ManagerStatsPBMsg::clear_has_timesincelaststatsreset_sec() {
  _has_bits_[0] &= ~0x00000040u;
}
void ManagerStatsPBMsg::clear_timesincelaststatsreset_sec() {
  timesincelaststatsreset_sec_ = 0;
  clear_has_timesincelaststatsreset_sec();
}
 double ManagerStatsPBMsg::timesincelaststatsreset_sec() const {
  // @@protoc_insertion_point(field_get:vision_messages.ManagerStatsPBMsg.TimeSinceLastStatsReset_Sec)
  return timesincelaststatsreset_sec_;
}
 void ManagerStatsPBMsg::set_timesincelaststatsreset_sec(double value) {
  set_has_timesincelaststatsreset_sec();
  timesincelaststatsreset_sec_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ManagerStatsPBMsg.TimeSinceLastStatsReset_Sec)
}

// optional double MinExecuteUnitOfWorkTime_Sec = 8;
bool ManagerStatsPBMsg::has_minexecuteunitofworktime_sec() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ManagerStatsPBMsg::set_has_minexecuteunitofworktime_sec() {
  _has_bits_[0] |= 0x00000080u;
}
void ManagerStatsPBMsg::clear_has_minexecuteunitofworktime_sec() {
  _has_bits_[0] &= ~0x00000080u;
}
void ManagerStatsPBMsg::clear_minexecuteunitofworktime_sec() {
  minexecuteunitofworktime_sec_ = 0;
  clear_has_minexecuteunitofworktime_sec();
}
 double ManagerStatsPBMsg::minexecuteunitofworktime_sec() const {
  // @@protoc_insertion_point(field_get:vision_messages.ManagerStatsPBMsg.MinExecuteUnitOfWorkTime_Sec)
  return minexecuteunitofworktime_sec_;
}
 void ManagerStatsPBMsg::set_minexecuteunitofworktime_sec(double value) {
  set_has_minexecuteunitofworktime_sec();
  minexecuteunitofworktime_sec_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ManagerStatsPBMsg.MinExecuteUnitOfWorkTime_Sec)
}

// optional double MaxExecuteUnitOfWorkTime_Sec = 9;
bool ManagerStatsPBMsg::has_maxexecuteunitofworktime_sec() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ManagerStatsPBMsg::set_has_maxexecuteunitofworktime_sec() {
  _has_bits_[0] |= 0x00000100u;
}
void ManagerStatsPBMsg::clear_has_maxexecuteunitofworktime_sec() {
  _has_bits_[0] &= ~0x00000100u;
}
void ManagerStatsPBMsg::clear_maxexecuteunitofworktime_sec() {
  maxexecuteunitofworktime_sec_ = 0;
  clear_has_maxexecuteunitofworktime_sec();
}
 double ManagerStatsPBMsg::maxexecuteunitofworktime_sec() const {
  // @@protoc_insertion_point(field_get:vision_messages.ManagerStatsPBMsg.MaxExecuteUnitOfWorkTime_Sec)
  return maxexecuteunitofworktime_sec_;
}
 void ManagerStatsPBMsg::set_maxexecuteunitofworktime_sec(double value) {
  set_has_maxexecuteunitofworktime_sec();
  maxexecuteunitofworktime_sec_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ManagerStatsPBMsg.MaxExecuteUnitOfWorkTime_Sec)
}

// optional double AveExecuteUnitOfWorkTime_Sec = 10;
bool ManagerStatsPBMsg::has_aveexecuteunitofworktime_sec() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ManagerStatsPBMsg::set_has_aveexecuteunitofworktime_sec() {
  _has_bits_[0] |= 0x00000200u;
}
void ManagerStatsPBMsg::clear_has_aveexecuteunitofworktime_sec() {
  _has_bits_[0] &= ~0x00000200u;
}
void ManagerStatsPBMsg::clear_aveexecuteunitofworktime_sec() {
  aveexecuteunitofworktime_sec_ = 0;
  clear_has_aveexecuteunitofworktime_sec();
}
 double ManagerStatsPBMsg::aveexecuteunitofworktime_sec() const {
  // @@protoc_insertion_point(field_get:vision_messages.ManagerStatsPBMsg.AveExecuteUnitOfWorkTime_Sec)
  return aveexecuteunitofworktime_sec_;
}
 void ManagerStatsPBMsg::set_aveexecuteunitofworktime_sec(double value) {
  set_has_aveexecuteunitofworktime_sec();
  aveexecuteunitofworktime_sec_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ManagerStatsPBMsg.AveExecuteUnitOfWorkTime_Sec)
}

// optional double TotalExecuteUnitOfWorkTime_Sec = 11;
bool ManagerStatsPBMsg::has_totalexecuteunitofworktime_sec() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ManagerStatsPBMsg::set_has_totalexecuteunitofworktime_sec() {
  _has_bits_[0] |= 0x00000400u;
}
void ManagerStatsPBMsg::clear_has_totalexecuteunitofworktime_sec() {
  _has_bits_[0] &= ~0x00000400u;
}
void ManagerStatsPBMsg::clear_totalexecuteunitofworktime_sec() {
  totalexecuteunitofworktime_sec_ = 0;
  clear_has_totalexecuteunitofworktime_sec();
}
 double ManagerStatsPBMsg::totalexecuteunitofworktime_sec() const {
  // @@protoc_insertion_point(field_get:vision_messages.ManagerStatsPBMsg.TotalExecuteUnitOfWorkTime_Sec)
  return totalexecuteunitofworktime_sec_;
}
 void ManagerStatsPBMsg::set_totalexecuteunitofworktime_sec(double value) {
  set_has_totalexecuteunitofworktime_sec();
  totalexecuteunitofworktime_sec_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ManagerStatsPBMsg.TotalExecuteUnitOfWorkTime_Sec)
}

// optional double MinSleepTime_Sec = 12;
bool ManagerStatsPBMsg::has_minsleeptime_sec() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ManagerStatsPBMsg::set_has_minsleeptime_sec() {
  _has_bits_[0] |= 0x00000800u;
}
void ManagerStatsPBMsg::clear_has_minsleeptime_sec() {
  _has_bits_[0] &= ~0x00000800u;
}
void ManagerStatsPBMsg::clear_minsleeptime_sec() {
  minsleeptime_sec_ = 0;
  clear_has_minsleeptime_sec();
}
 double ManagerStatsPBMsg::minsleeptime_sec() const {
  // @@protoc_insertion_point(field_get:vision_messages.ManagerStatsPBMsg.MinSleepTime_Sec)
  return minsleeptime_sec_;
}
 void ManagerStatsPBMsg::set_minsleeptime_sec(double value) {
  set_has_minsleeptime_sec();
  minsleeptime_sec_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ManagerStatsPBMsg.MinSleepTime_Sec)
}

// optional double MaxSleepTime_Sec = 13;
bool ManagerStatsPBMsg::has_maxsleeptime_sec() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ManagerStatsPBMsg::set_has_maxsleeptime_sec() {
  _has_bits_[0] |= 0x00001000u;
}
void ManagerStatsPBMsg::clear_has_maxsleeptime_sec() {
  _has_bits_[0] &= ~0x00001000u;
}
void ManagerStatsPBMsg::clear_maxsleeptime_sec() {
  maxsleeptime_sec_ = 0;
  clear_has_maxsleeptime_sec();
}
 double ManagerStatsPBMsg::maxsleeptime_sec() const {
  // @@protoc_insertion_point(field_get:vision_messages.ManagerStatsPBMsg.MaxSleepTime_Sec)
  return maxsleeptime_sec_;
}
 void ManagerStatsPBMsg::set_maxsleeptime_sec(double value) {
  set_has_maxsleeptime_sec();
  maxsleeptime_sec_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ManagerStatsPBMsg.MaxSleepTime_Sec)
}

// optional double AveSleepTime_Sec = 14;
bool ManagerStatsPBMsg::has_avesleeptime_sec() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ManagerStatsPBMsg::set_has_avesleeptime_sec() {
  _has_bits_[0] |= 0x00002000u;
}
void ManagerStatsPBMsg::clear_has_avesleeptime_sec() {
  _has_bits_[0] &= ~0x00002000u;
}
void ManagerStatsPBMsg::clear_avesleeptime_sec() {
  avesleeptime_sec_ = 0;
  clear_has_avesleeptime_sec();
}
 double ManagerStatsPBMsg::avesleeptime_sec() const {
  // @@protoc_insertion_point(field_get:vision_messages.ManagerStatsPBMsg.AveSleepTime_Sec)
  return avesleeptime_sec_;
}
 void ManagerStatsPBMsg::set_avesleeptime_sec(double value) {
  set_has_avesleeptime_sec();
  avesleeptime_sec_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ManagerStatsPBMsg.AveSleepTime_Sec)
}

// optional double TotalSleepTime_Sec = 15;
bool ManagerStatsPBMsg::has_totalsleeptime_sec() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ManagerStatsPBMsg::set_has_totalsleeptime_sec() {
  _has_bits_[0] |= 0x00004000u;
}
void ManagerStatsPBMsg::clear_has_totalsleeptime_sec() {
  _has_bits_[0] &= ~0x00004000u;
}
void ManagerStatsPBMsg::clear_totalsleeptime_sec() {
  totalsleeptime_sec_ = 0;
  clear_has_totalsleeptime_sec();
}
 double ManagerStatsPBMsg::totalsleeptime_sec() const {
  // @@protoc_insertion_point(field_get:vision_messages.ManagerStatsPBMsg.TotalSleepTime_Sec)
  return totalsleeptime_sec_;
}
 void ManagerStatsPBMsg::set_totalsleeptime_sec(double value) {
  set_has_totalsleeptime_sec();
  totalsleeptime_sec_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ManagerStatsPBMsg.TotalSleepTime_Sec)
}

// optional sint32 NumberOfWakeUpCallsWhileAsleep = 16;
bool ManagerStatsPBMsg::has_numberofwakeupcallswhileasleep() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ManagerStatsPBMsg::set_has_numberofwakeupcallswhileasleep() {
  _has_bits_[0] |= 0x00008000u;
}
void ManagerStatsPBMsg::clear_has_numberofwakeupcallswhileasleep() {
  _has_bits_[0] &= ~0x00008000u;
}
void ManagerStatsPBMsg::clear_numberofwakeupcallswhileasleep() {
  numberofwakeupcallswhileasleep_ = 0;
  clear_has_numberofwakeupcallswhileasleep();
}
 ::google::protobuf::int32 ManagerStatsPBMsg::numberofwakeupcallswhileasleep() const {
  // @@protoc_insertion_point(field_get:vision_messages.ManagerStatsPBMsg.NumberOfWakeUpCallsWhileAsleep)
  return numberofwakeupcallswhileasleep_;
}
 void ManagerStatsPBMsg::set_numberofwakeupcallswhileasleep(::google::protobuf::int32 value) {
  set_has_numberofwakeupcallswhileasleep();
  numberofwakeupcallswhileasleep_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ManagerStatsPBMsg.NumberOfWakeUpCallsWhileAsleep)
}

// optional sint32 NumberOfWakeUpCallsWhileAwake = 17;
bool ManagerStatsPBMsg::has_numberofwakeupcallswhileawake() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ManagerStatsPBMsg::set_has_numberofwakeupcallswhileawake() {
  _has_bits_[0] |= 0x00010000u;
}
void ManagerStatsPBMsg::clear_has_numberofwakeupcallswhileawake() {
  _has_bits_[0] &= ~0x00010000u;
}
void ManagerStatsPBMsg::clear_numberofwakeupcallswhileawake() {
  numberofwakeupcallswhileawake_ = 0;
  clear_has_numberofwakeupcallswhileawake();
}
 ::google::protobuf::int32 ManagerStatsPBMsg::numberofwakeupcallswhileawake() const {
  // @@protoc_insertion_point(field_get:vision_messages.ManagerStatsPBMsg.NumberOfWakeUpCallsWhileAwake)
  return numberofwakeupcallswhileawake_;
}
 void ManagerStatsPBMsg::set_numberofwakeupcallswhileawake(::google::protobuf::int32 value) {
  set_has_numberofwakeupcallswhileawake();
  numberofwakeupcallswhileawake_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ManagerStatsPBMsg.NumberOfWakeUpCallsWhileAwake)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManagerControlPBMsg::kManagerNameFieldNumber;
const int ManagerControlPBMsg::kShutdownManagerFieldNumber;
const int ManagerControlPBMsg::kResetMgrStatsToggleFieldNumber;
const int ManagerControlPBMsg::kPublishMgrStatsTimeSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManagerControlPBMsg::ManagerControlPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.ManagerControlPBMsg)
}

void ManagerControlPBMsg::InitAsDefaultInstance() {
}

ManagerControlPBMsg::ManagerControlPBMsg(const ManagerControlPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.ManagerControlPBMsg)
}

void ManagerControlPBMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  managername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shutdownmanager_ = false;
  resetmgrstatstoggle_ = false;
  publishmgrstatstime_sec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManagerControlPBMsg::~ManagerControlPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.ManagerControlPBMsg)
  SharedDtor();
}

void ManagerControlPBMsg::SharedDtor() {
  managername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ManagerControlPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManagerControlPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManagerControlPBMsg_descriptor_;
}

const ManagerControlPBMsg& ManagerControlPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

ManagerControlPBMsg* ManagerControlPBMsg::default_instance_ = NULL;

ManagerControlPBMsg* ManagerControlPBMsg::New(::google::protobuf::Arena* arena) const {
  ManagerControlPBMsg* n = new ManagerControlPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManagerControlPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.ManagerControlPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ManagerControlPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ManagerControlPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(publishmgrstatstime_sec_, resetmgrstatstoggle_);
    if (has_managername()) {
      managername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ManagerControlPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.ManagerControlPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ManagerName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_managername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->managername().data(), this->managername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vision_messages.ManagerControlPBMsg.ManagerName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ShutdownManager;
        break;
      }

      // optional bool ShutdownManager = 2;
      case 2: {
        if (tag == 16) {
         parse_ShutdownManager:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shutdownmanager_)));
          set_has_shutdownmanager();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ResetMgrStatsToggle;
        break;
      }

      // optional bool ResetMgrStatsToggle = 3;
      case 3: {
        if (tag == 24) {
         parse_ResetMgrStatsToggle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resetmgrstatstoggle_)));
          set_has_resetmgrstatstoggle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_PublishMgrStatsTime_Sec;
        break;
      }

      // optional double PublishMgrStatsTime_Sec = 4;
      case 4: {
        if (tag == 33) {
         parse_PublishMgrStatsTime_Sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &publishmgrstatstime_sec_)));
          set_has_publishmgrstatstime_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.ManagerControlPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.ManagerControlPBMsg)
  return false;
#undef DO_
}

void ManagerControlPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.ManagerControlPBMsg)
  // optional string ManagerName = 1;
  if (has_managername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->managername().data(), this->managername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.ManagerControlPBMsg.ManagerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->managername(), output);
  }

  // optional bool ShutdownManager = 2;
  if (has_shutdownmanager()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->shutdownmanager(), output);
  }

  // optional bool ResetMgrStatsToggle = 3;
  if (has_resetmgrstatstoggle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->resetmgrstatstoggle(), output);
  }

  // optional double PublishMgrStatsTime_Sec = 4;
  if (has_publishmgrstatstime_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->publishmgrstatstime_sec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.ManagerControlPBMsg)
}

::google::protobuf::uint8* ManagerControlPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.ManagerControlPBMsg)
  // optional string ManagerName = 1;
  if (has_managername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->managername().data(), this->managername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.ManagerControlPBMsg.ManagerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->managername(), target);
  }

  // optional bool ShutdownManager = 2;
  if (has_shutdownmanager()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->shutdownmanager(), target);
  }

  // optional bool ResetMgrStatsToggle = 3;
  if (has_resetmgrstatstoggle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->resetmgrstatstoggle(), target);
  }

  // optional double PublishMgrStatsTime_Sec = 4;
  if (has_publishmgrstatstime_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->publishmgrstatstime_sec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.ManagerControlPBMsg)
  return target;
}

int ManagerControlPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.ManagerControlPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string ManagerName = 1;
    if (has_managername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->managername());
    }

    // optional bool ShutdownManager = 2;
    if (has_shutdownmanager()) {
      total_size += 1 + 1;
    }

    // optional bool ResetMgrStatsToggle = 3;
    if (has_resetmgrstatstoggle()) {
      total_size += 1 + 1;
    }

    // optional double PublishMgrStatsTime_Sec = 4;
    if (has_publishmgrstatstime_sec()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManagerControlPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.ManagerControlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ManagerControlPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ManagerControlPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.ManagerControlPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.ManagerControlPBMsg)
    MergeFrom(*source);
  }
}

void ManagerControlPBMsg::MergeFrom(const ManagerControlPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.ManagerControlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_managername()) {
      set_has_managername();
      managername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.managername_);
    }
    if (from.has_shutdownmanager()) {
      set_shutdownmanager(from.shutdownmanager());
    }
    if (from.has_resetmgrstatstoggle()) {
      set_resetmgrstatstoggle(from.resetmgrstatstoggle());
    }
    if (from.has_publishmgrstatstime_sec()) {
      set_publishmgrstatstime_sec(from.publishmgrstatstime_sec());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ManagerControlPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.ManagerControlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManagerControlPBMsg::CopyFrom(const ManagerControlPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.ManagerControlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManagerControlPBMsg::IsInitialized() const {

  return true;
}

void ManagerControlPBMsg::Swap(ManagerControlPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManagerControlPBMsg::InternalSwap(ManagerControlPBMsg* other) {
  managername_.Swap(&other->managername_);
  std::swap(shutdownmanager_, other->shutdownmanager_);
  std::swap(resetmgrstatstoggle_, other->resetmgrstatstoggle_);
  std::swap(publishmgrstatstime_sec_, other->publishmgrstatstime_sec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManagerControlPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManagerControlPBMsg_descriptor_;
  metadata.reflection = ManagerControlPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManagerControlPBMsg

// optional string ManagerName = 1;
bool ManagerControlPBMsg::has_managername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManagerControlPBMsg::set_has_managername() {
  _has_bits_[0] |= 0x00000001u;
}
void ManagerControlPBMsg::clear_has_managername() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManagerControlPBMsg::clear_managername() {
  managername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_managername();
}
 const ::std::string& ManagerControlPBMsg::managername() const {
  // @@protoc_insertion_point(field_get:vision_messages.ManagerControlPBMsg.ManagerName)
  return managername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ManagerControlPBMsg::set_managername(const ::std::string& value) {
  set_has_managername();
  managername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vision_messages.ManagerControlPBMsg.ManagerName)
}
 void ManagerControlPBMsg::set_managername(const char* value) {
  set_has_managername();
  managername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vision_messages.ManagerControlPBMsg.ManagerName)
}
 void ManagerControlPBMsg::set_managername(const char* value, size_t size) {
  set_has_managername();
  managername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vision_messages.ManagerControlPBMsg.ManagerName)
}
 ::std::string* ManagerControlPBMsg::mutable_managername() {
  set_has_managername();
  // @@protoc_insertion_point(field_mutable:vision_messages.ManagerControlPBMsg.ManagerName)
  return managername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ManagerControlPBMsg::release_managername() {
  // @@protoc_insertion_point(field_release:vision_messages.ManagerControlPBMsg.ManagerName)
  clear_has_managername();
  return managername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ManagerControlPBMsg::set_allocated_managername(::std::string* managername) {
  if (managername != NULL) {
    set_has_managername();
  } else {
    clear_has_managername();
  }
  managername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), managername);
  // @@protoc_insertion_point(field_set_allocated:vision_messages.ManagerControlPBMsg.ManagerName)
}

// optional bool ShutdownManager = 2;
bool ManagerControlPBMsg::has_shutdownmanager() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManagerControlPBMsg::set_has_shutdownmanager() {
  _has_bits_[0] |= 0x00000002u;
}
void ManagerControlPBMsg::clear_has_shutdownmanager() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManagerControlPBMsg::clear_shutdownmanager() {
  shutdownmanager_ = false;
  clear_has_shutdownmanager();
}
 bool ManagerControlPBMsg::shutdownmanager() const {
  // @@protoc_insertion_point(field_get:vision_messages.ManagerControlPBMsg.ShutdownManager)
  return shutdownmanager_;
}
 void ManagerControlPBMsg::set_shutdownmanager(bool value) {
  set_has_shutdownmanager();
  shutdownmanager_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ManagerControlPBMsg.ShutdownManager)
}

// optional bool ResetMgrStatsToggle = 3;
bool ManagerControlPBMsg::has_resetmgrstatstoggle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ManagerControlPBMsg::set_has_resetmgrstatstoggle() {
  _has_bits_[0] |= 0x00000004u;
}
void ManagerControlPBMsg::clear_has_resetmgrstatstoggle() {
  _has_bits_[0] &= ~0x00000004u;
}
void ManagerControlPBMsg::clear_resetmgrstatstoggle() {
  resetmgrstatstoggle_ = false;
  clear_has_resetmgrstatstoggle();
}
 bool ManagerControlPBMsg::resetmgrstatstoggle() const {
  // @@protoc_insertion_point(field_get:vision_messages.ManagerControlPBMsg.ResetMgrStatsToggle)
  return resetmgrstatstoggle_;
}
 void ManagerControlPBMsg::set_resetmgrstatstoggle(bool value) {
  set_has_resetmgrstatstoggle();
  resetmgrstatstoggle_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ManagerControlPBMsg.ResetMgrStatsToggle)
}

// optional double PublishMgrStatsTime_Sec = 4;
bool ManagerControlPBMsg::has_publishmgrstatstime_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ManagerControlPBMsg::set_has_publishmgrstatstime_sec() {
  _has_bits_[0] |= 0x00000008u;
}
void ManagerControlPBMsg::clear_has_publishmgrstatstime_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
void ManagerControlPBMsg::clear_publishmgrstatstime_sec() {
  publishmgrstatstime_sec_ = 0;
  clear_has_publishmgrstatstime_sec();
}
 double ManagerControlPBMsg::publishmgrstatstime_sec() const {
  // @@protoc_insertion_point(field_get:vision_messages.ManagerControlPBMsg.PublishMgrStatsTime_Sec)
  return publishmgrstatstime_sec_;
}
 void ManagerControlPBMsg::set_publishmgrstatstime_sec(double value) {
  set_has_publishmgrstatstime_sec();
  publishmgrstatstime_sec_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ManagerControlPBMsg.PublishMgrStatsTime_Sec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraSteeringPBMsg::kCameraSteeringModeSPOIFieldNumber;
const int CameraSteeringPBMsg::kCoordinatesLatLonOrXYFieldNumber;
const int CameraSteeringPBMsg::kSpoiLatitudeRadOrYFieldNumber;
const int CameraSteeringPBMsg::kSpoiLongitudeRadOrXFieldNumber;
const int CameraSteeringPBMsg::kCameraAzimuthAngleRadFieldNumber;
const int CameraSteeringPBMsg::kCameraElevationAngleRadFieldNumber;
const int CameraSteeringPBMsg::kCameraZoomPercentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraSteeringPBMsg::CameraSteeringPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.CameraSteeringPBMsg)
}

void CameraSteeringPBMsg::InitAsDefaultInstance() {
}

CameraSteeringPBMsg::CameraSteeringPBMsg(const CameraSteeringPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.CameraSteeringPBMsg)
}

void CameraSteeringPBMsg::SharedCtor() {
  _cached_size_ = 0;
  camerasteeringmodespoi_ = false;
  coordinateslatlonorxy_ = false;
  spoilatituderadory_ = 0;
  spoilongituderadorx_ = 0;
  cameraazimuthanglerad_ = 0;
  cameraelevationanglerad_ = 0;
  camerazoompercent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraSteeringPBMsg::~CameraSteeringPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.CameraSteeringPBMsg)
  SharedDtor();
}

void CameraSteeringPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraSteeringPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraSteeringPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraSteeringPBMsg_descriptor_;
}

const CameraSteeringPBMsg& CameraSteeringPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

CameraSteeringPBMsg* CameraSteeringPBMsg::default_instance_ = NULL;

CameraSteeringPBMsg* CameraSteeringPBMsg::New(::google::protobuf::Arena* arena) const {
  CameraSteeringPBMsg* n = new CameraSteeringPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraSteeringPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.CameraSteeringPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CameraSteeringPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CameraSteeringPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(spoilatituderadory_, coordinateslatlonorxy_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CameraSteeringPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.CameraSteeringPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool CameraSteeringModeSPOI = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &camerasteeringmodespoi_)));
          set_has_camerasteeringmodespoi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_SpoiLatitudeRadOrY;
        break;
      }

      // optional double SpoiLatitudeRadOrY = 3;
      case 3: {
        if (tag == 25) {
         parse_SpoiLatitudeRadOrY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spoilatituderadory_)));
          set_has_spoilatituderadory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_SpoiLongitudeRadOrX;
        break;
      }

      // optional double SpoiLongitudeRadOrX = 4;
      case 4: {
        if (tag == 33) {
         parse_SpoiLongitudeRadOrX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spoilongituderadorx_)));
          set_has_spoilongituderadorx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_CameraAzimuthAngleRad;
        break;
      }

      // optional double CameraAzimuthAngleRad = 5;
      case 5: {
        if (tag == 41) {
         parse_CameraAzimuthAngleRad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cameraazimuthanglerad_)));
          set_has_cameraazimuthanglerad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_CameraElevationAngleRad;
        break;
      }

      // optional double CameraElevationAngleRad = 6;
      case 6: {
        if (tag == 49) {
         parse_CameraElevationAngleRad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cameraelevationanglerad_)));
          set_has_cameraelevationanglerad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_CameraZoomPercent;
        break;
      }

      // optional double CameraZoomPercent = 7;
      case 7: {
        if (tag == 57) {
         parse_CameraZoomPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &camerazoompercent_)));
          set_has_camerazoompercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_CoordinatesLatLonOrXY;
        break;
      }

      // optional bool CoordinatesLatLonOrXY = 12;
      case 12: {
        if (tag == 96) {
         parse_CoordinatesLatLonOrXY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &coordinateslatlonorxy_)));
          set_has_coordinateslatlonorxy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.CameraSteeringPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.CameraSteeringPBMsg)
  return false;
#undef DO_
}

void CameraSteeringPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.CameraSteeringPBMsg)
  // optional bool CameraSteeringModeSPOI = 1;
  if (has_camerasteeringmodespoi()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->camerasteeringmodespoi(), output);
  }

  // optional double SpoiLatitudeRadOrY = 3;
  if (has_spoilatituderadory()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->spoilatituderadory(), output);
  }

  // optional double SpoiLongitudeRadOrX = 4;
  if (has_spoilongituderadorx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->spoilongituderadorx(), output);
  }

  // optional double CameraAzimuthAngleRad = 5;
  if (has_cameraazimuthanglerad()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->cameraazimuthanglerad(), output);
  }

  // optional double CameraElevationAngleRad = 6;
  if (has_cameraelevationanglerad()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->cameraelevationanglerad(), output);
  }

  // optional double CameraZoomPercent = 7;
  if (has_camerazoompercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->camerazoompercent(), output);
  }

  // optional bool CoordinatesLatLonOrXY = 12;
  if (has_coordinateslatlonorxy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->coordinateslatlonorxy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.CameraSteeringPBMsg)
}

::google::protobuf::uint8* CameraSteeringPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.CameraSteeringPBMsg)
  // optional bool CameraSteeringModeSPOI = 1;
  if (has_camerasteeringmodespoi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->camerasteeringmodespoi(), target);
  }

  // optional double SpoiLatitudeRadOrY = 3;
  if (has_spoilatituderadory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->spoilatituderadory(), target);
  }

  // optional double SpoiLongitudeRadOrX = 4;
  if (has_spoilongituderadorx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->spoilongituderadorx(), target);
  }

  // optional double CameraAzimuthAngleRad = 5;
  if (has_cameraazimuthanglerad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->cameraazimuthanglerad(), target);
  }

  // optional double CameraElevationAngleRad = 6;
  if (has_cameraelevationanglerad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->cameraelevationanglerad(), target);
  }

  // optional double CameraZoomPercent = 7;
  if (has_camerazoompercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->camerazoompercent(), target);
  }

  // optional bool CoordinatesLatLonOrXY = 12;
  if (has_coordinateslatlonorxy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->coordinateslatlonorxy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.CameraSteeringPBMsg)
  return target;
}

int CameraSteeringPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.CameraSteeringPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional bool CameraSteeringModeSPOI = 1;
    if (has_camerasteeringmodespoi()) {
      total_size += 1 + 1;
    }

    // optional bool CoordinatesLatLonOrXY = 12;
    if (has_coordinateslatlonorxy()) {
      total_size += 1 + 1;
    }

    // optional double SpoiLatitudeRadOrY = 3;
    if (has_spoilatituderadory()) {
      total_size += 1 + 8;
    }

    // optional double SpoiLongitudeRadOrX = 4;
    if (has_spoilongituderadorx()) {
      total_size += 1 + 8;
    }

    // optional double CameraAzimuthAngleRad = 5;
    if (has_cameraazimuthanglerad()) {
      total_size += 1 + 8;
    }

    // optional double CameraElevationAngleRad = 6;
    if (has_cameraelevationanglerad()) {
      total_size += 1 + 8;
    }

    // optional double CameraZoomPercent = 7;
    if (has_camerazoompercent()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraSteeringPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.CameraSteeringPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CameraSteeringPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraSteeringPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.CameraSteeringPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.CameraSteeringPBMsg)
    MergeFrom(*source);
  }
}

void CameraSteeringPBMsg::MergeFrom(const CameraSteeringPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.CameraSteeringPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camerasteeringmodespoi()) {
      set_camerasteeringmodespoi(from.camerasteeringmodespoi());
    }
    if (from.has_coordinateslatlonorxy()) {
      set_coordinateslatlonorxy(from.coordinateslatlonorxy());
    }
    if (from.has_spoilatituderadory()) {
      set_spoilatituderadory(from.spoilatituderadory());
    }
    if (from.has_spoilongituderadorx()) {
      set_spoilongituderadorx(from.spoilongituderadorx());
    }
    if (from.has_cameraazimuthanglerad()) {
      set_cameraazimuthanglerad(from.cameraazimuthanglerad());
    }
    if (from.has_cameraelevationanglerad()) {
      set_cameraelevationanglerad(from.cameraelevationanglerad());
    }
    if (from.has_camerazoompercent()) {
      set_camerazoompercent(from.camerazoompercent());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CameraSteeringPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.CameraSteeringPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraSteeringPBMsg::CopyFrom(const CameraSteeringPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.CameraSteeringPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraSteeringPBMsg::IsInitialized() const {

  return true;
}

void CameraSteeringPBMsg::Swap(CameraSteeringPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraSteeringPBMsg::InternalSwap(CameraSteeringPBMsg* other) {
  std::swap(camerasteeringmodespoi_, other->camerasteeringmodespoi_);
  std::swap(coordinateslatlonorxy_, other->coordinateslatlonorxy_);
  std::swap(spoilatituderadory_, other->spoilatituderadory_);
  std::swap(spoilongituderadorx_, other->spoilongituderadorx_);
  std::swap(cameraazimuthanglerad_, other->cameraazimuthanglerad_);
  std::swap(cameraelevationanglerad_, other->cameraelevationanglerad_);
  std::swap(camerazoompercent_, other->camerazoompercent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraSteeringPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraSteeringPBMsg_descriptor_;
  metadata.reflection = CameraSteeringPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraSteeringPBMsg

// optional bool CameraSteeringModeSPOI = 1;
bool CameraSteeringPBMsg::has_camerasteeringmodespoi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CameraSteeringPBMsg::set_has_camerasteeringmodespoi() {
  _has_bits_[0] |= 0x00000001u;
}
void CameraSteeringPBMsg::clear_has_camerasteeringmodespoi() {
  _has_bits_[0] &= ~0x00000001u;
}
void CameraSteeringPBMsg::clear_camerasteeringmodespoi() {
  camerasteeringmodespoi_ = false;
  clear_has_camerasteeringmodespoi();
}
 bool CameraSteeringPBMsg::camerasteeringmodespoi() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraSteeringPBMsg.CameraSteeringModeSPOI)
  return camerasteeringmodespoi_;
}
 void CameraSteeringPBMsg::set_camerasteeringmodespoi(bool value) {
  set_has_camerasteeringmodespoi();
  camerasteeringmodespoi_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraSteeringPBMsg.CameraSteeringModeSPOI)
}

// optional bool CoordinatesLatLonOrXY = 12;
bool CameraSteeringPBMsg::has_coordinateslatlonorxy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CameraSteeringPBMsg::set_has_coordinateslatlonorxy() {
  _has_bits_[0] |= 0x00000002u;
}
void CameraSteeringPBMsg::clear_has_coordinateslatlonorxy() {
  _has_bits_[0] &= ~0x00000002u;
}
void CameraSteeringPBMsg::clear_coordinateslatlonorxy() {
  coordinateslatlonorxy_ = false;
  clear_has_coordinateslatlonorxy();
}
 bool CameraSteeringPBMsg::coordinateslatlonorxy() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraSteeringPBMsg.CoordinatesLatLonOrXY)
  return coordinateslatlonorxy_;
}
 void CameraSteeringPBMsg::set_coordinateslatlonorxy(bool value) {
  set_has_coordinateslatlonorxy();
  coordinateslatlonorxy_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraSteeringPBMsg.CoordinatesLatLonOrXY)
}

// optional double SpoiLatitudeRadOrY = 3;
bool CameraSteeringPBMsg::has_spoilatituderadory() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CameraSteeringPBMsg::set_has_spoilatituderadory() {
  _has_bits_[0] |= 0x00000004u;
}
void CameraSteeringPBMsg::clear_has_spoilatituderadory() {
  _has_bits_[0] &= ~0x00000004u;
}
void CameraSteeringPBMsg::clear_spoilatituderadory() {
  spoilatituderadory_ = 0;
  clear_has_spoilatituderadory();
}
 double CameraSteeringPBMsg::spoilatituderadory() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraSteeringPBMsg.SpoiLatitudeRadOrY)
  return spoilatituderadory_;
}
 void CameraSteeringPBMsg::set_spoilatituderadory(double value) {
  set_has_spoilatituderadory();
  spoilatituderadory_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraSteeringPBMsg.SpoiLatitudeRadOrY)
}

// optional double SpoiLongitudeRadOrX = 4;
bool CameraSteeringPBMsg::has_spoilongituderadorx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CameraSteeringPBMsg::set_has_spoilongituderadorx() {
  _has_bits_[0] |= 0x00000008u;
}
void CameraSteeringPBMsg::clear_has_spoilongituderadorx() {
  _has_bits_[0] &= ~0x00000008u;
}
void CameraSteeringPBMsg::clear_spoilongituderadorx() {
  spoilongituderadorx_ = 0;
  clear_has_spoilongituderadorx();
}
 double CameraSteeringPBMsg::spoilongituderadorx() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraSteeringPBMsg.SpoiLongitudeRadOrX)
  return spoilongituderadorx_;
}
 void CameraSteeringPBMsg::set_spoilongituderadorx(double value) {
  set_has_spoilongituderadorx();
  spoilongituderadorx_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraSteeringPBMsg.SpoiLongitudeRadOrX)
}

// optional double CameraAzimuthAngleRad = 5;
bool CameraSteeringPBMsg::has_cameraazimuthanglerad() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CameraSteeringPBMsg::set_has_cameraazimuthanglerad() {
  _has_bits_[0] |= 0x00000010u;
}
void CameraSteeringPBMsg::clear_has_cameraazimuthanglerad() {
  _has_bits_[0] &= ~0x00000010u;
}
void CameraSteeringPBMsg::clear_cameraazimuthanglerad() {
  cameraazimuthanglerad_ = 0;
  clear_has_cameraazimuthanglerad();
}
 double CameraSteeringPBMsg::cameraazimuthanglerad() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraSteeringPBMsg.CameraAzimuthAngleRad)
  return cameraazimuthanglerad_;
}
 void CameraSteeringPBMsg::set_cameraazimuthanglerad(double value) {
  set_has_cameraazimuthanglerad();
  cameraazimuthanglerad_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraSteeringPBMsg.CameraAzimuthAngleRad)
}

// optional double CameraElevationAngleRad = 6;
bool CameraSteeringPBMsg::has_cameraelevationanglerad() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CameraSteeringPBMsg::set_has_cameraelevationanglerad() {
  _has_bits_[0] |= 0x00000020u;
}
void CameraSteeringPBMsg::clear_has_cameraelevationanglerad() {
  _has_bits_[0] &= ~0x00000020u;
}
void CameraSteeringPBMsg::clear_cameraelevationanglerad() {
  cameraelevationanglerad_ = 0;
  clear_has_cameraelevationanglerad();
}
 double CameraSteeringPBMsg::cameraelevationanglerad() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraSteeringPBMsg.CameraElevationAngleRad)
  return cameraelevationanglerad_;
}
 void CameraSteeringPBMsg::set_cameraelevationanglerad(double value) {
  set_has_cameraelevationanglerad();
  cameraelevationanglerad_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraSteeringPBMsg.CameraElevationAngleRad)
}

// optional double CameraZoomPercent = 7;
bool CameraSteeringPBMsg::has_camerazoompercent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CameraSteeringPBMsg::set_has_camerazoompercent() {
  _has_bits_[0] |= 0x00000040u;
}
void CameraSteeringPBMsg::clear_has_camerazoompercent() {
  _has_bits_[0] &= ~0x00000040u;
}
void CameraSteeringPBMsg::clear_camerazoompercent() {
  camerazoompercent_ = 0;
  clear_has_camerazoompercent();
}
 double CameraSteeringPBMsg::camerazoompercent() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraSteeringPBMsg.CameraZoomPercent)
  return camerazoompercent_;
}
 void CameraSteeringPBMsg::set_camerazoompercent(double value) {
  set_has_camerazoompercent();
  camerazoompercent_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraSteeringPBMsg.CameraZoomPercent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ImageCompressionControlPBMsg_VisionImageCompressionType_e_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageCompressionControlPBMsg_VisionImageCompressionType_e_descriptor_;
}
bool ImageCompressionControlPBMsg_VisionImageCompressionType_e_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ImageCompressionControlPBMsg_VisionImageCompressionType_e ImageCompressionControlPBMsg::jpeg;
const ImageCompressionControlPBMsg_VisionImageCompressionType_e ImageCompressionControlPBMsg::mpeg;
const ImageCompressionControlPBMsg_VisionImageCompressionType_e ImageCompressionControlPBMsg::gif;
const ImageCompressionControlPBMsg_VisionImageCompressionType_e ImageCompressionControlPBMsg::VisionImageCompressionType_e_MIN;
const ImageCompressionControlPBMsg_VisionImageCompressionType_e ImageCompressionControlPBMsg::VisionImageCompressionType_e_MAX;
const int ImageCompressionControlPBMsg::VisionImageCompressionType_e_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageCompressionControlPBMsg::kEnableImageCompressionFieldNumber;
const int ImageCompressionControlPBMsg::kTransmitCompressedImagesFieldNumber;
const int ImageCompressionControlPBMsg::kImageComressionTypeFieldNumber;
const int ImageCompressionControlPBMsg::kImageCompressionRatioFieldNumber;
const int ImageCompressionControlPBMsg::kFrameRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageCompressionControlPBMsg::ImageCompressionControlPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.ImageCompressionControlPBMsg)
}

void ImageCompressionControlPBMsg::InitAsDefaultInstance() {
}

ImageCompressionControlPBMsg::ImageCompressionControlPBMsg(const ImageCompressionControlPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.ImageCompressionControlPBMsg)
}

void ImageCompressionControlPBMsg::SharedCtor() {
  _cached_size_ = 0;
  enableimagecompression_ = false;
  transmitcompressedimages_ = false;
  imagecomressiontype_ = 0;
  imagecompressionratio_ = 0;
  framerate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageCompressionControlPBMsg::~ImageCompressionControlPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.ImageCompressionControlPBMsg)
  SharedDtor();
}

void ImageCompressionControlPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImageCompressionControlPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageCompressionControlPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageCompressionControlPBMsg_descriptor_;
}

const ImageCompressionControlPBMsg& ImageCompressionControlPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

ImageCompressionControlPBMsg* ImageCompressionControlPBMsg::default_instance_ = NULL;

ImageCompressionControlPBMsg* ImageCompressionControlPBMsg::New(::google::protobuf::Arena* arena) const {
  ImageCompressionControlPBMsg* n = new ImageCompressionControlPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageCompressionControlPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.ImageCompressionControlPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImageCompressionControlPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImageCompressionControlPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(enableimagecompression_, framerate_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImageCompressionControlPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.ImageCompressionControlPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool EnableImageCompression = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enableimagecompression_)));
          set_has_enableimagecompression();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TransmitCompressedImages;
        break;
      }

      // optional bool TransmitCompressedImages = 2;
      case 2: {
        if (tag == 16) {
         parse_TransmitCompressedImages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transmitcompressedimages_)));
          set_has_transmitcompressedimages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ImageComressionType;
        break;
      }

      // optional .vision_messages.ImageCompressionControlPBMsg.VisionImageCompressionType_e ImageComressionType = 3;
      case 3: {
        if (tag == 24) {
         parse_ImageComressionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vision_messages::ImageCompressionControlPBMsg_VisionImageCompressionType_e_IsValid(value)) {
            set_imagecomressiontype(static_cast< ::vision_messages::ImageCompressionControlPBMsg_VisionImageCompressionType_e >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_ImageCompressionRatio;
        break;
      }

      // optional double ImageCompressionRatio = 4;
      case 4: {
        if (tag == 33) {
         parse_ImageCompressionRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &imagecompressionratio_)));
          set_has_imagecompressionratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_FrameRate;
        break;
      }

      // optional double FrameRate = 5;
      case 5: {
        if (tag == 41) {
         parse_FrameRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &framerate_)));
          set_has_framerate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.ImageCompressionControlPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.ImageCompressionControlPBMsg)
  return false;
#undef DO_
}

void ImageCompressionControlPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.ImageCompressionControlPBMsg)
  // optional bool EnableImageCompression = 1;
  if (has_enableimagecompression()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enableimagecompression(), output);
  }

  // optional bool TransmitCompressedImages = 2;
  if (has_transmitcompressedimages()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->transmitcompressedimages(), output);
  }

  // optional .vision_messages.ImageCompressionControlPBMsg.VisionImageCompressionType_e ImageComressionType = 3;
  if (has_imagecomressiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->imagecomressiontype(), output);
  }

  // optional double ImageCompressionRatio = 4;
  if (has_imagecompressionratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->imagecompressionratio(), output);
  }

  // optional double FrameRate = 5;
  if (has_framerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->framerate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.ImageCompressionControlPBMsg)
}

::google::protobuf::uint8* ImageCompressionControlPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.ImageCompressionControlPBMsg)
  // optional bool EnableImageCompression = 1;
  if (has_enableimagecompression()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enableimagecompression(), target);
  }

  // optional bool TransmitCompressedImages = 2;
  if (has_transmitcompressedimages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->transmitcompressedimages(), target);
  }

  // optional .vision_messages.ImageCompressionControlPBMsg.VisionImageCompressionType_e ImageComressionType = 3;
  if (has_imagecomressiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->imagecomressiontype(), target);
  }

  // optional double ImageCompressionRatio = 4;
  if (has_imagecompressionratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->imagecompressionratio(), target);
  }

  // optional double FrameRate = 5;
  if (has_framerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->framerate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.ImageCompressionControlPBMsg)
  return target;
}

int ImageCompressionControlPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.ImageCompressionControlPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional bool EnableImageCompression = 1;
    if (has_enableimagecompression()) {
      total_size += 1 + 1;
    }

    // optional bool TransmitCompressedImages = 2;
    if (has_transmitcompressedimages()) {
      total_size += 1 + 1;
    }

    // optional .vision_messages.ImageCompressionControlPBMsg.VisionImageCompressionType_e ImageComressionType = 3;
    if (has_imagecomressiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->imagecomressiontype());
    }

    // optional double ImageCompressionRatio = 4;
    if (has_imagecompressionratio()) {
      total_size += 1 + 8;
    }

    // optional double FrameRate = 5;
    if (has_framerate()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageCompressionControlPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.ImageCompressionControlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImageCompressionControlPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageCompressionControlPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.ImageCompressionControlPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.ImageCompressionControlPBMsg)
    MergeFrom(*source);
  }
}

void ImageCompressionControlPBMsg::MergeFrom(const ImageCompressionControlPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.ImageCompressionControlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enableimagecompression()) {
      set_enableimagecompression(from.enableimagecompression());
    }
    if (from.has_transmitcompressedimages()) {
      set_transmitcompressedimages(from.transmitcompressedimages());
    }
    if (from.has_imagecomressiontype()) {
      set_imagecomressiontype(from.imagecomressiontype());
    }
    if (from.has_imagecompressionratio()) {
      set_imagecompressionratio(from.imagecompressionratio());
    }
    if (from.has_framerate()) {
      set_framerate(from.framerate());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ImageCompressionControlPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.ImageCompressionControlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageCompressionControlPBMsg::CopyFrom(const ImageCompressionControlPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.ImageCompressionControlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageCompressionControlPBMsg::IsInitialized() const {

  return true;
}

void ImageCompressionControlPBMsg::Swap(ImageCompressionControlPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageCompressionControlPBMsg::InternalSwap(ImageCompressionControlPBMsg* other) {
  std::swap(enableimagecompression_, other->enableimagecompression_);
  std::swap(transmitcompressedimages_, other->transmitcompressedimages_);
  std::swap(imagecomressiontype_, other->imagecomressiontype_);
  std::swap(imagecompressionratio_, other->imagecompressionratio_);
  std::swap(framerate_, other->framerate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageCompressionControlPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageCompressionControlPBMsg_descriptor_;
  metadata.reflection = ImageCompressionControlPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageCompressionControlPBMsg

// optional bool EnableImageCompression = 1;
bool ImageCompressionControlPBMsg::has_enableimagecompression() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageCompressionControlPBMsg::set_has_enableimagecompression() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageCompressionControlPBMsg::clear_has_enableimagecompression() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageCompressionControlPBMsg::clear_enableimagecompression() {
  enableimagecompression_ = false;
  clear_has_enableimagecompression();
}
 bool ImageCompressionControlPBMsg::enableimagecompression() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCompressionControlPBMsg.EnableImageCompression)
  return enableimagecompression_;
}
 void ImageCompressionControlPBMsg::set_enableimagecompression(bool value) {
  set_has_enableimagecompression();
  enableimagecompression_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageCompressionControlPBMsg.EnableImageCompression)
}

// optional bool TransmitCompressedImages = 2;
bool ImageCompressionControlPBMsg::has_transmitcompressedimages() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageCompressionControlPBMsg::set_has_transmitcompressedimages() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageCompressionControlPBMsg::clear_has_transmitcompressedimages() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageCompressionControlPBMsg::clear_transmitcompressedimages() {
  transmitcompressedimages_ = false;
  clear_has_transmitcompressedimages();
}
 bool ImageCompressionControlPBMsg::transmitcompressedimages() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCompressionControlPBMsg.TransmitCompressedImages)
  return transmitcompressedimages_;
}
 void ImageCompressionControlPBMsg::set_transmitcompressedimages(bool value) {
  set_has_transmitcompressedimages();
  transmitcompressedimages_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageCompressionControlPBMsg.TransmitCompressedImages)
}

// optional .vision_messages.ImageCompressionControlPBMsg.VisionImageCompressionType_e ImageComressionType = 3;
bool ImageCompressionControlPBMsg::has_imagecomressiontype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageCompressionControlPBMsg::set_has_imagecomressiontype() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageCompressionControlPBMsg::clear_has_imagecomressiontype() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageCompressionControlPBMsg::clear_imagecomressiontype() {
  imagecomressiontype_ = 0;
  clear_has_imagecomressiontype();
}
 ::vision_messages::ImageCompressionControlPBMsg_VisionImageCompressionType_e ImageCompressionControlPBMsg::imagecomressiontype() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCompressionControlPBMsg.ImageComressionType)
  return static_cast< ::vision_messages::ImageCompressionControlPBMsg_VisionImageCompressionType_e >(imagecomressiontype_);
}
 void ImageCompressionControlPBMsg::set_imagecomressiontype(::vision_messages::ImageCompressionControlPBMsg_VisionImageCompressionType_e value) {
  assert(::vision_messages::ImageCompressionControlPBMsg_VisionImageCompressionType_e_IsValid(value));
  set_has_imagecomressiontype();
  imagecomressiontype_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageCompressionControlPBMsg.ImageComressionType)
}

// optional double ImageCompressionRatio = 4;
bool ImageCompressionControlPBMsg::has_imagecompressionratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageCompressionControlPBMsg::set_has_imagecompressionratio() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageCompressionControlPBMsg::clear_has_imagecompressionratio() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageCompressionControlPBMsg::clear_imagecompressionratio() {
  imagecompressionratio_ = 0;
  clear_has_imagecompressionratio();
}
 double ImageCompressionControlPBMsg::imagecompressionratio() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCompressionControlPBMsg.ImageCompressionRatio)
  return imagecompressionratio_;
}
 void ImageCompressionControlPBMsg::set_imagecompressionratio(double value) {
  set_has_imagecompressionratio();
  imagecompressionratio_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageCompressionControlPBMsg.ImageCompressionRatio)
}

// optional double FrameRate = 5;
bool ImageCompressionControlPBMsg::has_framerate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageCompressionControlPBMsg::set_has_framerate() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageCompressionControlPBMsg::clear_has_framerate() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageCompressionControlPBMsg::clear_framerate() {
  framerate_ = 0;
  clear_has_framerate();
}
 double ImageCompressionControlPBMsg::framerate() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCompressionControlPBMsg.FrameRate)
  return framerate_;
}
 void ImageCompressionControlPBMsg::set_framerate(double value) {
  set_has_framerate();
  framerate_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageCompressionControlPBMsg.FrameRate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ImageLoggingControlPBMsg_VisionLoggingType_e_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageLoggingControlPBMsg_VisionLoggingType_e_descriptor_;
}
bool ImageLoggingControlPBMsg_VisionLoggingType_e_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ImageLoggingControlPBMsg_VisionLoggingType_e ImageLoggingControlPBMsg::LogMetaDataOnly;
const ImageLoggingControlPBMsg_VisionLoggingType_e ImageLoggingControlPBMsg::LogRawImages;
const ImageLoggingControlPBMsg_VisionLoggingType_e ImageLoggingControlPBMsg::LogCompressedImages;
const ImageLoggingControlPBMsg_VisionLoggingType_e ImageLoggingControlPBMsg::VisionLoggingType_e_MIN;
const ImageLoggingControlPBMsg_VisionLoggingType_e ImageLoggingControlPBMsg::VisionLoggingType_e_MAX;
const int ImageLoggingControlPBMsg::VisionLoggingType_e_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageLoggingControlPBMsg::kEnableLoggingFieldNumber;
const int ImageLoggingControlPBMsg::kLoggingTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageLoggingControlPBMsg::ImageLoggingControlPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.ImageLoggingControlPBMsg)
}

void ImageLoggingControlPBMsg::InitAsDefaultInstance() {
}

ImageLoggingControlPBMsg::ImageLoggingControlPBMsg(const ImageLoggingControlPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.ImageLoggingControlPBMsg)
}

void ImageLoggingControlPBMsg::SharedCtor() {
  _cached_size_ = 0;
  enablelogging_ = false;
  loggingtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageLoggingControlPBMsg::~ImageLoggingControlPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.ImageLoggingControlPBMsg)
  SharedDtor();
}

void ImageLoggingControlPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImageLoggingControlPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageLoggingControlPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageLoggingControlPBMsg_descriptor_;
}

const ImageLoggingControlPBMsg& ImageLoggingControlPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

ImageLoggingControlPBMsg* ImageLoggingControlPBMsg::default_instance_ = NULL;

ImageLoggingControlPBMsg* ImageLoggingControlPBMsg::New(::google::protobuf::Arena* arena) const {
  ImageLoggingControlPBMsg* n = new ImageLoggingControlPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageLoggingControlPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.ImageLoggingControlPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImageLoggingControlPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImageLoggingControlPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(enablelogging_, loggingtype_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImageLoggingControlPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.ImageLoggingControlPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool EnableLogging = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enablelogging_)));
          set_has_enablelogging();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LoggingType;
        break;
      }

      // optional .vision_messages.ImageLoggingControlPBMsg.VisionLoggingType_e LoggingType = 2;
      case 2: {
        if (tag == 16) {
         parse_LoggingType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vision_messages::ImageLoggingControlPBMsg_VisionLoggingType_e_IsValid(value)) {
            set_loggingtype(static_cast< ::vision_messages::ImageLoggingControlPBMsg_VisionLoggingType_e >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.ImageLoggingControlPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.ImageLoggingControlPBMsg)
  return false;
#undef DO_
}

void ImageLoggingControlPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.ImageLoggingControlPBMsg)
  // optional bool EnableLogging = 1;
  if (has_enablelogging()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enablelogging(), output);
  }

  // optional .vision_messages.ImageLoggingControlPBMsg.VisionLoggingType_e LoggingType = 2;
  if (has_loggingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->loggingtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.ImageLoggingControlPBMsg)
}

::google::protobuf::uint8* ImageLoggingControlPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.ImageLoggingControlPBMsg)
  // optional bool EnableLogging = 1;
  if (has_enablelogging()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enablelogging(), target);
  }

  // optional .vision_messages.ImageLoggingControlPBMsg.VisionLoggingType_e LoggingType = 2;
  if (has_loggingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->loggingtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.ImageLoggingControlPBMsg)
  return target;
}

int ImageLoggingControlPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.ImageLoggingControlPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool EnableLogging = 1;
    if (has_enablelogging()) {
      total_size += 1 + 1;
    }

    // optional .vision_messages.ImageLoggingControlPBMsg.VisionLoggingType_e LoggingType = 2;
    if (has_loggingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loggingtype());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageLoggingControlPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.ImageLoggingControlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImageLoggingControlPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageLoggingControlPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.ImageLoggingControlPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.ImageLoggingControlPBMsg)
    MergeFrom(*source);
  }
}

void ImageLoggingControlPBMsg::MergeFrom(const ImageLoggingControlPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.ImageLoggingControlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enablelogging()) {
      set_enablelogging(from.enablelogging());
    }
    if (from.has_loggingtype()) {
      set_loggingtype(from.loggingtype());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ImageLoggingControlPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.ImageLoggingControlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageLoggingControlPBMsg::CopyFrom(const ImageLoggingControlPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.ImageLoggingControlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageLoggingControlPBMsg::IsInitialized() const {

  return true;
}

void ImageLoggingControlPBMsg::Swap(ImageLoggingControlPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageLoggingControlPBMsg::InternalSwap(ImageLoggingControlPBMsg* other) {
  std::swap(enablelogging_, other->enablelogging_);
  std::swap(loggingtype_, other->loggingtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageLoggingControlPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageLoggingControlPBMsg_descriptor_;
  metadata.reflection = ImageLoggingControlPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageLoggingControlPBMsg

// optional bool EnableLogging = 1;
bool ImageLoggingControlPBMsg::has_enablelogging() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageLoggingControlPBMsg::set_has_enablelogging() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageLoggingControlPBMsg::clear_has_enablelogging() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageLoggingControlPBMsg::clear_enablelogging() {
  enablelogging_ = false;
  clear_has_enablelogging();
}
 bool ImageLoggingControlPBMsg::enablelogging() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageLoggingControlPBMsg.EnableLogging)
  return enablelogging_;
}
 void ImageLoggingControlPBMsg::set_enablelogging(bool value) {
  set_has_enablelogging();
  enablelogging_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageLoggingControlPBMsg.EnableLogging)
}

// optional .vision_messages.ImageLoggingControlPBMsg.VisionLoggingType_e LoggingType = 2;
bool ImageLoggingControlPBMsg::has_loggingtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageLoggingControlPBMsg::set_has_loggingtype() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageLoggingControlPBMsg::clear_has_loggingtype() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageLoggingControlPBMsg::clear_loggingtype() {
  loggingtype_ = 0;
  clear_has_loggingtype();
}
 ::vision_messages::ImageLoggingControlPBMsg_VisionLoggingType_e ImageLoggingControlPBMsg::loggingtype() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageLoggingControlPBMsg.LoggingType)
  return static_cast< ::vision_messages::ImageLoggingControlPBMsg_VisionLoggingType_e >(loggingtype_);
}
 void ImageLoggingControlPBMsg::set_loggingtype(::vision_messages::ImageLoggingControlPBMsg_VisionLoggingType_e value) {
  assert(::vision_messages::ImageLoggingControlPBMsg_VisionLoggingType_e_IsValid(value));
  set_has_loggingtype();
  loggingtype_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageLoggingControlPBMsg.LoggingType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageLocationPBMsg::kImageNumberFieldNumber;
const int ImageLocationPBMsg::kImageCenterLatitudeRadiansFieldNumber;
const int ImageLocationPBMsg::kImageCenterLongitudeRadiansFieldNumber;
const int ImageLocationPBMsg::kTargetCornerLocationsFieldNumber;
const int ImageLocationPBMsg::kTargetCornersLatLonOrXYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageLocationPBMsg::ImageLocationPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.ImageLocationPBMsg)
}

void ImageLocationPBMsg::InitAsDefaultInstance() {
}

ImageLocationPBMsg::ImageLocationPBMsg(const ImageLocationPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.ImageLocationPBMsg)
}

void ImageLocationPBMsg::SharedCtor() {
  _cached_size_ = 0;
  imagenumber_ = 0u;
  imagecenterlatituderadians_ = 0;
  imagecenterlongituderadians_ = 0;
  targetcornerslatlonorxy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageLocationPBMsg::~ImageLocationPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.ImageLocationPBMsg)
  SharedDtor();
}

void ImageLocationPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImageLocationPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageLocationPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageLocationPBMsg_descriptor_;
}

const ImageLocationPBMsg& ImageLocationPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

ImageLocationPBMsg* ImageLocationPBMsg::default_instance_ = NULL;

ImageLocationPBMsg* ImageLocationPBMsg::New(::google::protobuf::Arena* arena) const {
  ImageLocationPBMsg* n = new ImageLocationPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageLocationPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.ImageLocationPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImageLocationPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImageLocationPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(imagecenterlatituderadians_, targetcornerslatlonorxy_);

#undef ZR_HELPER_
#undef ZR_

  targetcornerlocations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImageLocationPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.ImageLocationPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ImageNumber = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imagenumber_)));
          set_has_imagenumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_ImageCenterLatitudeRadians;
        break;
      }

      // optional double ImageCenterLatitudeRadians = 2;
      case 2: {
        if (tag == 17) {
         parse_ImageCenterLatitudeRadians:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &imagecenterlatituderadians_)));
          set_has_imagecenterlatituderadians();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_ImageCenterLongitudeRadians;
        break;
      }

      // optional double ImageCenterLongitudeRadians = 3;
      case 3: {
        if (tag == 25) {
         parse_ImageCenterLongitudeRadians:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &imagecenterlongituderadians_)));
          set_has_imagecenterlongituderadians();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_TargetCornerLocations;
        break;
      }

      // repeated double TargetCornerLocations = 4;
      case 4: {
        if (tag == 33) {
         parse_TargetCornerLocations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_targetcornerlocations())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_targetcornerlocations())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_TargetCornerLocations;
        if (input->ExpectTag(40)) goto parse_TargetCornersLatLonOrXY;
        break;
      }

      // optional bool TargetCornersLatLonOrXY = 5;
      case 5: {
        if (tag == 40) {
         parse_TargetCornersLatLonOrXY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &targetcornerslatlonorxy_)));
          set_has_targetcornerslatlonorxy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.ImageLocationPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.ImageLocationPBMsg)
  return false;
#undef DO_
}

void ImageLocationPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.ImageLocationPBMsg)
  // optional uint32 ImageNumber = 1;
  if (has_imagenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->imagenumber(), output);
  }

  // optional double ImageCenterLatitudeRadians = 2;
  if (has_imagecenterlatituderadians()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->imagecenterlatituderadians(), output);
  }

  // optional double ImageCenterLongitudeRadians = 3;
  if (has_imagecenterlongituderadians()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->imagecenterlongituderadians(), output);
  }

  // repeated double TargetCornerLocations = 4;
  for (int i = 0; i < this->targetcornerlocations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->targetcornerlocations(i), output);
  }

  // optional bool TargetCornersLatLonOrXY = 5;
  if (has_targetcornerslatlonorxy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->targetcornerslatlonorxy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.ImageLocationPBMsg)
}

::google::protobuf::uint8* ImageLocationPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.ImageLocationPBMsg)
  // optional uint32 ImageNumber = 1;
  if (has_imagenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->imagenumber(), target);
  }

  // optional double ImageCenterLatitudeRadians = 2;
  if (has_imagecenterlatituderadians()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->imagecenterlatituderadians(), target);
  }

  // optional double ImageCenterLongitudeRadians = 3;
  if (has_imagecenterlongituderadians()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->imagecenterlongituderadians(), target);
  }

  // repeated double TargetCornerLocations = 4;
  for (int i = 0; i < this->targetcornerlocations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->targetcornerlocations(i), target);
  }

  // optional bool TargetCornersLatLonOrXY = 5;
  if (has_targetcornerslatlonorxy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->targetcornerslatlonorxy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.ImageLocationPBMsg)
  return target;
}

int ImageLocationPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.ImageLocationPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 23u) {
    // optional uint32 ImageNumber = 1;
    if (has_imagenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imagenumber());
    }

    // optional double ImageCenterLatitudeRadians = 2;
    if (has_imagecenterlatituderadians()) {
      total_size += 1 + 8;
    }

    // optional double ImageCenterLongitudeRadians = 3;
    if (has_imagecenterlongituderadians()) {
      total_size += 1 + 8;
    }

    // optional bool TargetCornersLatLonOrXY = 5;
    if (has_targetcornerslatlonorxy()) {
      total_size += 1 + 1;
    }

  }
  // repeated double TargetCornerLocations = 4;
  {
    int data_size = 0;
    data_size = 8 * this->targetcornerlocations_size();
    total_size += 1 * this->targetcornerlocations_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageLocationPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.ImageLocationPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImageLocationPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageLocationPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.ImageLocationPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.ImageLocationPBMsg)
    MergeFrom(*source);
  }
}

void ImageLocationPBMsg::MergeFrom(const ImageLocationPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.ImageLocationPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  targetcornerlocations_.MergeFrom(from.targetcornerlocations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imagenumber()) {
      set_imagenumber(from.imagenumber());
    }
    if (from.has_imagecenterlatituderadians()) {
      set_imagecenterlatituderadians(from.imagecenterlatituderadians());
    }
    if (from.has_imagecenterlongituderadians()) {
      set_imagecenterlongituderadians(from.imagecenterlongituderadians());
    }
    if (from.has_targetcornerslatlonorxy()) {
      set_targetcornerslatlonorxy(from.targetcornerslatlonorxy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ImageLocationPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.ImageLocationPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageLocationPBMsg::CopyFrom(const ImageLocationPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.ImageLocationPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageLocationPBMsg::IsInitialized() const {

  return true;
}

void ImageLocationPBMsg::Swap(ImageLocationPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageLocationPBMsg::InternalSwap(ImageLocationPBMsg* other) {
  std::swap(imagenumber_, other->imagenumber_);
  std::swap(imagecenterlatituderadians_, other->imagecenterlatituderadians_);
  std::swap(imagecenterlongituderadians_, other->imagecenterlongituderadians_);
  targetcornerlocations_.UnsafeArenaSwap(&other->targetcornerlocations_);
  std::swap(targetcornerslatlonorxy_, other->targetcornerslatlonorxy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageLocationPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageLocationPBMsg_descriptor_;
  metadata.reflection = ImageLocationPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageLocationPBMsg

// optional uint32 ImageNumber = 1;
bool ImageLocationPBMsg::has_imagenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageLocationPBMsg::set_has_imagenumber() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageLocationPBMsg::clear_has_imagenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageLocationPBMsg::clear_imagenumber() {
  imagenumber_ = 0u;
  clear_has_imagenumber();
}
 ::google::protobuf::uint32 ImageLocationPBMsg::imagenumber() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageLocationPBMsg.ImageNumber)
  return imagenumber_;
}
 void ImageLocationPBMsg::set_imagenumber(::google::protobuf::uint32 value) {
  set_has_imagenumber();
  imagenumber_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageLocationPBMsg.ImageNumber)
}

// optional double ImageCenterLatitudeRadians = 2;
bool ImageLocationPBMsg::has_imagecenterlatituderadians() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageLocationPBMsg::set_has_imagecenterlatituderadians() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageLocationPBMsg::clear_has_imagecenterlatituderadians() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageLocationPBMsg::clear_imagecenterlatituderadians() {
  imagecenterlatituderadians_ = 0;
  clear_has_imagecenterlatituderadians();
}
 double ImageLocationPBMsg::imagecenterlatituderadians() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageLocationPBMsg.ImageCenterLatitudeRadians)
  return imagecenterlatituderadians_;
}
 void ImageLocationPBMsg::set_imagecenterlatituderadians(double value) {
  set_has_imagecenterlatituderadians();
  imagecenterlatituderadians_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageLocationPBMsg.ImageCenterLatitudeRadians)
}

// optional double ImageCenterLongitudeRadians = 3;
bool ImageLocationPBMsg::has_imagecenterlongituderadians() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageLocationPBMsg::set_has_imagecenterlongituderadians() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageLocationPBMsg::clear_has_imagecenterlongituderadians() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageLocationPBMsg::clear_imagecenterlongituderadians() {
  imagecenterlongituderadians_ = 0;
  clear_has_imagecenterlongituderadians();
}
 double ImageLocationPBMsg::imagecenterlongituderadians() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageLocationPBMsg.ImageCenterLongitudeRadians)
  return imagecenterlongituderadians_;
}
 void ImageLocationPBMsg::set_imagecenterlongituderadians(double value) {
  set_has_imagecenterlongituderadians();
  imagecenterlongituderadians_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageLocationPBMsg.ImageCenterLongitudeRadians)
}

// repeated double TargetCornerLocations = 4;
int ImageLocationPBMsg::targetcornerlocations_size() const {
  return targetcornerlocations_.size();
}
void ImageLocationPBMsg::clear_targetcornerlocations() {
  targetcornerlocations_.Clear();
}
 double ImageLocationPBMsg::targetcornerlocations(int index) const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageLocationPBMsg.TargetCornerLocations)
  return targetcornerlocations_.Get(index);
}
 void ImageLocationPBMsg::set_targetcornerlocations(int index, double value) {
  targetcornerlocations_.Set(index, value);
  // @@protoc_insertion_point(field_set:vision_messages.ImageLocationPBMsg.TargetCornerLocations)
}
 void ImageLocationPBMsg::add_targetcornerlocations(double value) {
  targetcornerlocations_.Add(value);
  // @@protoc_insertion_point(field_add:vision_messages.ImageLocationPBMsg.TargetCornerLocations)
}
 const ::google::protobuf::RepeatedField< double >&
ImageLocationPBMsg::targetcornerlocations() const {
  // @@protoc_insertion_point(field_list:vision_messages.ImageLocationPBMsg.TargetCornerLocations)
  return targetcornerlocations_;
}
 ::google::protobuf::RepeatedField< double >*
ImageLocationPBMsg::mutable_targetcornerlocations() {
  // @@protoc_insertion_point(field_mutable_list:vision_messages.ImageLocationPBMsg.TargetCornerLocations)
  return &targetcornerlocations_;
}

// optional bool TargetCornersLatLonOrXY = 5;
bool ImageLocationPBMsg::has_targetcornerslatlonorxy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageLocationPBMsg::set_has_targetcornerslatlonorxy() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageLocationPBMsg::clear_has_targetcornerslatlonorxy() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageLocationPBMsg::clear_targetcornerslatlonorxy() {
  targetcornerslatlonorxy_ = false;
  clear_has_targetcornerslatlonorxy();
}
 bool ImageLocationPBMsg::targetcornerslatlonorxy() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageLocationPBMsg.TargetCornersLatLonOrXY)
  return targetcornerslatlonorxy_;
}
 void ImageLocationPBMsg::set_targetcornerslatlonorxy(bool value) {
  set_has_targetcornerslatlonorxy();
  targetcornerslatlonorxy_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageLocationPBMsg.TargetCornersLatLonOrXY)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroundTargetLocationPBMsg::kTargetTypeCodeFieldNumber;
const int GroundTargetLocationPBMsg::kTargetIDFieldNumber;
const int GroundTargetLocationPBMsg::kTargetLatitudeRadiansFieldNumber;
const int GroundTargetLocationPBMsg::kTargetLongitudeRadiansFieldNumber;
const int GroundTargetLocationPBMsg::kTargetAltitudeMSLFieldNumber;
const int GroundTargetLocationPBMsg::kTargetAltitudeValidFieldNumber;
const int GroundTargetLocationPBMsg::kTargetAzimuthRadiansFieldNumber;
const int GroundTargetLocationPBMsg::kTargetElevationRadiansFieldNumber;
const int GroundTargetLocationPBMsg::kTargetOrientationRadiansFieldNumber;
const int GroundTargetLocationPBMsg::kTargetAzimuthElevationOrientationValidFieldNumber;
const int GroundTargetLocationPBMsg::kTargetCovarianceMatrixFieldNumber;
const int GroundTargetLocationPBMsg::kTargetCovarianceValidFieldNumber;
const int GroundTargetLocationPBMsg::kTargetPixelLocationXFieldNumber;
const int GroundTargetLocationPBMsg::kTargetPixelLocationYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroundTargetLocationPBMsg::GroundTargetLocationPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.GroundTargetLocationPBMsg)
}

void GroundTargetLocationPBMsg::InitAsDefaultInstance() {
}

GroundTargetLocationPBMsg::GroundTargetLocationPBMsg(const GroundTargetLocationPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.GroundTargetLocationPBMsg)
}

void GroundTargetLocationPBMsg::SharedCtor() {
  _cached_size_ = 0;
  targettypecode_ = 0u;
  targetid_ = 0u;
  targetlatituderadians_ = 0;
  targetlongituderadians_ = 0;
  targetaltitudemsl_ = 0;
  targetaltitudevalid_ = false;
  targetazimuthradians_ = 0;
  targetelevationradians_ = 0;
  targetorientationradians_ = 0;
  targetazimuthelevationorientationvalid_ = false;
  targetcovariancevalid_ = false;
  targetpixellocation_x_ = 0;
  targetpixellocation_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroundTargetLocationPBMsg::~GroundTargetLocationPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.GroundTargetLocationPBMsg)
  SharedDtor();
}

void GroundTargetLocationPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroundTargetLocationPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroundTargetLocationPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroundTargetLocationPBMsg_descriptor_;
}

const GroundTargetLocationPBMsg& GroundTargetLocationPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

GroundTargetLocationPBMsg* GroundTargetLocationPBMsg::default_instance_ = NULL;

GroundTargetLocationPBMsg* GroundTargetLocationPBMsg::New(::google::protobuf::Arena* arena) const {
  GroundTargetLocationPBMsg* n = new GroundTargetLocationPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroundTargetLocationPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.GroundTargetLocationPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GroundTargetLocationPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GroundTargetLocationPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(targettypecode_, targetelevationradians_);
    targetaltitudevalid_ = false;
  }
  if (_has_bits_[8 / 32] & 15104u) {
    ZR_(targetazimuthelevationorientationvalid_, targetpixellocation_x_);
    targetorientationradians_ = 0;
    targetpixellocation_y_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  targetcovariancematrix_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GroundTargetLocationPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.GroundTargetLocationPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TargetTypeCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targettypecode_)));
          set_has_targettypecode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TargetID;
        break;
      }

      // optional uint32 TargetID = 2;
      case 2: {
        if (tag == 16) {
         parse_TargetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_TargetLatitudeRadians;
        break;
      }

      // optional double TargetLatitudeRadians = 3;
      case 3: {
        if (tag == 25) {
         parse_TargetLatitudeRadians:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &targetlatituderadians_)));
          set_has_targetlatituderadians();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_TargetLongitudeRadians;
        break;
      }

      // optional double TargetLongitudeRadians = 4;
      case 4: {
        if (tag == 33) {
         parse_TargetLongitudeRadians:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &targetlongituderadians_)));
          set_has_targetlongituderadians();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_TargetAltitudeMSL;
        break;
      }

      // optional double TargetAltitudeMSL = 5;
      case 5: {
        if (tag == 41) {
         parse_TargetAltitudeMSL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &targetaltitudemsl_)));
          set_has_targetaltitudemsl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_TargetAltitudeValid;
        break;
      }

      // optional bool TargetAltitudeValid = 6;
      case 6: {
        if (tag == 48) {
         parse_TargetAltitudeValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &targetaltitudevalid_)));
          set_has_targetaltitudevalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_TargetAzimuthRadians;
        break;
      }

      // optional double TargetAzimuthRadians = 7;
      case 7: {
        if (tag == 57) {
         parse_TargetAzimuthRadians:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &targetazimuthradians_)));
          set_has_targetazimuthradians();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_TargetElevationRadians;
        break;
      }

      // optional double TargetElevationRadians = 8;
      case 8: {
        if (tag == 65) {
         parse_TargetElevationRadians:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &targetelevationradians_)));
          set_has_targetelevationradians();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_TargetOrientationRadians;
        break;
      }

      // optional double TargetOrientationRadians = 9;
      case 9: {
        if (tag == 73) {
         parse_TargetOrientationRadians:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &targetorientationradians_)));
          set_has_targetorientationradians();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_TargetAzimuthElevationOrientationValid;
        break;
      }

      // optional bool TargetAzimuthElevationOrientationValid = 10;
      case 10: {
        if (tag == 80) {
         parse_TargetAzimuthElevationOrientationValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &targetazimuthelevationorientationvalid_)));
          set_has_targetazimuthelevationorientationvalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_TargetCovarianceMatrix;
        break;
      }

      // repeated double TargetCovarianceMatrix = 11;
      case 11: {
        if (tag == 89) {
         parse_TargetCovarianceMatrix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 89, input, this->mutable_targetcovariancematrix())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_targetcovariancematrix())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_TargetCovarianceMatrix;
        if (input->ExpectTag(96)) goto parse_TargetCovarianceValid;
        break;
      }

      // optional bool TargetCovarianceValid = 12;
      case 12: {
        if (tag == 96) {
         parse_TargetCovarianceValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &targetcovariancevalid_)));
          set_has_targetcovariancevalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_TargetPixelLocation_x;
        break;
      }

      // optional int32 TargetPixelLocation_x = 13;
      case 13: {
        if (tag == 104) {
         parse_TargetPixelLocation_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetpixellocation_x_)));
          set_has_targetpixellocation_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_TargetPixelLocation_y;
        break;
      }

      // optional int32 TargetPixelLocation_y = 14;
      case 14: {
        if (tag == 112) {
         parse_TargetPixelLocation_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetpixellocation_y_)));
          set_has_targetpixellocation_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.GroundTargetLocationPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.GroundTargetLocationPBMsg)
  return false;
#undef DO_
}

void GroundTargetLocationPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.GroundTargetLocationPBMsg)
  // optional uint32 TargetTypeCode = 1;
  if (has_targettypecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targettypecode(), output);
  }

  // optional uint32 TargetID = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetid(), output);
  }

  // optional double TargetLatitudeRadians = 3;
  if (has_targetlatituderadians()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->targetlatituderadians(), output);
  }

  // optional double TargetLongitudeRadians = 4;
  if (has_targetlongituderadians()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->targetlongituderadians(), output);
  }

  // optional double TargetAltitudeMSL = 5;
  if (has_targetaltitudemsl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->targetaltitudemsl(), output);
  }

  // optional bool TargetAltitudeValid = 6;
  if (has_targetaltitudevalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->targetaltitudevalid(), output);
  }

  // optional double TargetAzimuthRadians = 7;
  if (has_targetazimuthradians()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->targetazimuthradians(), output);
  }

  // optional double TargetElevationRadians = 8;
  if (has_targetelevationradians()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->targetelevationradians(), output);
  }

  // optional double TargetOrientationRadians = 9;
  if (has_targetorientationradians()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->targetorientationradians(), output);
  }

  // optional bool TargetAzimuthElevationOrientationValid = 10;
  if (has_targetazimuthelevationorientationvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->targetazimuthelevationorientationvalid(), output);
  }

  // repeated double TargetCovarianceMatrix = 11;
  for (int i = 0; i < this->targetcovariancematrix_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      11, this->targetcovariancematrix(i), output);
  }

  // optional bool TargetCovarianceValid = 12;
  if (has_targetcovariancevalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->targetcovariancevalid(), output);
  }

  // optional int32 TargetPixelLocation_x = 13;
  if (has_targetpixellocation_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->targetpixellocation_x(), output);
  }

  // optional int32 TargetPixelLocation_y = 14;
  if (has_targetpixellocation_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->targetpixellocation_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.GroundTargetLocationPBMsg)
}

::google::protobuf::uint8* GroundTargetLocationPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.GroundTargetLocationPBMsg)
  // optional uint32 TargetTypeCode = 1;
  if (has_targettypecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targettypecode(), target);
  }

  // optional uint32 TargetID = 2;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetid(), target);
  }

  // optional double TargetLatitudeRadians = 3;
  if (has_targetlatituderadians()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->targetlatituderadians(), target);
  }

  // optional double TargetLongitudeRadians = 4;
  if (has_targetlongituderadians()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->targetlongituderadians(), target);
  }

  // optional double TargetAltitudeMSL = 5;
  if (has_targetaltitudemsl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->targetaltitudemsl(), target);
  }

  // optional bool TargetAltitudeValid = 6;
  if (has_targetaltitudevalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->targetaltitudevalid(), target);
  }

  // optional double TargetAzimuthRadians = 7;
  if (has_targetazimuthradians()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->targetazimuthradians(), target);
  }

  // optional double TargetElevationRadians = 8;
  if (has_targetelevationradians()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->targetelevationradians(), target);
  }

  // optional double TargetOrientationRadians = 9;
  if (has_targetorientationradians()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->targetorientationradians(), target);
  }

  // optional bool TargetAzimuthElevationOrientationValid = 10;
  if (has_targetazimuthelevationorientationvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->targetazimuthelevationorientationvalid(), target);
  }

  // repeated double TargetCovarianceMatrix = 11;
  for (int i = 0; i < this->targetcovariancematrix_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(11, this->targetcovariancematrix(i), target);
  }

  // optional bool TargetCovarianceValid = 12;
  if (has_targetcovariancevalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->targetcovariancevalid(), target);
  }

  // optional int32 TargetPixelLocation_x = 13;
  if (has_targetpixellocation_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->targetpixellocation_x(), target);
  }

  // optional int32 TargetPixelLocation_y = 14;
  if (has_targetpixellocation_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->targetpixellocation_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.GroundTargetLocationPBMsg)
  return target;
}

int GroundTargetLocationPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.GroundTargetLocationPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 TargetTypeCode = 1;
    if (has_targettypecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targettypecode());
    }

    // optional uint32 TargetID = 2;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }

    // optional double TargetLatitudeRadians = 3;
    if (has_targetlatituderadians()) {
      total_size += 1 + 8;
    }

    // optional double TargetLongitudeRadians = 4;
    if (has_targetlongituderadians()) {
      total_size += 1 + 8;
    }

    // optional double TargetAltitudeMSL = 5;
    if (has_targetaltitudemsl()) {
      total_size += 1 + 8;
    }

    // optional bool TargetAltitudeValid = 6;
    if (has_targetaltitudevalid()) {
      total_size += 1 + 1;
    }

    // optional double TargetAzimuthRadians = 7;
    if (has_targetazimuthradians()) {
      total_size += 1 + 8;
    }

    // optional double TargetElevationRadians = 8;
    if (has_targetelevationradians()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 15104u) {
    // optional double TargetOrientationRadians = 9;
    if (has_targetorientationradians()) {
      total_size += 1 + 8;
    }

    // optional bool TargetAzimuthElevationOrientationValid = 10;
    if (has_targetazimuthelevationorientationvalid()) {
      total_size += 1 + 1;
    }

    // optional bool TargetCovarianceValid = 12;
    if (has_targetcovariancevalid()) {
      total_size += 1 + 1;
    }

    // optional int32 TargetPixelLocation_x = 13;
    if (has_targetpixellocation_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetpixellocation_x());
    }

    // optional int32 TargetPixelLocation_y = 14;
    if (has_targetpixellocation_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetpixellocation_y());
    }

  }
  // repeated double TargetCovarianceMatrix = 11;
  {
    int data_size = 0;
    data_size = 8 * this->targetcovariancematrix_size();
    total_size += 1 * this->targetcovariancematrix_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroundTargetLocationPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.GroundTargetLocationPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GroundTargetLocationPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GroundTargetLocationPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.GroundTargetLocationPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.GroundTargetLocationPBMsg)
    MergeFrom(*source);
  }
}

void GroundTargetLocationPBMsg::MergeFrom(const GroundTargetLocationPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.GroundTargetLocationPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  targetcovariancematrix_.MergeFrom(from.targetcovariancematrix_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targettypecode()) {
      set_targettypecode(from.targettypecode());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_targetlatituderadians()) {
      set_targetlatituderadians(from.targetlatituderadians());
    }
    if (from.has_targetlongituderadians()) {
      set_targetlongituderadians(from.targetlongituderadians());
    }
    if (from.has_targetaltitudemsl()) {
      set_targetaltitudemsl(from.targetaltitudemsl());
    }
    if (from.has_targetaltitudevalid()) {
      set_targetaltitudevalid(from.targetaltitudevalid());
    }
    if (from.has_targetazimuthradians()) {
      set_targetazimuthradians(from.targetazimuthradians());
    }
    if (from.has_targetelevationradians()) {
      set_targetelevationradians(from.targetelevationradians());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_targetorientationradians()) {
      set_targetorientationradians(from.targetorientationradians());
    }
    if (from.has_targetazimuthelevationorientationvalid()) {
      set_targetazimuthelevationorientationvalid(from.targetazimuthelevationorientationvalid());
    }
    if (from.has_targetcovariancevalid()) {
      set_targetcovariancevalid(from.targetcovariancevalid());
    }
    if (from.has_targetpixellocation_x()) {
      set_targetpixellocation_x(from.targetpixellocation_x());
    }
    if (from.has_targetpixellocation_y()) {
      set_targetpixellocation_y(from.targetpixellocation_y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GroundTargetLocationPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.GroundTargetLocationPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroundTargetLocationPBMsg::CopyFrom(const GroundTargetLocationPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.GroundTargetLocationPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroundTargetLocationPBMsg::IsInitialized() const {

  return true;
}

void GroundTargetLocationPBMsg::Swap(GroundTargetLocationPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroundTargetLocationPBMsg::InternalSwap(GroundTargetLocationPBMsg* other) {
  std::swap(targettypecode_, other->targettypecode_);
  std::swap(targetid_, other->targetid_);
  std::swap(targetlatituderadians_, other->targetlatituderadians_);
  std::swap(targetlongituderadians_, other->targetlongituderadians_);
  std::swap(targetaltitudemsl_, other->targetaltitudemsl_);
  std::swap(targetaltitudevalid_, other->targetaltitudevalid_);
  std::swap(targetazimuthradians_, other->targetazimuthradians_);
  std::swap(targetelevationradians_, other->targetelevationradians_);
  std::swap(targetorientationradians_, other->targetorientationradians_);
  std::swap(targetazimuthelevationorientationvalid_, other->targetazimuthelevationorientationvalid_);
  targetcovariancematrix_.UnsafeArenaSwap(&other->targetcovariancematrix_);
  std::swap(targetcovariancevalid_, other->targetcovariancevalid_);
  std::swap(targetpixellocation_x_, other->targetpixellocation_x_);
  std::swap(targetpixellocation_y_, other->targetpixellocation_y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroundTargetLocationPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroundTargetLocationPBMsg_descriptor_;
  metadata.reflection = GroundTargetLocationPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroundTargetLocationPBMsg

// optional uint32 TargetTypeCode = 1;
bool GroundTargetLocationPBMsg::has_targettypecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GroundTargetLocationPBMsg::set_has_targettypecode() {
  _has_bits_[0] |= 0x00000001u;
}
void GroundTargetLocationPBMsg::clear_has_targettypecode() {
  _has_bits_[0] &= ~0x00000001u;
}
void GroundTargetLocationPBMsg::clear_targettypecode() {
  targettypecode_ = 0u;
  clear_has_targettypecode();
}
 ::google::protobuf::uint32 GroundTargetLocationPBMsg::targettypecode() const {
  // @@protoc_insertion_point(field_get:vision_messages.GroundTargetLocationPBMsg.TargetTypeCode)
  return targettypecode_;
}
 void GroundTargetLocationPBMsg::set_targettypecode(::google::protobuf::uint32 value) {
  set_has_targettypecode();
  targettypecode_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GroundTargetLocationPBMsg.TargetTypeCode)
}

// optional uint32 TargetID = 2;
bool GroundTargetLocationPBMsg::has_targetid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GroundTargetLocationPBMsg::set_has_targetid() {
  _has_bits_[0] |= 0x00000002u;
}
void GroundTargetLocationPBMsg::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GroundTargetLocationPBMsg::clear_targetid() {
  targetid_ = 0u;
  clear_has_targetid();
}
 ::google::protobuf::uint32 GroundTargetLocationPBMsg::targetid() const {
  // @@protoc_insertion_point(field_get:vision_messages.GroundTargetLocationPBMsg.TargetID)
  return targetid_;
}
 void GroundTargetLocationPBMsg::set_targetid(::google::protobuf::uint32 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GroundTargetLocationPBMsg.TargetID)
}

// optional double TargetLatitudeRadians = 3;
bool GroundTargetLocationPBMsg::has_targetlatituderadians() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GroundTargetLocationPBMsg::set_has_targetlatituderadians() {
  _has_bits_[0] |= 0x00000004u;
}
void GroundTargetLocationPBMsg::clear_has_targetlatituderadians() {
  _has_bits_[0] &= ~0x00000004u;
}
void GroundTargetLocationPBMsg::clear_targetlatituderadians() {
  targetlatituderadians_ = 0;
  clear_has_targetlatituderadians();
}
 double GroundTargetLocationPBMsg::targetlatituderadians() const {
  // @@protoc_insertion_point(field_get:vision_messages.GroundTargetLocationPBMsg.TargetLatitudeRadians)
  return targetlatituderadians_;
}
 void GroundTargetLocationPBMsg::set_targetlatituderadians(double value) {
  set_has_targetlatituderadians();
  targetlatituderadians_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GroundTargetLocationPBMsg.TargetLatitudeRadians)
}

// optional double TargetLongitudeRadians = 4;
bool GroundTargetLocationPBMsg::has_targetlongituderadians() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GroundTargetLocationPBMsg::set_has_targetlongituderadians() {
  _has_bits_[0] |= 0x00000008u;
}
void GroundTargetLocationPBMsg::clear_has_targetlongituderadians() {
  _has_bits_[0] &= ~0x00000008u;
}
void GroundTargetLocationPBMsg::clear_targetlongituderadians() {
  targetlongituderadians_ = 0;
  clear_has_targetlongituderadians();
}
 double GroundTargetLocationPBMsg::targetlongituderadians() const {
  // @@protoc_insertion_point(field_get:vision_messages.GroundTargetLocationPBMsg.TargetLongitudeRadians)
  return targetlongituderadians_;
}
 void GroundTargetLocationPBMsg::set_targetlongituderadians(double value) {
  set_has_targetlongituderadians();
  targetlongituderadians_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GroundTargetLocationPBMsg.TargetLongitudeRadians)
}

// optional double TargetAltitudeMSL = 5;
bool GroundTargetLocationPBMsg::has_targetaltitudemsl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GroundTargetLocationPBMsg::set_has_targetaltitudemsl() {
  _has_bits_[0] |= 0x00000010u;
}
void GroundTargetLocationPBMsg::clear_has_targetaltitudemsl() {
  _has_bits_[0] &= ~0x00000010u;
}
void GroundTargetLocationPBMsg::clear_targetaltitudemsl() {
  targetaltitudemsl_ = 0;
  clear_has_targetaltitudemsl();
}
 double GroundTargetLocationPBMsg::targetaltitudemsl() const {
  // @@protoc_insertion_point(field_get:vision_messages.GroundTargetLocationPBMsg.TargetAltitudeMSL)
  return targetaltitudemsl_;
}
 void GroundTargetLocationPBMsg::set_targetaltitudemsl(double value) {
  set_has_targetaltitudemsl();
  targetaltitudemsl_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GroundTargetLocationPBMsg.TargetAltitudeMSL)
}

// optional bool TargetAltitudeValid = 6;
bool GroundTargetLocationPBMsg::has_targetaltitudevalid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GroundTargetLocationPBMsg::set_has_targetaltitudevalid() {
  _has_bits_[0] |= 0x00000020u;
}
void GroundTargetLocationPBMsg::clear_has_targetaltitudevalid() {
  _has_bits_[0] &= ~0x00000020u;
}
void GroundTargetLocationPBMsg::clear_targetaltitudevalid() {
  targetaltitudevalid_ = false;
  clear_has_targetaltitudevalid();
}
 bool GroundTargetLocationPBMsg::targetaltitudevalid() const {
  // @@protoc_insertion_point(field_get:vision_messages.GroundTargetLocationPBMsg.TargetAltitudeValid)
  return targetaltitudevalid_;
}
 void GroundTargetLocationPBMsg::set_targetaltitudevalid(bool value) {
  set_has_targetaltitudevalid();
  targetaltitudevalid_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GroundTargetLocationPBMsg.TargetAltitudeValid)
}

// optional double TargetAzimuthRadians = 7;
bool GroundTargetLocationPBMsg::has_targetazimuthradians() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GroundTargetLocationPBMsg::set_has_targetazimuthradians() {
  _has_bits_[0] |= 0x00000040u;
}
void GroundTargetLocationPBMsg::clear_has_targetazimuthradians() {
  _has_bits_[0] &= ~0x00000040u;
}
void GroundTargetLocationPBMsg::clear_targetazimuthradians() {
  targetazimuthradians_ = 0;
  clear_has_targetazimuthradians();
}
 double GroundTargetLocationPBMsg::targetazimuthradians() const {
  // @@protoc_insertion_point(field_get:vision_messages.GroundTargetLocationPBMsg.TargetAzimuthRadians)
  return targetazimuthradians_;
}
 void GroundTargetLocationPBMsg::set_targetazimuthradians(double value) {
  set_has_targetazimuthradians();
  targetazimuthradians_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GroundTargetLocationPBMsg.TargetAzimuthRadians)
}

// optional double TargetElevationRadians = 8;
bool GroundTargetLocationPBMsg::has_targetelevationradians() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GroundTargetLocationPBMsg::set_has_targetelevationradians() {
  _has_bits_[0] |= 0x00000080u;
}
void GroundTargetLocationPBMsg::clear_has_targetelevationradians() {
  _has_bits_[0] &= ~0x00000080u;
}
void GroundTargetLocationPBMsg::clear_targetelevationradians() {
  targetelevationradians_ = 0;
  clear_has_targetelevationradians();
}
 double GroundTargetLocationPBMsg::targetelevationradians() const {
  // @@protoc_insertion_point(field_get:vision_messages.GroundTargetLocationPBMsg.TargetElevationRadians)
  return targetelevationradians_;
}
 void GroundTargetLocationPBMsg::set_targetelevationradians(double value) {
  set_has_targetelevationradians();
  targetelevationradians_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GroundTargetLocationPBMsg.TargetElevationRadians)
}

// optional double TargetOrientationRadians = 9;
bool GroundTargetLocationPBMsg::has_targetorientationradians() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GroundTargetLocationPBMsg::set_has_targetorientationradians() {
  _has_bits_[0] |= 0x00000100u;
}
void GroundTargetLocationPBMsg::clear_has_targetorientationradians() {
  _has_bits_[0] &= ~0x00000100u;
}
void GroundTargetLocationPBMsg::clear_targetorientationradians() {
  targetorientationradians_ = 0;
  clear_has_targetorientationradians();
}
 double GroundTargetLocationPBMsg::targetorientationradians() const {
  // @@protoc_insertion_point(field_get:vision_messages.GroundTargetLocationPBMsg.TargetOrientationRadians)
  return targetorientationradians_;
}
 void GroundTargetLocationPBMsg::set_targetorientationradians(double value) {
  set_has_targetorientationradians();
  targetorientationradians_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GroundTargetLocationPBMsg.TargetOrientationRadians)
}

// optional bool TargetAzimuthElevationOrientationValid = 10;
bool GroundTargetLocationPBMsg::has_targetazimuthelevationorientationvalid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void GroundTargetLocationPBMsg::set_has_targetazimuthelevationorientationvalid() {
  _has_bits_[0] |= 0x00000200u;
}
void GroundTargetLocationPBMsg::clear_has_targetazimuthelevationorientationvalid() {
  _has_bits_[0] &= ~0x00000200u;
}
void GroundTargetLocationPBMsg::clear_targetazimuthelevationorientationvalid() {
  targetazimuthelevationorientationvalid_ = false;
  clear_has_targetazimuthelevationorientationvalid();
}
 bool GroundTargetLocationPBMsg::targetazimuthelevationorientationvalid() const {
  // @@protoc_insertion_point(field_get:vision_messages.GroundTargetLocationPBMsg.TargetAzimuthElevationOrientationValid)
  return targetazimuthelevationorientationvalid_;
}
 void GroundTargetLocationPBMsg::set_targetazimuthelevationorientationvalid(bool value) {
  set_has_targetazimuthelevationorientationvalid();
  targetazimuthelevationorientationvalid_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GroundTargetLocationPBMsg.TargetAzimuthElevationOrientationValid)
}

// repeated double TargetCovarianceMatrix = 11;
int GroundTargetLocationPBMsg::targetcovariancematrix_size() const {
  return targetcovariancematrix_.size();
}
void GroundTargetLocationPBMsg::clear_targetcovariancematrix() {
  targetcovariancematrix_.Clear();
}
 double GroundTargetLocationPBMsg::targetcovariancematrix(int index) const {
  // @@protoc_insertion_point(field_get:vision_messages.GroundTargetLocationPBMsg.TargetCovarianceMatrix)
  return targetcovariancematrix_.Get(index);
}
 void GroundTargetLocationPBMsg::set_targetcovariancematrix(int index, double value) {
  targetcovariancematrix_.Set(index, value);
  // @@protoc_insertion_point(field_set:vision_messages.GroundTargetLocationPBMsg.TargetCovarianceMatrix)
}
 void GroundTargetLocationPBMsg::add_targetcovariancematrix(double value) {
  targetcovariancematrix_.Add(value);
  // @@protoc_insertion_point(field_add:vision_messages.GroundTargetLocationPBMsg.TargetCovarianceMatrix)
}
 const ::google::protobuf::RepeatedField< double >&
GroundTargetLocationPBMsg::targetcovariancematrix() const {
  // @@protoc_insertion_point(field_list:vision_messages.GroundTargetLocationPBMsg.TargetCovarianceMatrix)
  return targetcovariancematrix_;
}
 ::google::protobuf::RepeatedField< double >*
GroundTargetLocationPBMsg::mutable_targetcovariancematrix() {
  // @@protoc_insertion_point(field_mutable_list:vision_messages.GroundTargetLocationPBMsg.TargetCovarianceMatrix)
  return &targetcovariancematrix_;
}

// optional bool TargetCovarianceValid = 12;
bool GroundTargetLocationPBMsg::has_targetcovariancevalid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void GroundTargetLocationPBMsg::set_has_targetcovariancevalid() {
  _has_bits_[0] |= 0x00000800u;
}
void GroundTargetLocationPBMsg::clear_has_targetcovariancevalid() {
  _has_bits_[0] &= ~0x00000800u;
}
void GroundTargetLocationPBMsg::clear_targetcovariancevalid() {
  targetcovariancevalid_ = false;
  clear_has_targetcovariancevalid();
}
 bool GroundTargetLocationPBMsg::targetcovariancevalid() const {
  // @@protoc_insertion_point(field_get:vision_messages.GroundTargetLocationPBMsg.TargetCovarianceValid)
  return targetcovariancevalid_;
}
 void GroundTargetLocationPBMsg::set_targetcovariancevalid(bool value) {
  set_has_targetcovariancevalid();
  targetcovariancevalid_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GroundTargetLocationPBMsg.TargetCovarianceValid)
}

// optional int32 TargetPixelLocation_x = 13;
bool GroundTargetLocationPBMsg::has_targetpixellocation_x() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void GroundTargetLocationPBMsg::set_has_targetpixellocation_x() {
  _has_bits_[0] |= 0x00001000u;
}
void GroundTargetLocationPBMsg::clear_has_targetpixellocation_x() {
  _has_bits_[0] &= ~0x00001000u;
}
void GroundTargetLocationPBMsg::clear_targetpixellocation_x() {
  targetpixellocation_x_ = 0;
  clear_has_targetpixellocation_x();
}
 ::google::protobuf::int32 GroundTargetLocationPBMsg::targetpixellocation_x() const {
  // @@protoc_insertion_point(field_get:vision_messages.GroundTargetLocationPBMsg.TargetPixelLocation_x)
  return targetpixellocation_x_;
}
 void GroundTargetLocationPBMsg::set_targetpixellocation_x(::google::protobuf::int32 value) {
  set_has_targetpixellocation_x();
  targetpixellocation_x_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GroundTargetLocationPBMsg.TargetPixelLocation_x)
}

// optional int32 TargetPixelLocation_y = 14;
bool GroundTargetLocationPBMsg::has_targetpixellocation_y() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void GroundTargetLocationPBMsg::set_has_targetpixellocation_y() {
  _has_bits_[0] |= 0x00002000u;
}
void GroundTargetLocationPBMsg::clear_has_targetpixellocation_y() {
  _has_bits_[0] &= ~0x00002000u;
}
void GroundTargetLocationPBMsg::clear_targetpixellocation_y() {
  targetpixellocation_y_ = 0;
  clear_has_targetpixellocation_y();
}
 ::google::protobuf::int32 GroundTargetLocationPBMsg::targetpixellocation_y() const {
  // @@protoc_insertion_point(field_get:vision_messages.GroundTargetLocationPBMsg.TargetPixelLocation_y)
  return targetpixellocation_y_;
}
 void GroundTargetLocationPBMsg::set_targetpixellocation_y(::google::protobuf::int32 value) {
  set_has_targetpixellocation_y();
  targetpixellocation_y_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GroundTargetLocationPBMsg.TargetPixelLocation_y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageProcTargetInfoResultsPBMsg::kImageLocationFieldNumber;
const int ImageProcTargetInfoResultsPBMsg::kVehicleInertialStatesFieldNumber;
const int ImageProcTargetInfoResultsPBMsg::kTargetLocationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageProcTargetInfoResultsPBMsg::ImageProcTargetInfoResultsPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.ImageProcTargetInfoResultsPBMsg)
}

void ImageProcTargetInfoResultsPBMsg::InitAsDefaultInstance() {
  imagelocation_ = const_cast< ::vision_messages::ImageLocationPBMsg*>(&::vision_messages::ImageLocationPBMsg::default_instance());
  vehicleinertialstates_ = const_cast< ::vision_messages::VehicleInertialStatePBMsg*>(&::vision_messages::VehicleInertialStatePBMsg::default_instance());
}

ImageProcTargetInfoResultsPBMsg::ImageProcTargetInfoResultsPBMsg(const ImageProcTargetInfoResultsPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.ImageProcTargetInfoResultsPBMsg)
}

void ImageProcTargetInfoResultsPBMsg::SharedCtor() {
  _cached_size_ = 0;
  imagelocation_ = NULL;
  vehicleinertialstates_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageProcTargetInfoResultsPBMsg::~ImageProcTargetInfoResultsPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.ImageProcTargetInfoResultsPBMsg)
  SharedDtor();
}

void ImageProcTargetInfoResultsPBMsg::SharedDtor() {
  if (this != default_instance_) {
    delete imagelocation_;
    delete vehicleinertialstates_;
  }
}

void ImageProcTargetInfoResultsPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageProcTargetInfoResultsPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageProcTargetInfoResultsPBMsg_descriptor_;
}

const ImageProcTargetInfoResultsPBMsg& ImageProcTargetInfoResultsPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

ImageProcTargetInfoResultsPBMsg* ImageProcTargetInfoResultsPBMsg::default_instance_ = NULL;

ImageProcTargetInfoResultsPBMsg* ImageProcTargetInfoResultsPBMsg::New(::google::protobuf::Arena* arena) const {
  ImageProcTargetInfoResultsPBMsg* n = new ImageProcTargetInfoResultsPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageProcTargetInfoResultsPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.ImageProcTargetInfoResultsPBMsg)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_imagelocation()) {
      if (imagelocation_ != NULL) imagelocation_->::vision_messages::ImageLocationPBMsg::Clear();
    }
    if (has_vehicleinertialstates()) {
      if (vehicleinertialstates_ != NULL) vehicleinertialstates_->::vision_messages::VehicleInertialStatePBMsg::Clear();
    }
  }
  targetlocations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImageProcTargetInfoResultsPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.ImageProcTargetInfoResultsPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vision_messages.ImageLocationPBMsg ImageLocation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagelocation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_VehicleInertialStates;
        break;
      }

      // optional .vision_messages.VehicleInertialStatePBMsg VehicleInertialStates = 2;
      case 2: {
        if (tag == 18) {
         parse_VehicleInertialStates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicleinertialstates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TargetLocations;
        break;
      }

      // repeated .vision_messages.GroundTargetLocationPBMsg TargetLocations = 3;
      case 3: {
        if (tag == 26) {
         parse_TargetLocations:
          DO_(input->IncrementRecursionDepth());
         parse_loop_TargetLocations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_targetlocations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_TargetLocations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.ImageProcTargetInfoResultsPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.ImageProcTargetInfoResultsPBMsg)
  return false;
#undef DO_
}

void ImageProcTargetInfoResultsPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.ImageProcTargetInfoResultsPBMsg)
  // optional .vision_messages.ImageLocationPBMsg ImageLocation = 1;
  if (has_imagelocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->imagelocation_, output);
  }

  // optional .vision_messages.VehicleInertialStatePBMsg VehicleInertialStates = 2;
  if (has_vehicleinertialstates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->vehicleinertialstates_, output);
  }

  // repeated .vision_messages.GroundTargetLocationPBMsg TargetLocations = 3;
  for (unsigned int i = 0, n = this->targetlocations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->targetlocations(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.ImageProcTargetInfoResultsPBMsg)
}

::google::protobuf::uint8* ImageProcTargetInfoResultsPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.ImageProcTargetInfoResultsPBMsg)
  // optional .vision_messages.ImageLocationPBMsg ImageLocation = 1;
  if (has_imagelocation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->imagelocation_, false, target);
  }

  // optional .vision_messages.VehicleInertialStatePBMsg VehicleInertialStates = 2;
  if (has_vehicleinertialstates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->vehicleinertialstates_, false, target);
  }

  // repeated .vision_messages.GroundTargetLocationPBMsg TargetLocations = 3;
  for (unsigned int i = 0, n = this->targetlocations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->targetlocations(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.ImageProcTargetInfoResultsPBMsg)
  return target;
}

int ImageProcTargetInfoResultsPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.ImageProcTargetInfoResultsPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .vision_messages.ImageLocationPBMsg ImageLocation = 1;
    if (has_imagelocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->imagelocation_);
    }

    // optional .vision_messages.VehicleInertialStatePBMsg VehicleInertialStates = 2;
    if (has_vehicleinertialstates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicleinertialstates_);
    }

  }
  // repeated .vision_messages.GroundTargetLocationPBMsg TargetLocations = 3;
  total_size += 1 * this->targetlocations_size();
  for (int i = 0; i < this->targetlocations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targetlocations(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageProcTargetInfoResultsPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.ImageProcTargetInfoResultsPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImageProcTargetInfoResultsPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageProcTargetInfoResultsPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.ImageProcTargetInfoResultsPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.ImageProcTargetInfoResultsPBMsg)
    MergeFrom(*source);
  }
}

void ImageProcTargetInfoResultsPBMsg::MergeFrom(const ImageProcTargetInfoResultsPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.ImageProcTargetInfoResultsPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  targetlocations_.MergeFrom(from.targetlocations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imagelocation()) {
      mutable_imagelocation()->::vision_messages::ImageLocationPBMsg::MergeFrom(from.imagelocation());
    }
    if (from.has_vehicleinertialstates()) {
      mutable_vehicleinertialstates()->::vision_messages::VehicleInertialStatePBMsg::MergeFrom(from.vehicleinertialstates());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ImageProcTargetInfoResultsPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.ImageProcTargetInfoResultsPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageProcTargetInfoResultsPBMsg::CopyFrom(const ImageProcTargetInfoResultsPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.ImageProcTargetInfoResultsPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageProcTargetInfoResultsPBMsg::IsInitialized() const {

  return true;
}

void ImageProcTargetInfoResultsPBMsg::Swap(ImageProcTargetInfoResultsPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageProcTargetInfoResultsPBMsg::InternalSwap(ImageProcTargetInfoResultsPBMsg* other) {
  std::swap(imagelocation_, other->imagelocation_);
  std::swap(vehicleinertialstates_, other->vehicleinertialstates_);
  targetlocations_.UnsafeArenaSwap(&other->targetlocations_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageProcTargetInfoResultsPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageProcTargetInfoResultsPBMsg_descriptor_;
  metadata.reflection = ImageProcTargetInfoResultsPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageProcTargetInfoResultsPBMsg

// optional .vision_messages.ImageLocationPBMsg ImageLocation = 1;
bool ImageProcTargetInfoResultsPBMsg::has_imagelocation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageProcTargetInfoResultsPBMsg::set_has_imagelocation() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageProcTargetInfoResultsPBMsg::clear_has_imagelocation() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageProcTargetInfoResultsPBMsg::clear_imagelocation() {
  if (imagelocation_ != NULL) imagelocation_->::vision_messages::ImageLocationPBMsg::Clear();
  clear_has_imagelocation();
}
const ::vision_messages::ImageLocationPBMsg& ImageProcTargetInfoResultsPBMsg::imagelocation() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageProcTargetInfoResultsPBMsg.ImageLocation)
  return imagelocation_ != NULL ? *imagelocation_ : *default_instance_->imagelocation_;
}
::vision_messages::ImageLocationPBMsg* ImageProcTargetInfoResultsPBMsg::mutable_imagelocation() {
  set_has_imagelocation();
  if (imagelocation_ == NULL) {
    imagelocation_ = new ::vision_messages::ImageLocationPBMsg;
  }
  // @@protoc_insertion_point(field_mutable:vision_messages.ImageProcTargetInfoResultsPBMsg.ImageLocation)
  return imagelocation_;
}
::vision_messages::ImageLocationPBMsg* ImageProcTargetInfoResultsPBMsg::release_imagelocation() {
  // @@protoc_insertion_point(field_release:vision_messages.ImageProcTargetInfoResultsPBMsg.ImageLocation)
  clear_has_imagelocation();
  ::vision_messages::ImageLocationPBMsg* temp = imagelocation_;
  imagelocation_ = NULL;
  return temp;
}
void ImageProcTargetInfoResultsPBMsg::set_allocated_imagelocation(::vision_messages::ImageLocationPBMsg* imagelocation) {
  delete imagelocation_;
  imagelocation_ = imagelocation;
  if (imagelocation) {
    set_has_imagelocation();
  } else {
    clear_has_imagelocation();
  }
  // @@protoc_insertion_point(field_set_allocated:vision_messages.ImageProcTargetInfoResultsPBMsg.ImageLocation)
}

// optional .vision_messages.VehicleInertialStatePBMsg VehicleInertialStates = 2;
bool ImageProcTargetInfoResultsPBMsg::has_vehicleinertialstates() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageProcTargetInfoResultsPBMsg::set_has_vehicleinertialstates() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageProcTargetInfoResultsPBMsg::clear_has_vehicleinertialstates() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageProcTargetInfoResultsPBMsg::clear_vehicleinertialstates() {
  if (vehicleinertialstates_ != NULL) vehicleinertialstates_->::vision_messages::VehicleInertialStatePBMsg::Clear();
  clear_has_vehicleinertialstates();
}
const ::vision_messages::VehicleInertialStatePBMsg& ImageProcTargetInfoResultsPBMsg::vehicleinertialstates() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageProcTargetInfoResultsPBMsg.VehicleInertialStates)
  return vehicleinertialstates_ != NULL ? *vehicleinertialstates_ : *default_instance_->vehicleinertialstates_;
}
::vision_messages::VehicleInertialStatePBMsg* ImageProcTargetInfoResultsPBMsg::mutable_vehicleinertialstates() {
  set_has_vehicleinertialstates();
  if (vehicleinertialstates_ == NULL) {
    vehicleinertialstates_ = new ::vision_messages::VehicleInertialStatePBMsg;
  }
  // @@protoc_insertion_point(field_mutable:vision_messages.ImageProcTargetInfoResultsPBMsg.VehicleInertialStates)
  return vehicleinertialstates_;
}
::vision_messages::VehicleInertialStatePBMsg* ImageProcTargetInfoResultsPBMsg::release_vehicleinertialstates() {
  // @@protoc_insertion_point(field_release:vision_messages.ImageProcTargetInfoResultsPBMsg.VehicleInertialStates)
  clear_has_vehicleinertialstates();
  ::vision_messages::VehicleInertialStatePBMsg* temp = vehicleinertialstates_;
  vehicleinertialstates_ = NULL;
  return temp;
}
void ImageProcTargetInfoResultsPBMsg::set_allocated_vehicleinertialstates(::vision_messages::VehicleInertialStatePBMsg* vehicleinertialstates) {
  delete vehicleinertialstates_;
  vehicleinertialstates_ = vehicleinertialstates;
  if (vehicleinertialstates) {
    set_has_vehicleinertialstates();
  } else {
    clear_has_vehicleinertialstates();
  }
  // @@protoc_insertion_point(field_set_allocated:vision_messages.ImageProcTargetInfoResultsPBMsg.VehicleInertialStates)
}

// repeated .vision_messages.GroundTargetLocationPBMsg TargetLocations = 3;
int ImageProcTargetInfoResultsPBMsg::targetlocations_size() const {
  return targetlocations_.size();
}
void ImageProcTargetInfoResultsPBMsg::clear_targetlocations() {
  targetlocations_.Clear();
}
const ::vision_messages::GroundTargetLocationPBMsg& ImageProcTargetInfoResultsPBMsg::targetlocations(int index) const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageProcTargetInfoResultsPBMsg.TargetLocations)
  return targetlocations_.Get(index);
}
::vision_messages::GroundTargetLocationPBMsg* ImageProcTargetInfoResultsPBMsg::mutable_targetlocations(int index) {
  // @@protoc_insertion_point(field_mutable:vision_messages.ImageProcTargetInfoResultsPBMsg.TargetLocations)
  return targetlocations_.Mutable(index);
}
::vision_messages::GroundTargetLocationPBMsg* ImageProcTargetInfoResultsPBMsg::add_targetlocations() {
  // @@protoc_insertion_point(field_add:vision_messages.ImageProcTargetInfoResultsPBMsg.TargetLocations)
  return targetlocations_.Add();
}
::google::protobuf::RepeatedPtrField< ::vision_messages::GroundTargetLocationPBMsg >*
ImageProcTargetInfoResultsPBMsg::mutable_targetlocations() {
  // @@protoc_insertion_point(field_mutable_list:vision_messages.ImageProcTargetInfoResultsPBMsg.TargetLocations)
  return &targetlocations_;
}
const ::google::protobuf::RepeatedPtrField< ::vision_messages::GroundTargetLocationPBMsg >&
ImageProcTargetInfoResultsPBMsg::targetlocations() const {
  // @@protoc_insertion_point(field_list:vision_messages.ImageProcTargetInfoResultsPBMsg.TargetLocations)
  return targetlocations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetParametersPBMsg::kTargetTypeCodeFieldNumber;
const int TargetParametersPBMsg::kIsTaticalTargetFieldNumber;
const int TargetParametersPBMsg::kTargetSizeOrWidthFieldNumber;
const int TargetParametersPBMsg::kTargetPerimeterOrLenghtFieldNumber;
const int TargetParametersPBMsg::kTargetIRHeatGradientFieldNumber;
const int TargetParametersPBMsg::kTargetIRSizeFieldNumber;
const int TargetParametersPBMsg::kTargetRGBColorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetParametersPBMsg::TargetParametersPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.TargetParametersPBMsg)
}

void TargetParametersPBMsg::InitAsDefaultInstance() {
}

TargetParametersPBMsg::TargetParametersPBMsg(const TargetParametersPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.TargetParametersPBMsg)
}

void TargetParametersPBMsg::SharedCtor() {
  _cached_size_ = 0;
  targettypecode_ = 0u;
  istaticaltarget_ = false;
  targetsizeorwidth_ = 0;
  targetperimeterorlenght_ = 0;
  targetirheatgradient_ = 0;
  targetirsize_ = 0;
  targetrgbcolorcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetParametersPBMsg::~TargetParametersPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.TargetParametersPBMsg)
  SharedDtor();
}

void TargetParametersPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TargetParametersPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetParametersPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetParametersPBMsg_descriptor_;
}

const TargetParametersPBMsg& TargetParametersPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

TargetParametersPBMsg* TargetParametersPBMsg::default_instance_ = NULL;

TargetParametersPBMsg* TargetParametersPBMsg::New(::google::protobuf::Arena* arena) const {
  TargetParametersPBMsg* n = new TargetParametersPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetParametersPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.TargetParametersPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TargetParametersPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TargetParametersPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(targettypecode_, targetrgbcolorcode_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TargetParametersPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.TargetParametersPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TargetTypeCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targettypecode_)));
          set_has_targettypecode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsTaticalTarget;
        break;
      }

      // optional bool IsTaticalTarget = 2;
      case 2: {
        if (tag == 16) {
         parse_IsTaticalTarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istaticaltarget_)));
          set_has_istaticaltarget();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_TargetSizeOrWidth;
        break;
      }

      // optional double TargetSizeOrWidth = 3;
      case 3: {
        if (tag == 25) {
         parse_TargetSizeOrWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &targetsizeorwidth_)));
          set_has_targetsizeorwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_TargetPerimeterOrLenght;
        break;
      }

      // optional double TargetPerimeterOrLenght = 4;
      case 4: {
        if (tag == 33) {
         parse_TargetPerimeterOrLenght:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &targetperimeterorlenght_)));
          set_has_targetperimeterorlenght();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_TargetIRHeatGradient;
        break;
      }

      // optional double TargetIRHeatGradient = 5;
      case 5: {
        if (tag == 41) {
         parse_TargetIRHeatGradient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &targetirheatgradient_)));
          set_has_targetirheatgradient();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_TargetIRSize;
        break;
      }

      // optional double TargetIRSize = 6;
      case 6: {
        if (tag == 49) {
         parse_TargetIRSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &targetirsize_)));
          set_has_targetirsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_TargetRGBColorCode;
        break;
      }

      // optional uint32 TargetRGBColorCode = 7;
      case 7: {
        if (tag == 56) {
         parse_TargetRGBColorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetrgbcolorcode_)));
          set_has_targetrgbcolorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.TargetParametersPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.TargetParametersPBMsg)
  return false;
#undef DO_
}

void TargetParametersPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.TargetParametersPBMsg)
  // optional uint32 TargetTypeCode = 1;
  if (has_targettypecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targettypecode(), output);
  }

  // optional bool IsTaticalTarget = 2;
  if (has_istaticaltarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->istaticaltarget(), output);
  }

  // optional double TargetSizeOrWidth = 3;
  if (has_targetsizeorwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->targetsizeorwidth(), output);
  }

  // optional double TargetPerimeterOrLenght = 4;
  if (has_targetperimeterorlenght()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->targetperimeterorlenght(), output);
  }

  // optional double TargetIRHeatGradient = 5;
  if (has_targetirheatgradient()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->targetirheatgradient(), output);
  }

  // optional double TargetIRSize = 6;
  if (has_targetirsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->targetirsize(), output);
  }

  // optional uint32 TargetRGBColorCode = 7;
  if (has_targetrgbcolorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->targetrgbcolorcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.TargetParametersPBMsg)
}

::google::protobuf::uint8* TargetParametersPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.TargetParametersPBMsg)
  // optional uint32 TargetTypeCode = 1;
  if (has_targettypecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targettypecode(), target);
  }

  // optional bool IsTaticalTarget = 2;
  if (has_istaticaltarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istaticaltarget(), target);
  }

  // optional double TargetSizeOrWidth = 3;
  if (has_targetsizeorwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->targetsizeorwidth(), target);
  }

  // optional double TargetPerimeterOrLenght = 4;
  if (has_targetperimeterorlenght()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->targetperimeterorlenght(), target);
  }

  // optional double TargetIRHeatGradient = 5;
  if (has_targetirheatgradient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->targetirheatgradient(), target);
  }

  // optional double TargetIRSize = 6;
  if (has_targetirsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->targetirsize(), target);
  }

  // optional uint32 TargetRGBColorCode = 7;
  if (has_targetrgbcolorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->targetrgbcolorcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.TargetParametersPBMsg)
  return target;
}

int TargetParametersPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.TargetParametersPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 TargetTypeCode = 1;
    if (has_targettypecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targettypecode());
    }

    // optional bool IsTaticalTarget = 2;
    if (has_istaticaltarget()) {
      total_size += 1 + 1;
    }

    // optional double TargetSizeOrWidth = 3;
    if (has_targetsizeorwidth()) {
      total_size += 1 + 8;
    }

    // optional double TargetPerimeterOrLenght = 4;
    if (has_targetperimeterorlenght()) {
      total_size += 1 + 8;
    }

    // optional double TargetIRHeatGradient = 5;
    if (has_targetirheatgradient()) {
      total_size += 1 + 8;
    }

    // optional double TargetIRSize = 6;
    if (has_targetirsize()) {
      total_size += 1 + 8;
    }

    // optional uint32 TargetRGBColorCode = 7;
    if (has_targetrgbcolorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetrgbcolorcode());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetParametersPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.TargetParametersPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TargetParametersPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetParametersPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.TargetParametersPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.TargetParametersPBMsg)
    MergeFrom(*source);
  }
}

void TargetParametersPBMsg::MergeFrom(const TargetParametersPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.TargetParametersPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targettypecode()) {
      set_targettypecode(from.targettypecode());
    }
    if (from.has_istaticaltarget()) {
      set_istaticaltarget(from.istaticaltarget());
    }
    if (from.has_targetsizeorwidth()) {
      set_targetsizeorwidth(from.targetsizeorwidth());
    }
    if (from.has_targetperimeterorlenght()) {
      set_targetperimeterorlenght(from.targetperimeterorlenght());
    }
    if (from.has_targetirheatgradient()) {
      set_targetirheatgradient(from.targetirheatgradient());
    }
    if (from.has_targetirsize()) {
      set_targetirsize(from.targetirsize());
    }
    if (from.has_targetrgbcolorcode()) {
      set_targetrgbcolorcode(from.targetrgbcolorcode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TargetParametersPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.TargetParametersPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetParametersPBMsg::CopyFrom(const TargetParametersPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.TargetParametersPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetParametersPBMsg::IsInitialized() const {

  return true;
}

void TargetParametersPBMsg::Swap(TargetParametersPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetParametersPBMsg::InternalSwap(TargetParametersPBMsg* other) {
  std::swap(targettypecode_, other->targettypecode_);
  std::swap(istaticaltarget_, other->istaticaltarget_);
  std::swap(targetsizeorwidth_, other->targetsizeorwidth_);
  std::swap(targetperimeterorlenght_, other->targetperimeterorlenght_);
  std::swap(targetirheatgradient_, other->targetirheatgradient_);
  std::swap(targetirsize_, other->targetirsize_);
  std::swap(targetrgbcolorcode_, other->targetrgbcolorcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TargetParametersPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetParametersPBMsg_descriptor_;
  metadata.reflection = TargetParametersPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TargetParametersPBMsg

// optional uint32 TargetTypeCode = 1;
bool TargetParametersPBMsg::has_targettypecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TargetParametersPBMsg::set_has_targettypecode() {
  _has_bits_[0] |= 0x00000001u;
}
void TargetParametersPBMsg::clear_has_targettypecode() {
  _has_bits_[0] &= ~0x00000001u;
}
void TargetParametersPBMsg::clear_targettypecode() {
  targettypecode_ = 0u;
  clear_has_targettypecode();
}
 ::google::protobuf::uint32 TargetParametersPBMsg::targettypecode() const {
  // @@protoc_insertion_point(field_get:vision_messages.TargetParametersPBMsg.TargetTypeCode)
  return targettypecode_;
}
 void TargetParametersPBMsg::set_targettypecode(::google::protobuf::uint32 value) {
  set_has_targettypecode();
  targettypecode_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.TargetParametersPBMsg.TargetTypeCode)
}

// optional bool IsTaticalTarget = 2;
bool TargetParametersPBMsg::has_istaticaltarget() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TargetParametersPBMsg::set_has_istaticaltarget() {
  _has_bits_[0] |= 0x00000002u;
}
void TargetParametersPBMsg::clear_has_istaticaltarget() {
  _has_bits_[0] &= ~0x00000002u;
}
void TargetParametersPBMsg::clear_istaticaltarget() {
  istaticaltarget_ = false;
  clear_has_istaticaltarget();
}
 bool TargetParametersPBMsg::istaticaltarget() const {
  // @@protoc_insertion_point(field_get:vision_messages.TargetParametersPBMsg.IsTaticalTarget)
  return istaticaltarget_;
}
 void TargetParametersPBMsg::set_istaticaltarget(bool value) {
  set_has_istaticaltarget();
  istaticaltarget_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.TargetParametersPBMsg.IsTaticalTarget)
}

// optional double TargetSizeOrWidth = 3;
bool TargetParametersPBMsg::has_targetsizeorwidth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TargetParametersPBMsg::set_has_targetsizeorwidth() {
  _has_bits_[0] |= 0x00000004u;
}
void TargetParametersPBMsg::clear_has_targetsizeorwidth() {
  _has_bits_[0] &= ~0x00000004u;
}
void TargetParametersPBMsg::clear_targetsizeorwidth() {
  targetsizeorwidth_ = 0;
  clear_has_targetsizeorwidth();
}
 double TargetParametersPBMsg::targetsizeorwidth() const {
  // @@protoc_insertion_point(field_get:vision_messages.TargetParametersPBMsg.TargetSizeOrWidth)
  return targetsizeorwidth_;
}
 void TargetParametersPBMsg::set_targetsizeorwidth(double value) {
  set_has_targetsizeorwidth();
  targetsizeorwidth_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.TargetParametersPBMsg.TargetSizeOrWidth)
}

// optional double TargetPerimeterOrLenght = 4;
bool TargetParametersPBMsg::has_targetperimeterorlenght() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TargetParametersPBMsg::set_has_targetperimeterorlenght() {
  _has_bits_[0] |= 0x00000008u;
}
void TargetParametersPBMsg::clear_has_targetperimeterorlenght() {
  _has_bits_[0] &= ~0x00000008u;
}
void TargetParametersPBMsg::clear_targetperimeterorlenght() {
  targetperimeterorlenght_ = 0;
  clear_has_targetperimeterorlenght();
}
 double TargetParametersPBMsg::targetperimeterorlenght() const {
  // @@protoc_insertion_point(field_get:vision_messages.TargetParametersPBMsg.TargetPerimeterOrLenght)
  return targetperimeterorlenght_;
}
 void TargetParametersPBMsg::set_targetperimeterorlenght(double value) {
  set_has_targetperimeterorlenght();
  targetperimeterorlenght_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.TargetParametersPBMsg.TargetPerimeterOrLenght)
}

// optional double TargetIRHeatGradient = 5;
bool TargetParametersPBMsg::has_targetirheatgradient() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TargetParametersPBMsg::set_has_targetirheatgradient() {
  _has_bits_[0] |= 0x00000010u;
}
void TargetParametersPBMsg::clear_has_targetirheatgradient() {
  _has_bits_[0] &= ~0x00000010u;
}
void TargetParametersPBMsg::clear_targetirheatgradient() {
  targetirheatgradient_ = 0;
  clear_has_targetirheatgradient();
}
 double TargetParametersPBMsg::targetirheatgradient() const {
  // @@protoc_insertion_point(field_get:vision_messages.TargetParametersPBMsg.TargetIRHeatGradient)
  return targetirheatgradient_;
}
 void TargetParametersPBMsg::set_targetirheatgradient(double value) {
  set_has_targetirheatgradient();
  targetirheatgradient_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.TargetParametersPBMsg.TargetIRHeatGradient)
}

// optional double TargetIRSize = 6;
bool TargetParametersPBMsg::has_targetirsize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TargetParametersPBMsg::set_has_targetirsize() {
  _has_bits_[0] |= 0x00000020u;
}
void TargetParametersPBMsg::clear_has_targetirsize() {
  _has_bits_[0] &= ~0x00000020u;
}
void TargetParametersPBMsg::clear_targetirsize() {
  targetirsize_ = 0;
  clear_has_targetirsize();
}
 double TargetParametersPBMsg::targetirsize() const {
  // @@protoc_insertion_point(field_get:vision_messages.TargetParametersPBMsg.TargetIRSize)
  return targetirsize_;
}
 void TargetParametersPBMsg::set_targetirsize(double value) {
  set_has_targetirsize();
  targetirsize_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.TargetParametersPBMsg.TargetIRSize)
}

// optional uint32 TargetRGBColorCode = 7;
bool TargetParametersPBMsg::has_targetrgbcolorcode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TargetParametersPBMsg::set_has_targetrgbcolorcode() {
  _has_bits_[0] |= 0x00000040u;
}
void TargetParametersPBMsg::clear_has_targetrgbcolorcode() {
  _has_bits_[0] &= ~0x00000040u;
}
void TargetParametersPBMsg::clear_targetrgbcolorcode() {
  targetrgbcolorcode_ = 0u;
  clear_has_targetrgbcolorcode();
}
 ::google::protobuf::uint32 TargetParametersPBMsg::targetrgbcolorcode() const {
  // @@protoc_insertion_point(field_get:vision_messages.TargetParametersPBMsg.TargetRGBColorCode)
  return targetrgbcolorcode_;
}
 void TargetParametersPBMsg::set_targetrgbcolorcode(::google::protobuf::uint32 value) {
  set_has_targetrgbcolorcode();
  targetrgbcolorcode_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.TargetParametersPBMsg.TargetRGBColorCode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeSyncPBMsg::kTimeSyncOffsetSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeSyncPBMsg::TimeSyncPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.TimeSyncPBMsg)
}

void TimeSyncPBMsg::InitAsDefaultInstance() {
}

TimeSyncPBMsg::TimeSyncPBMsg(const TimeSyncPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.TimeSyncPBMsg)
}

void TimeSyncPBMsg::SharedCtor() {
  _cached_size_ = 0;
  timesyncoffsetseconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeSyncPBMsg::~TimeSyncPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.TimeSyncPBMsg)
  SharedDtor();
}

void TimeSyncPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeSyncPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSyncPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSyncPBMsg_descriptor_;
}

const TimeSyncPBMsg& TimeSyncPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

TimeSyncPBMsg* TimeSyncPBMsg::default_instance_ = NULL;

TimeSyncPBMsg* TimeSyncPBMsg::New(::google::protobuf::Arena* arena) const {
  TimeSyncPBMsg* n = new TimeSyncPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeSyncPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.TimeSyncPBMsg)
  timesyncoffsetseconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TimeSyncPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.TimeSyncPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double TimeSyncOffsetSeconds = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timesyncoffsetseconds_)));
          set_has_timesyncoffsetseconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.TimeSyncPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.TimeSyncPBMsg)
  return false;
#undef DO_
}

void TimeSyncPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.TimeSyncPBMsg)
  // optional double TimeSyncOffsetSeconds = 1;
  if (has_timesyncoffsetseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timesyncoffsetseconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.TimeSyncPBMsg)
}

::google::protobuf::uint8* TimeSyncPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.TimeSyncPBMsg)
  // optional double TimeSyncOffsetSeconds = 1;
  if (has_timesyncoffsetseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timesyncoffsetseconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.TimeSyncPBMsg)
  return target;
}

int TimeSyncPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.TimeSyncPBMsg)
  int total_size = 0;

  // optional double TimeSyncOffsetSeconds = 1;
  if (has_timesyncoffsetseconds()) {
    total_size += 1 + 8;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSyncPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.TimeSyncPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TimeSyncPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeSyncPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.TimeSyncPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.TimeSyncPBMsg)
    MergeFrom(*source);
  }
}

void TimeSyncPBMsg::MergeFrom(const TimeSyncPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.TimeSyncPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timesyncoffsetseconds()) {
      set_timesyncoffsetseconds(from.timesyncoffsetseconds());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TimeSyncPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.TimeSyncPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSyncPBMsg::CopyFrom(const TimeSyncPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.TimeSyncPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSyncPBMsg::IsInitialized() const {

  return true;
}

void TimeSyncPBMsg::Swap(TimeSyncPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeSyncPBMsg::InternalSwap(TimeSyncPBMsg* other) {
  std::swap(timesyncoffsetseconds_, other->timesyncoffsetseconds_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeSyncPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeSyncPBMsg_descriptor_;
  metadata.reflection = TimeSyncPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeSyncPBMsg

// optional double TimeSyncOffsetSeconds = 1;
bool TimeSyncPBMsg::has_timesyncoffsetseconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimeSyncPBMsg::set_has_timesyncoffsetseconds() {
  _has_bits_[0] |= 0x00000001u;
}
void TimeSyncPBMsg::clear_has_timesyncoffsetseconds() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimeSyncPBMsg::clear_timesyncoffsetseconds() {
  timesyncoffsetseconds_ = 0;
  clear_has_timesyncoffsetseconds();
}
 double TimeSyncPBMsg::timesyncoffsetseconds() const {
  // @@protoc_insertion_point(field_get:vision_messages.TimeSyncPBMsg.TimeSyncOffsetSeconds)
  return timesyncoffsetseconds_;
}
 void TimeSyncPBMsg::set_timesyncoffsetseconds(double value) {
  set_has_timesyncoffsetseconds();
  timesyncoffsetseconds_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.TimeSyncPBMsg.TimeSyncOffsetSeconds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* GeoCoordinateSystemSetupPBMsg_GeoCoordinateSystemConversionType_e_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoCoordinateSystemSetupPBMsg_GeoCoordinateSystemConversionType_e_descriptor_;
}
bool GeoCoordinateSystemSetupPBMsg_GeoCoordinateSystemConversionType_e_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GeoCoordinateSystemSetupPBMsg_GeoCoordinateSystemConversionType_e GeoCoordinateSystemSetupPBMsg::Linear;
const GeoCoordinateSystemSetupPBMsg_GeoCoordinateSystemConversionType_e GeoCoordinateSystemSetupPBMsg::WGS84_Relative;
const GeoCoordinateSystemSetupPBMsg_GeoCoordinateSystemConversionType_e GeoCoordinateSystemSetupPBMsg::WGS84_Map;
const GeoCoordinateSystemSetupPBMsg_GeoCoordinateSystemConversionType_e GeoCoordinateSystemSetupPBMsg::GeoCoordinateSystemConversionType_e_MIN;
const GeoCoordinateSystemSetupPBMsg_GeoCoordinateSystemConversionType_e GeoCoordinateSystemSetupPBMsg::GeoCoordinateSystemConversionType_e_MAX;
const int GeoCoordinateSystemSetupPBMsg::GeoCoordinateSystemConversionType_e_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoCoordinateSystemSetupPBMsg::kGeoCoordinateSystemConversionTypeFieldNumber;
const int GeoCoordinateSystemSetupPBMsg::kCenterLatitudeDegreesFieldNumber;
const int GeoCoordinateSystemSetupPBMsg::kCenterLongitudeDegreesFieldNumber;
const int GeoCoordinateSystemSetupPBMsg::kGroundAltitudeMSLFieldNumber;
const int GeoCoordinateSystemSetupPBMsg::kDeltaLatitudeDegreesFieldNumber;
const int GeoCoordinateSystemSetupPBMsg::kDeltaLongitudeDegreesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoCoordinateSystemSetupPBMsg::GeoCoordinateSystemSetupPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.GeoCoordinateSystemSetupPBMsg)
}

void GeoCoordinateSystemSetupPBMsg::InitAsDefaultInstance() {
}

GeoCoordinateSystemSetupPBMsg::GeoCoordinateSystemSetupPBMsg(const GeoCoordinateSystemSetupPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.GeoCoordinateSystemSetupPBMsg)
}

void GeoCoordinateSystemSetupPBMsg::SharedCtor() {
  _cached_size_ = 0;
  geocoordinatesystemconversiontype_ = 0;
  centerlatitudedegrees_ = 0;
  centerlongitudedegrees_ = 0;
  groundaltitudemsl_ = 0;
  deltalatitudedegrees_ = 0;
  deltalongitudedegrees_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoCoordinateSystemSetupPBMsg::~GeoCoordinateSystemSetupPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.GeoCoordinateSystemSetupPBMsg)
  SharedDtor();
}

void GeoCoordinateSystemSetupPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GeoCoordinateSystemSetupPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoCoordinateSystemSetupPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoCoordinateSystemSetupPBMsg_descriptor_;
}

const GeoCoordinateSystemSetupPBMsg& GeoCoordinateSystemSetupPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

GeoCoordinateSystemSetupPBMsg* GeoCoordinateSystemSetupPBMsg::default_instance_ = NULL;

GeoCoordinateSystemSetupPBMsg* GeoCoordinateSystemSetupPBMsg::New(::google::protobuf::Arena* arena) const {
  GeoCoordinateSystemSetupPBMsg* n = new GeoCoordinateSystemSetupPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeoCoordinateSystemSetupPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.GeoCoordinateSystemSetupPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GeoCoordinateSystemSetupPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GeoCoordinateSystemSetupPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(centerlatitudedegrees_, geocoordinatesystemconversiontype_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GeoCoordinateSystemSetupPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.GeoCoordinateSystemSetupPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vision_messages.GeoCoordinateSystemSetupPBMsg.GeoCoordinateSystemConversionType_e GeoCoordinateSystemConversionType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vision_messages::GeoCoordinateSystemSetupPBMsg_GeoCoordinateSystemConversionType_e_IsValid(value)) {
            set_geocoordinatesystemconversiontype(static_cast< ::vision_messages::GeoCoordinateSystemSetupPBMsg_GeoCoordinateSystemConversionType_e >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_CenterLatitudeDegrees;
        break;
      }

      // optional double CenterLatitudeDegrees = 2;
      case 2: {
        if (tag == 17) {
         parse_CenterLatitudeDegrees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerlatitudedegrees_)));
          set_has_centerlatitudedegrees();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_CenterLongitudeDegrees;
        break;
      }

      // optional double CenterLongitudeDegrees = 3;
      case 3: {
        if (tag == 25) {
         parse_CenterLongitudeDegrees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerlongitudedegrees_)));
          set_has_centerlongitudedegrees();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_GroundAltitudeMSL;
        break;
      }

      // optional double GroundAltitudeMSL = 4;
      case 4: {
        if (tag == 33) {
         parse_GroundAltitudeMSL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &groundaltitudemsl_)));
          set_has_groundaltitudemsl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_DeltaLatitudeDegrees;
        break;
      }

      // optional double DeltaLatitudeDegrees = 5;
      case 5: {
        if (tag == 41) {
         parse_DeltaLatitudeDegrees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deltalatitudedegrees_)));
          set_has_deltalatitudedegrees();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_DeltaLongitudeDegrees;
        break;
      }

      // optional double DeltaLongitudeDegrees = 6;
      case 6: {
        if (tag == 49) {
         parse_DeltaLongitudeDegrees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deltalongitudedegrees_)));
          set_has_deltalongitudedegrees();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.GeoCoordinateSystemSetupPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.GeoCoordinateSystemSetupPBMsg)
  return false;
#undef DO_
}

void GeoCoordinateSystemSetupPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.GeoCoordinateSystemSetupPBMsg)
  // optional .vision_messages.GeoCoordinateSystemSetupPBMsg.GeoCoordinateSystemConversionType_e GeoCoordinateSystemConversionType = 1;
  if (has_geocoordinatesystemconversiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->geocoordinatesystemconversiontype(), output);
  }

  // optional double CenterLatitudeDegrees = 2;
  if (has_centerlatitudedegrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->centerlatitudedegrees(), output);
  }

  // optional double CenterLongitudeDegrees = 3;
  if (has_centerlongitudedegrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->centerlongitudedegrees(), output);
  }

  // optional double GroundAltitudeMSL = 4;
  if (has_groundaltitudemsl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->groundaltitudemsl(), output);
  }

  // optional double DeltaLatitudeDegrees = 5;
  if (has_deltalatitudedegrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->deltalatitudedegrees(), output);
  }

  // optional double DeltaLongitudeDegrees = 6;
  if (has_deltalongitudedegrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->deltalongitudedegrees(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.GeoCoordinateSystemSetupPBMsg)
}

::google::protobuf::uint8* GeoCoordinateSystemSetupPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.GeoCoordinateSystemSetupPBMsg)
  // optional .vision_messages.GeoCoordinateSystemSetupPBMsg.GeoCoordinateSystemConversionType_e GeoCoordinateSystemConversionType = 1;
  if (has_geocoordinatesystemconversiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->geocoordinatesystemconversiontype(), target);
  }

  // optional double CenterLatitudeDegrees = 2;
  if (has_centerlatitudedegrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->centerlatitudedegrees(), target);
  }

  // optional double CenterLongitudeDegrees = 3;
  if (has_centerlongitudedegrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->centerlongitudedegrees(), target);
  }

  // optional double GroundAltitudeMSL = 4;
  if (has_groundaltitudemsl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->groundaltitudemsl(), target);
  }

  // optional double DeltaLatitudeDegrees = 5;
  if (has_deltalatitudedegrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->deltalatitudedegrees(), target);
  }

  // optional double DeltaLongitudeDegrees = 6;
  if (has_deltalongitudedegrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->deltalongitudedegrees(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.GeoCoordinateSystemSetupPBMsg)
  return target;
}

int GeoCoordinateSystemSetupPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.GeoCoordinateSystemSetupPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional .vision_messages.GeoCoordinateSystemSetupPBMsg.GeoCoordinateSystemConversionType_e GeoCoordinateSystemConversionType = 1;
    if (has_geocoordinatesystemconversiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->geocoordinatesystemconversiontype());
    }

    // optional double CenterLatitudeDegrees = 2;
    if (has_centerlatitudedegrees()) {
      total_size += 1 + 8;
    }

    // optional double CenterLongitudeDegrees = 3;
    if (has_centerlongitudedegrees()) {
      total_size += 1 + 8;
    }

    // optional double GroundAltitudeMSL = 4;
    if (has_groundaltitudemsl()) {
      total_size += 1 + 8;
    }

    // optional double DeltaLatitudeDegrees = 5;
    if (has_deltalatitudedegrees()) {
      total_size += 1 + 8;
    }

    // optional double DeltaLongitudeDegrees = 6;
    if (has_deltalongitudedegrees()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoCoordinateSystemSetupPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.GeoCoordinateSystemSetupPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GeoCoordinateSystemSetupPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GeoCoordinateSystemSetupPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.GeoCoordinateSystemSetupPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.GeoCoordinateSystemSetupPBMsg)
    MergeFrom(*source);
  }
}

void GeoCoordinateSystemSetupPBMsg::MergeFrom(const GeoCoordinateSystemSetupPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.GeoCoordinateSystemSetupPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_geocoordinatesystemconversiontype()) {
      set_geocoordinatesystemconversiontype(from.geocoordinatesystemconversiontype());
    }
    if (from.has_centerlatitudedegrees()) {
      set_centerlatitudedegrees(from.centerlatitudedegrees());
    }
    if (from.has_centerlongitudedegrees()) {
      set_centerlongitudedegrees(from.centerlongitudedegrees());
    }
    if (from.has_groundaltitudemsl()) {
      set_groundaltitudemsl(from.groundaltitudemsl());
    }
    if (from.has_deltalatitudedegrees()) {
      set_deltalatitudedegrees(from.deltalatitudedegrees());
    }
    if (from.has_deltalongitudedegrees()) {
      set_deltalongitudedegrees(from.deltalongitudedegrees());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GeoCoordinateSystemSetupPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.GeoCoordinateSystemSetupPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoCoordinateSystemSetupPBMsg::CopyFrom(const GeoCoordinateSystemSetupPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.GeoCoordinateSystemSetupPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoCoordinateSystemSetupPBMsg::IsInitialized() const {

  return true;
}

void GeoCoordinateSystemSetupPBMsg::Swap(GeoCoordinateSystemSetupPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoCoordinateSystemSetupPBMsg::InternalSwap(GeoCoordinateSystemSetupPBMsg* other) {
  std::swap(geocoordinatesystemconversiontype_, other->geocoordinatesystemconversiontype_);
  std::swap(centerlatitudedegrees_, other->centerlatitudedegrees_);
  std::swap(centerlongitudedegrees_, other->centerlongitudedegrees_);
  std::swap(groundaltitudemsl_, other->groundaltitudemsl_);
  std::swap(deltalatitudedegrees_, other->deltalatitudedegrees_);
  std::swap(deltalongitudedegrees_, other->deltalongitudedegrees_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GeoCoordinateSystemSetupPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeoCoordinateSystemSetupPBMsg_descriptor_;
  metadata.reflection = GeoCoordinateSystemSetupPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeoCoordinateSystemSetupPBMsg

// optional .vision_messages.GeoCoordinateSystemSetupPBMsg.GeoCoordinateSystemConversionType_e GeoCoordinateSystemConversionType = 1;
bool GeoCoordinateSystemSetupPBMsg::has_geocoordinatesystemconversiontype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GeoCoordinateSystemSetupPBMsg::set_has_geocoordinatesystemconversiontype() {
  _has_bits_[0] |= 0x00000001u;
}
void GeoCoordinateSystemSetupPBMsg::clear_has_geocoordinatesystemconversiontype() {
  _has_bits_[0] &= ~0x00000001u;
}
void GeoCoordinateSystemSetupPBMsg::clear_geocoordinatesystemconversiontype() {
  geocoordinatesystemconversiontype_ = 0;
  clear_has_geocoordinatesystemconversiontype();
}
 ::vision_messages::GeoCoordinateSystemSetupPBMsg_GeoCoordinateSystemConversionType_e GeoCoordinateSystemSetupPBMsg::geocoordinatesystemconversiontype() const {
  // @@protoc_insertion_point(field_get:vision_messages.GeoCoordinateSystemSetupPBMsg.GeoCoordinateSystemConversionType)
  return static_cast< ::vision_messages::GeoCoordinateSystemSetupPBMsg_GeoCoordinateSystemConversionType_e >(geocoordinatesystemconversiontype_);
}
 void GeoCoordinateSystemSetupPBMsg::set_geocoordinatesystemconversiontype(::vision_messages::GeoCoordinateSystemSetupPBMsg_GeoCoordinateSystemConversionType_e value) {
  assert(::vision_messages::GeoCoordinateSystemSetupPBMsg_GeoCoordinateSystemConversionType_e_IsValid(value));
  set_has_geocoordinatesystemconversiontype();
  geocoordinatesystemconversiontype_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GeoCoordinateSystemSetupPBMsg.GeoCoordinateSystemConversionType)
}

// optional double CenterLatitudeDegrees = 2;
bool GeoCoordinateSystemSetupPBMsg::has_centerlatitudedegrees() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GeoCoordinateSystemSetupPBMsg::set_has_centerlatitudedegrees() {
  _has_bits_[0] |= 0x00000002u;
}
void GeoCoordinateSystemSetupPBMsg::clear_has_centerlatitudedegrees() {
  _has_bits_[0] &= ~0x00000002u;
}
void GeoCoordinateSystemSetupPBMsg::clear_centerlatitudedegrees() {
  centerlatitudedegrees_ = 0;
  clear_has_centerlatitudedegrees();
}
 double GeoCoordinateSystemSetupPBMsg::centerlatitudedegrees() const {
  // @@protoc_insertion_point(field_get:vision_messages.GeoCoordinateSystemSetupPBMsg.CenterLatitudeDegrees)
  return centerlatitudedegrees_;
}
 void GeoCoordinateSystemSetupPBMsg::set_centerlatitudedegrees(double value) {
  set_has_centerlatitudedegrees();
  centerlatitudedegrees_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GeoCoordinateSystemSetupPBMsg.CenterLatitudeDegrees)
}

// optional double CenterLongitudeDegrees = 3;
bool GeoCoordinateSystemSetupPBMsg::has_centerlongitudedegrees() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GeoCoordinateSystemSetupPBMsg::set_has_centerlongitudedegrees() {
  _has_bits_[0] |= 0x00000004u;
}
void GeoCoordinateSystemSetupPBMsg::clear_has_centerlongitudedegrees() {
  _has_bits_[0] &= ~0x00000004u;
}
void GeoCoordinateSystemSetupPBMsg::clear_centerlongitudedegrees() {
  centerlongitudedegrees_ = 0;
  clear_has_centerlongitudedegrees();
}
 double GeoCoordinateSystemSetupPBMsg::centerlongitudedegrees() const {
  // @@protoc_insertion_point(field_get:vision_messages.GeoCoordinateSystemSetupPBMsg.CenterLongitudeDegrees)
  return centerlongitudedegrees_;
}
 void GeoCoordinateSystemSetupPBMsg::set_centerlongitudedegrees(double value) {
  set_has_centerlongitudedegrees();
  centerlongitudedegrees_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GeoCoordinateSystemSetupPBMsg.CenterLongitudeDegrees)
}

// optional double GroundAltitudeMSL = 4;
bool GeoCoordinateSystemSetupPBMsg::has_groundaltitudemsl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GeoCoordinateSystemSetupPBMsg::set_has_groundaltitudemsl() {
  _has_bits_[0] |= 0x00000008u;
}
void GeoCoordinateSystemSetupPBMsg::clear_has_groundaltitudemsl() {
  _has_bits_[0] &= ~0x00000008u;
}
void GeoCoordinateSystemSetupPBMsg::clear_groundaltitudemsl() {
  groundaltitudemsl_ = 0;
  clear_has_groundaltitudemsl();
}
 double GeoCoordinateSystemSetupPBMsg::groundaltitudemsl() const {
  // @@protoc_insertion_point(field_get:vision_messages.GeoCoordinateSystemSetupPBMsg.GroundAltitudeMSL)
  return groundaltitudemsl_;
}
 void GeoCoordinateSystemSetupPBMsg::set_groundaltitudemsl(double value) {
  set_has_groundaltitudemsl();
  groundaltitudemsl_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GeoCoordinateSystemSetupPBMsg.GroundAltitudeMSL)
}

// optional double DeltaLatitudeDegrees = 5;
bool GeoCoordinateSystemSetupPBMsg::has_deltalatitudedegrees() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GeoCoordinateSystemSetupPBMsg::set_has_deltalatitudedegrees() {
  _has_bits_[0] |= 0x00000010u;
}
void GeoCoordinateSystemSetupPBMsg::clear_has_deltalatitudedegrees() {
  _has_bits_[0] &= ~0x00000010u;
}
void GeoCoordinateSystemSetupPBMsg::clear_deltalatitudedegrees() {
  deltalatitudedegrees_ = 0;
  clear_has_deltalatitudedegrees();
}
 double GeoCoordinateSystemSetupPBMsg::deltalatitudedegrees() const {
  // @@protoc_insertion_point(field_get:vision_messages.GeoCoordinateSystemSetupPBMsg.DeltaLatitudeDegrees)
  return deltalatitudedegrees_;
}
 void GeoCoordinateSystemSetupPBMsg::set_deltalatitudedegrees(double value) {
  set_has_deltalatitudedegrees();
  deltalatitudedegrees_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GeoCoordinateSystemSetupPBMsg.DeltaLatitudeDegrees)
}

// optional double DeltaLongitudeDegrees = 6;
bool GeoCoordinateSystemSetupPBMsg::has_deltalongitudedegrees() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GeoCoordinateSystemSetupPBMsg::set_has_deltalongitudedegrees() {
  _has_bits_[0] |= 0x00000020u;
}
void GeoCoordinateSystemSetupPBMsg::clear_has_deltalongitudedegrees() {
  _has_bits_[0] &= ~0x00000020u;
}
void GeoCoordinateSystemSetupPBMsg::clear_deltalongitudedegrees() {
  deltalongitudedegrees_ = 0;
  clear_has_deltalongitudedegrees();
}
 double GeoCoordinateSystemSetupPBMsg::deltalongitudedegrees() const {
  // @@protoc_insertion_point(field_get:vision_messages.GeoCoordinateSystemSetupPBMsg.DeltaLongitudeDegrees)
  return deltalongitudedegrees_;
}
 void GeoCoordinateSystemSetupPBMsg::set_deltalongitudedegrees(double value) {
  set_has_deltalongitudedegrees();
  deltalongitudedegrees_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GeoCoordinateSystemSetupPBMsg.DeltaLongitudeDegrees)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatLonXYConversionPBMsg::kLatLonToXYConversionFieldNumber;
const int LatLonXYConversionPBMsg::kLatitudeDegreesFieldNumber;
const int LatLonXYConversionPBMsg::kLongitudeDegreesFieldNumber;
const int LatLonXYConversionPBMsg::kXPosMetersFieldNumber;
const int LatLonXYConversionPBMsg::kYPosMetersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatLonXYConversionPBMsg::LatLonXYConversionPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.LatLonXYConversionPBMsg)
}

void LatLonXYConversionPBMsg::InitAsDefaultInstance() {
}

LatLonXYConversionPBMsg::LatLonXYConversionPBMsg(const LatLonXYConversionPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.LatLonXYConversionPBMsg)
}

void LatLonXYConversionPBMsg::SharedCtor() {
  _cached_size_ = 0;
  latlontoxyconversion_ = false;
  latitudedegrees_ = 0;
  longitudedegrees_ = 0;
  x_posmeters_ = 0;
  y_posmeters_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LatLonXYConversionPBMsg::~LatLonXYConversionPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.LatLonXYConversionPBMsg)
  SharedDtor();
}

void LatLonXYConversionPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LatLonXYConversionPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatLonXYConversionPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LatLonXYConversionPBMsg_descriptor_;
}

const LatLonXYConversionPBMsg& LatLonXYConversionPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

LatLonXYConversionPBMsg* LatLonXYConversionPBMsg::default_instance_ = NULL;

LatLonXYConversionPBMsg* LatLonXYConversionPBMsg::New(::google::protobuf::Arena* arena) const {
  LatLonXYConversionPBMsg* n = new LatLonXYConversionPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LatLonXYConversionPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.LatLonXYConversionPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LatLonXYConversionPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LatLonXYConversionPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(latitudedegrees_, latlontoxyconversion_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LatLonXYConversionPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.LatLonXYConversionPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool LatLonToXYConversion = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &latlontoxyconversion_)));
          set_has_latlontoxyconversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_LatitudeDegrees;
        break;
      }

      // optional double LatitudeDegrees = 2;
      case 2: {
        if (tag == 17) {
         parse_LatitudeDegrees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitudedegrees_)));
          set_has_latitudedegrees();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_LongitudeDegrees;
        break;
      }

      // optional double LongitudeDegrees = 3;
      case 3: {
        if (tag == 25) {
         parse_LongitudeDegrees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitudedegrees_)));
          set_has_longitudedegrees();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_X_PosMeters;
        break;
      }

      // optional double X_PosMeters = 4;
      case 4: {
        if (tag == 33) {
         parse_X_PosMeters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_posmeters_)));
          set_has_x_posmeters();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_Y_PosMeters;
        break;
      }

      // optional double Y_PosMeters = 5;
      case 5: {
        if (tag == 41) {
         parse_Y_PosMeters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_posmeters_)));
          set_has_y_posmeters();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.LatLonXYConversionPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.LatLonXYConversionPBMsg)
  return false;
#undef DO_
}

void LatLonXYConversionPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.LatLonXYConversionPBMsg)
  // optional bool LatLonToXYConversion = 1;
  if (has_latlontoxyconversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->latlontoxyconversion(), output);
  }

  // optional double LatitudeDegrees = 2;
  if (has_latitudedegrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitudedegrees(), output);
  }

  // optional double LongitudeDegrees = 3;
  if (has_longitudedegrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitudedegrees(), output);
  }

  // optional double X_PosMeters = 4;
  if (has_x_posmeters()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x_posmeters(), output);
  }

  // optional double Y_PosMeters = 5;
  if (has_y_posmeters()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->y_posmeters(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.LatLonXYConversionPBMsg)
}

::google::protobuf::uint8* LatLonXYConversionPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.LatLonXYConversionPBMsg)
  // optional bool LatLonToXYConversion = 1;
  if (has_latlontoxyconversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->latlontoxyconversion(), target);
  }

  // optional double LatitudeDegrees = 2;
  if (has_latitudedegrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitudedegrees(), target);
  }

  // optional double LongitudeDegrees = 3;
  if (has_longitudedegrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longitudedegrees(), target);
  }

  // optional double X_PosMeters = 4;
  if (has_x_posmeters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x_posmeters(), target);
  }

  // optional double Y_PosMeters = 5;
  if (has_y_posmeters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->y_posmeters(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.LatLonXYConversionPBMsg)
  return target;
}

int LatLonXYConversionPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.LatLonXYConversionPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional bool LatLonToXYConversion = 1;
    if (has_latlontoxyconversion()) {
      total_size += 1 + 1;
    }

    // optional double LatitudeDegrees = 2;
    if (has_latitudedegrees()) {
      total_size += 1 + 8;
    }

    // optional double LongitudeDegrees = 3;
    if (has_longitudedegrees()) {
      total_size += 1 + 8;
    }

    // optional double X_PosMeters = 4;
    if (has_x_posmeters()) {
      total_size += 1 + 8;
    }

    // optional double Y_PosMeters = 5;
    if (has_y_posmeters()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatLonXYConversionPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.LatLonXYConversionPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LatLonXYConversionPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LatLonXYConversionPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.LatLonXYConversionPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.LatLonXYConversionPBMsg)
    MergeFrom(*source);
  }
}

void LatLonXYConversionPBMsg::MergeFrom(const LatLonXYConversionPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.LatLonXYConversionPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latlontoxyconversion()) {
      set_latlontoxyconversion(from.latlontoxyconversion());
    }
    if (from.has_latitudedegrees()) {
      set_latitudedegrees(from.latitudedegrees());
    }
    if (from.has_longitudedegrees()) {
      set_longitudedegrees(from.longitudedegrees());
    }
    if (from.has_x_posmeters()) {
      set_x_posmeters(from.x_posmeters());
    }
    if (from.has_y_posmeters()) {
      set_y_posmeters(from.y_posmeters());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LatLonXYConversionPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.LatLonXYConversionPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatLonXYConversionPBMsg::CopyFrom(const LatLonXYConversionPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.LatLonXYConversionPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatLonXYConversionPBMsg::IsInitialized() const {

  return true;
}

void LatLonXYConversionPBMsg::Swap(LatLonXYConversionPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatLonXYConversionPBMsg::InternalSwap(LatLonXYConversionPBMsg* other) {
  std::swap(latlontoxyconversion_, other->latlontoxyconversion_);
  std::swap(latitudedegrees_, other->latitudedegrees_);
  std::swap(longitudedegrees_, other->longitudedegrees_);
  std::swap(x_posmeters_, other->x_posmeters_);
  std::swap(y_posmeters_, other->y_posmeters_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LatLonXYConversionPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LatLonXYConversionPBMsg_descriptor_;
  metadata.reflection = LatLonXYConversionPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LatLonXYConversionPBMsg

// optional bool LatLonToXYConversion = 1;
bool LatLonXYConversionPBMsg::has_latlontoxyconversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LatLonXYConversionPBMsg::set_has_latlontoxyconversion() {
  _has_bits_[0] |= 0x00000001u;
}
void LatLonXYConversionPBMsg::clear_has_latlontoxyconversion() {
  _has_bits_[0] &= ~0x00000001u;
}
void LatLonXYConversionPBMsg::clear_latlontoxyconversion() {
  latlontoxyconversion_ = false;
  clear_has_latlontoxyconversion();
}
 bool LatLonXYConversionPBMsg::latlontoxyconversion() const {
  // @@protoc_insertion_point(field_get:vision_messages.LatLonXYConversionPBMsg.LatLonToXYConversion)
  return latlontoxyconversion_;
}
 void LatLonXYConversionPBMsg::set_latlontoxyconversion(bool value) {
  set_has_latlontoxyconversion();
  latlontoxyconversion_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.LatLonXYConversionPBMsg.LatLonToXYConversion)
}

// optional double LatitudeDegrees = 2;
bool LatLonXYConversionPBMsg::has_latitudedegrees() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LatLonXYConversionPBMsg::set_has_latitudedegrees() {
  _has_bits_[0] |= 0x00000002u;
}
void LatLonXYConversionPBMsg::clear_has_latitudedegrees() {
  _has_bits_[0] &= ~0x00000002u;
}
void LatLonXYConversionPBMsg::clear_latitudedegrees() {
  latitudedegrees_ = 0;
  clear_has_latitudedegrees();
}
 double LatLonXYConversionPBMsg::latitudedegrees() const {
  // @@protoc_insertion_point(field_get:vision_messages.LatLonXYConversionPBMsg.LatitudeDegrees)
  return latitudedegrees_;
}
 void LatLonXYConversionPBMsg::set_latitudedegrees(double value) {
  set_has_latitudedegrees();
  latitudedegrees_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.LatLonXYConversionPBMsg.LatitudeDegrees)
}

// optional double LongitudeDegrees = 3;
bool LatLonXYConversionPBMsg::has_longitudedegrees() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LatLonXYConversionPBMsg::set_has_longitudedegrees() {
  _has_bits_[0] |= 0x00000004u;
}
void LatLonXYConversionPBMsg::clear_has_longitudedegrees() {
  _has_bits_[0] &= ~0x00000004u;
}
void LatLonXYConversionPBMsg::clear_longitudedegrees() {
  longitudedegrees_ = 0;
  clear_has_longitudedegrees();
}
 double LatLonXYConversionPBMsg::longitudedegrees() const {
  // @@protoc_insertion_point(field_get:vision_messages.LatLonXYConversionPBMsg.LongitudeDegrees)
  return longitudedegrees_;
}
 void LatLonXYConversionPBMsg::set_longitudedegrees(double value) {
  set_has_longitudedegrees();
  longitudedegrees_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.LatLonXYConversionPBMsg.LongitudeDegrees)
}

// optional double X_PosMeters = 4;
bool LatLonXYConversionPBMsg::has_x_posmeters() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LatLonXYConversionPBMsg::set_has_x_posmeters() {
  _has_bits_[0] |= 0x00000008u;
}
void LatLonXYConversionPBMsg::clear_has_x_posmeters() {
  _has_bits_[0] &= ~0x00000008u;
}
void LatLonXYConversionPBMsg::clear_x_posmeters() {
  x_posmeters_ = 0;
  clear_has_x_posmeters();
}
 double LatLonXYConversionPBMsg::x_posmeters() const {
  // @@protoc_insertion_point(field_get:vision_messages.LatLonXYConversionPBMsg.X_PosMeters)
  return x_posmeters_;
}
 void LatLonXYConversionPBMsg::set_x_posmeters(double value) {
  set_has_x_posmeters();
  x_posmeters_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.LatLonXYConversionPBMsg.X_PosMeters)
}

// optional double Y_PosMeters = 5;
bool LatLonXYConversionPBMsg::has_y_posmeters() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LatLonXYConversionPBMsg::set_has_y_posmeters() {
  _has_bits_[0] |= 0x00000010u;
}
void LatLonXYConversionPBMsg::clear_has_y_posmeters() {
  _has_bits_[0] &= ~0x00000010u;
}
void LatLonXYConversionPBMsg::clear_y_posmeters() {
  y_posmeters_ = 0;
  clear_has_y_posmeters();
}
 double LatLonXYConversionPBMsg::y_posmeters() const {
  // @@protoc_insertion_point(field_get:vision_messages.LatLonXYConversionPBMsg.Y_PosMeters)
  return y_posmeters_;
}
 void LatLonXYConversionPBMsg::set_y_posmeters(double value) {
  set_has_y_posmeters();
  y_posmeters_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.LatLonXYConversionPBMsg.Y_PosMeters)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageCaptureControlPBMsg::kImageCaptureEnabledFieldNumber;
const int ImageCaptureControlPBMsg::kNumberOfImagesToCaptureFieldNumber;
const int ImageCaptureControlPBMsg::kDesiredFramesPerSecondFieldNumber;
const int ImageCaptureControlPBMsg::kDesiredImageWidthFieldNumber;
const int ImageCaptureControlPBMsg::kDesiredImageHeightFieldNumber;
const int ImageCaptureControlPBMsg::kImageCaptureSourceFieldNumber;
const int ImageCaptureControlPBMsg::kImageCaptureFormatFieldNumber;
const int ImageCaptureControlPBMsg::kImageCaptureSourceConfigPriFieldNumber;
const int ImageCaptureControlPBMsg::kImageCaptureSourceConfigSecFieldNumber;
const int ImageCaptureControlPBMsg::kImageSourceLoopAroundFieldNumber;
const int ImageCaptureControlPBMsg::kAutoFocusEnableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageCaptureControlPBMsg::ImageCaptureControlPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.ImageCaptureControlPBMsg)
}

void ImageCaptureControlPBMsg::InitAsDefaultInstance() {
}

ImageCaptureControlPBMsg::ImageCaptureControlPBMsg(const ImageCaptureControlPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.ImageCaptureControlPBMsg)
}

void ImageCaptureControlPBMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  imagecaptureenabled_ = false;
  numberofimagestocapture_ = 0u;
  desiredframespersecond_ = 0;
  desiredimagewidth_ = 0u;
  desiredimageheight_ = 0u;
  imagecapturesource_ = 0;
  imagecaptureformat_ = 0;
  imagecapturesourceconfigpri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagecapturesourceconfigsec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagesourcelooparound_ = false;
  autofocusenable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageCaptureControlPBMsg::~ImageCaptureControlPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.ImageCaptureControlPBMsg)
  SharedDtor();
}

void ImageCaptureControlPBMsg::SharedDtor() {
  imagecapturesourceconfigpri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagecapturesourceconfigsec_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ImageCaptureControlPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageCaptureControlPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageCaptureControlPBMsg_descriptor_;
}

const ImageCaptureControlPBMsg& ImageCaptureControlPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

ImageCaptureControlPBMsg* ImageCaptureControlPBMsg::default_instance_ = NULL;

ImageCaptureControlPBMsg* ImageCaptureControlPBMsg::New(::google::protobuf::Arena* arena) const {
  ImageCaptureControlPBMsg* n = new ImageCaptureControlPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageCaptureControlPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.ImageCaptureControlPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImageCaptureControlPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImageCaptureControlPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(desiredframespersecond_, imagecaptureenabled_);
    if (has_imagecapturesourceconfigpri()) {
      imagecapturesourceconfigpri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ZR_(imagesourcelooparound_, autofocusenable_);
    if (has_imagecapturesourceconfigsec()) {
      imagecapturesourceconfigsec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImageCaptureControlPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.ImageCaptureControlPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ImageCaptureEnabled = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &imagecaptureenabled_)));
          set_has_imagecaptureenabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_NumberOfImagesToCapture;
        break;
      }

      // optional uint32 NumberOfImagesToCapture = 2;
      case 2: {
        if (tag == 16) {
         parse_NumberOfImagesToCapture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numberofimagestocapture_)));
          set_has_numberofimagestocapture();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_DesiredFramesPerSecond;
        break;
      }

      // optional double DesiredFramesPerSecond = 3;
      case 3: {
        if (tag == 25) {
         parse_DesiredFramesPerSecond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &desiredframespersecond_)));
          set_has_desiredframespersecond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DesiredImageWidth;
        break;
      }

      // optional uint32 DesiredImageWidth = 4;
      case 4: {
        if (tag == 32) {
         parse_DesiredImageWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desiredimagewidth_)));
          set_has_desiredimagewidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_DesiredImageHeight;
        break;
      }

      // optional uint32 DesiredImageHeight = 5;
      case 5: {
        if (tag == 40) {
         parse_DesiredImageHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desiredimageheight_)));
          set_has_desiredimageheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ImageCaptureSource;
        break;
      }

      // optional .vision_messages.ImageCaptureSource_e ImageCaptureSource = 6;
      case 6: {
        if (tag == 48) {
         parse_ImageCaptureSource:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vision_messages::ImageCaptureSource_e_IsValid(value)) {
            set_imagecapturesource(static_cast< ::vision_messages::ImageCaptureSource_e >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ImageCaptureFormat;
        break;
      }

      // optional .vision_messages.CPImageCaptureFormat_e ImageCaptureFormat = 7;
      case 7: {
        if (tag == 56) {
         parse_ImageCaptureFormat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vision_messages::CPImageCaptureFormat_e_IsValid(value)) {
            set_imagecaptureformat(static_cast< ::vision_messages::CPImageCaptureFormat_e >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ImageCaptureSourceConfigPri;
        break;
      }

      // optional string ImageCaptureSourceConfigPri = 8;
      case 8: {
        if (tag == 66) {
         parse_ImageCaptureSourceConfigPri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagecapturesourceconfigpri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imagecapturesourceconfigpri().data(), this->imagecapturesourceconfigpri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vision_messages.ImageCaptureControlPBMsg.ImageCaptureSourceConfigPri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ImageCaptureSourceConfigSec;
        break;
      }

      // optional string ImageCaptureSourceConfigSec = 9;
      case 9: {
        if (tag == 74) {
         parse_ImageCaptureSourceConfigSec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagecapturesourceconfigsec()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imagecapturesourceconfigsec().data(), this->imagecapturesourceconfigsec().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vision_messages.ImageCaptureControlPBMsg.ImageCaptureSourceConfigSec");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ImageSourceLoopAround;
        break;
      }

      // optional bool ImageSourceLoopAround = 10;
      case 10: {
        if (tag == 80) {
         parse_ImageSourceLoopAround:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &imagesourcelooparound_)));
          set_has_imagesourcelooparound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_AutoFocusEnable;
        break;
      }

      // optional bool AutoFocusEnable = 11;
      case 11: {
        if (tag == 88) {
         parse_AutoFocusEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autofocusenable_)));
          set_has_autofocusenable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.ImageCaptureControlPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.ImageCaptureControlPBMsg)
  return false;
#undef DO_
}

void ImageCaptureControlPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.ImageCaptureControlPBMsg)
  // optional bool ImageCaptureEnabled = 1;
  if (has_imagecaptureenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->imagecaptureenabled(), output);
  }

  // optional uint32 NumberOfImagesToCapture = 2;
  if (has_numberofimagestocapture()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->numberofimagestocapture(), output);
  }

  // optional double DesiredFramesPerSecond = 3;
  if (has_desiredframespersecond()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->desiredframespersecond(), output);
  }

  // optional uint32 DesiredImageWidth = 4;
  if (has_desiredimagewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->desiredimagewidth(), output);
  }

  // optional uint32 DesiredImageHeight = 5;
  if (has_desiredimageheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->desiredimageheight(), output);
  }

  // optional .vision_messages.ImageCaptureSource_e ImageCaptureSource = 6;
  if (has_imagecapturesource()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->imagecapturesource(), output);
  }

  // optional .vision_messages.CPImageCaptureFormat_e ImageCaptureFormat = 7;
  if (has_imagecaptureformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->imagecaptureformat(), output);
  }

  // optional string ImageCaptureSourceConfigPri = 8;
  if (has_imagecapturesourceconfigpri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imagecapturesourceconfigpri().data(), this->imagecapturesourceconfigpri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.ImageCaptureControlPBMsg.ImageCaptureSourceConfigPri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->imagecapturesourceconfigpri(), output);
  }

  // optional string ImageCaptureSourceConfigSec = 9;
  if (has_imagecapturesourceconfigsec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imagecapturesourceconfigsec().data(), this->imagecapturesourceconfigsec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.ImageCaptureControlPBMsg.ImageCaptureSourceConfigSec");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->imagecapturesourceconfigsec(), output);
  }

  // optional bool ImageSourceLoopAround = 10;
  if (has_imagesourcelooparound()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->imagesourcelooparound(), output);
  }

  // optional bool AutoFocusEnable = 11;
  if (has_autofocusenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->autofocusenable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.ImageCaptureControlPBMsg)
}

::google::protobuf::uint8* ImageCaptureControlPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.ImageCaptureControlPBMsg)
  // optional bool ImageCaptureEnabled = 1;
  if (has_imagecaptureenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->imagecaptureenabled(), target);
  }

  // optional uint32 NumberOfImagesToCapture = 2;
  if (has_numberofimagestocapture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->numberofimagestocapture(), target);
  }

  // optional double DesiredFramesPerSecond = 3;
  if (has_desiredframespersecond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->desiredframespersecond(), target);
  }

  // optional uint32 DesiredImageWidth = 4;
  if (has_desiredimagewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->desiredimagewidth(), target);
  }

  // optional uint32 DesiredImageHeight = 5;
  if (has_desiredimageheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->desiredimageheight(), target);
  }

  // optional .vision_messages.ImageCaptureSource_e ImageCaptureSource = 6;
  if (has_imagecapturesource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->imagecapturesource(), target);
  }

  // optional .vision_messages.CPImageCaptureFormat_e ImageCaptureFormat = 7;
  if (has_imagecaptureformat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->imagecaptureformat(), target);
  }

  // optional string ImageCaptureSourceConfigPri = 8;
  if (has_imagecapturesourceconfigpri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imagecapturesourceconfigpri().data(), this->imagecapturesourceconfigpri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.ImageCaptureControlPBMsg.ImageCaptureSourceConfigPri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->imagecapturesourceconfigpri(), target);
  }

  // optional string ImageCaptureSourceConfigSec = 9;
  if (has_imagecapturesourceconfigsec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imagecapturesourceconfigsec().data(), this->imagecapturesourceconfigsec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.ImageCaptureControlPBMsg.ImageCaptureSourceConfigSec");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->imagecapturesourceconfigsec(), target);
  }

  // optional bool ImageSourceLoopAround = 10;
  if (has_imagesourcelooparound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->imagesourcelooparound(), target);
  }

  // optional bool AutoFocusEnable = 11;
  if (has_autofocusenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->autofocusenable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.ImageCaptureControlPBMsg)
  return target;
}

int ImageCaptureControlPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.ImageCaptureControlPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool ImageCaptureEnabled = 1;
    if (has_imagecaptureenabled()) {
      total_size += 1 + 1;
    }

    // optional uint32 NumberOfImagesToCapture = 2;
    if (has_numberofimagestocapture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numberofimagestocapture());
    }

    // optional double DesiredFramesPerSecond = 3;
    if (has_desiredframespersecond()) {
      total_size += 1 + 8;
    }

    // optional uint32 DesiredImageWidth = 4;
    if (has_desiredimagewidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desiredimagewidth());
    }

    // optional uint32 DesiredImageHeight = 5;
    if (has_desiredimageheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desiredimageheight());
    }

    // optional .vision_messages.ImageCaptureSource_e ImageCaptureSource = 6;
    if (has_imagecapturesource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->imagecapturesource());
    }

    // optional .vision_messages.CPImageCaptureFormat_e ImageCaptureFormat = 7;
    if (has_imagecaptureformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->imagecaptureformat());
    }

    // optional string ImageCaptureSourceConfigPri = 8;
    if (has_imagecapturesourceconfigpri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imagecapturesourceconfigpri());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional string ImageCaptureSourceConfigSec = 9;
    if (has_imagecapturesourceconfigsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imagecapturesourceconfigsec());
    }

    // optional bool ImageSourceLoopAround = 10;
    if (has_imagesourcelooparound()) {
      total_size += 1 + 1;
    }

    // optional bool AutoFocusEnable = 11;
    if (has_autofocusenable()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageCaptureControlPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.ImageCaptureControlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImageCaptureControlPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageCaptureControlPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.ImageCaptureControlPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.ImageCaptureControlPBMsg)
    MergeFrom(*source);
  }
}

void ImageCaptureControlPBMsg::MergeFrom(const ImageCaptureControlPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.ImageCaptureControlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imagecaptureenabled()) {
      set_imagecaptureenabled(from.imagecaptureenabled());
    }
    if (from.has_numberofimagestocapture()) {
      set_numberofimagestocapture(from.numberofimagestocapture());
    }
    if (from.has_desiredframespersecond()) {
      set_desiredframespersecond(from.desiredframespersecond());
    }
    if (from.has_desiredimagewidth()) {
      set_desiredimagewidth(from.desiredimagewidth());
    }
    if (from.has_desiredimageheight()) {
      set_desiredimageheight(from.desiredimageheight());
    }
    if (from.has_imagecapturesource()) {
      set_imagecapturesource(from.imagecapturesource());
    }
    if (from.has_imagecaptureformat()) {
      set_imagecaptureformat(from.imagecaptureformat());
    }
    if (from.has_imagecapturesourceconfigpri()) {
      set_has_imagecapturesourceconfigpri();
      imagecapturesourceconfigpri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imagecapturesourceconfigpri_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_imagecapturesourceconfigsec()) {
      set_has_imagecapturesourceconfigsec();
      imagecapturesourceconfigsec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imagecapturesourceconfigsec_);
    }
    if (from.has_imagesourcelooparound()) {
      set_imagesourcelooparound(from.imagesourcelooparound());
    }
    if (from.has_autofocusenable()) {
      set_autofocusenable(from.autofocusenable());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ImageCaptureControlPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.ImageCaptureControlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageCaptureControlPBMsg::CopyFrom(const ImageCaptureControlPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.ImageCaptureControlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageCaptureControlPBMsg::IsInitialized() const {

  return true;
}

void ImageCaptureControlPBMsg::Swap(ImageCaptureControlPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageCaptureControlPBMsg::InternalSwap(ImageCaptureControlPBMsg* other) {
  std::swap(imagecaptureenabled_, other->imagecaptureenabled_);
  std::swap(numberofimagestocapture_, other->numberofimagestocapture_);
  std::swap(desiredframespersecond_, other->desiredframespersecond_);
  std::swap(desiredimagewidth_, other->desiredimagewidth_);
  std::swap(desiredimageheight_, other->desiredimageheight_);
  std::swap(imagecapturesource_, other->imagecapturesource_);
  std::swap(imagecaptureformat_, other->imagecaptureformat_);
  imagecapturesourceconfigpri_.Swap(&other->imagecapturesourceconfigpri_);
  imagecapturesourceconfigsec_.Swap(&other->imagecapturesourceconfigsec_);
  std::swap(imagesourcelooparound_, other->imagesourcelooparound_);
  std::swap(autofocusenable_, other->autofocusenable_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageCaptureControlPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageCaptureControlPBMsg_descriptor_;
  metadata.reflection = ImageCaptureControlPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageCaptureControlPBMsg

// optional bool ImageCaptureEnabled = 1;
bool ImageCaptureControlPBMsg::has_imagecaptureenabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageCaptureControlPBMsg::set_has_imagecaptureenabled() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageCaptureControlPBMsg::clear_has_imagecaptureenabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageCaptureControlPBMsg::clear_imagecaptureenabled() {
  imagecaptureenabled_ = false;
  clear_has_imagecaptureenabled();
}
 bool ImageCaptureControlPBMsg::imagecaptureenabled() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCaptureControlPBMsg.ImageCaptureEnabled)
  return imagecaptureenabled_;
}
 void ImageCaptureControlPBMsg::set_imagecaptureenabled(bool value) {
  set_has_imagecaptureenabled();
  imagecaptureenabled_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageCaptureControlPBMsg.ImageCaptureEnabled)
}

// optional uint32 NumberOfImagesToCapture = 2;
bool ImageCaptureControlPBMsg::has_numberofimagestocapture() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageCaptureControlPBMsg::set_has_numberofimagestocapture() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageCaptureControlPBMsg::clear_has_numberofimagestocapture() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageCaptureControlPBMsg::clear_numberofimagestocapture() {
  numberofimagestocapture_ = 0u;
  clear_has_numberofimagestocapture();
}
 ::google::protobuf::uint32 ImageCaptureControlPBMsg::numberofimagestocapture() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCaptureControlPBMsg.NumberOfImagesToCapture)
  return numberofimagestocapture_;
}
 void ImageCaptureControlPBMsg::set_numberofimagestocapture(::google::protobuf::uint32 value) {
  set_has_numberofimagestocapture();
  numberofimagestocapture_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageCaptureControlPBMsg.NumberOfImagesToCapture)
}

// optional double DesiredFramesPerSecond = 3;
bool ImageCaptureControlPBMsg::has_desiredframespersecond() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageCaptureControlPBMsg::set_has_desiredframespersecond() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageCaptureControlPBMsg::clear_has_desiredframespersecond() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageCaptureControlPBMsg::clear_desiredframespersecond() {
  desiredframespersecond_ = 0;
  clear_has_desiredframespersecond();
}
 double ImageCaptureControlPBMsg::desiredframespersecond() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCaptureControlPBMsg.DesiredFramesPerSecond)
  return desiredframespersecond_;
}
 void ImageCaptureControlPBMsg::set_desiredframespersecond(double value) {
  set_has_desiredframespersecond();
  desiredframespersecond_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageCaptureControlPBMsg.DesiredFramesPerSecond)
}

// optional uint32 DesiredImageWidth = 4;
bool ImageCaptureControlPBMsg::has_desiredimagewidth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageCaptureControlPBMsg::set_has_desiredimagewidth() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageCaptureControlPBMsg::clear_has_desiredimagewidth() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageCaptureControlPBMsg::clear_desiredimagewidth() {
  desiredimagewidth_ = 0u;
  clear_has_desiredimagewidth();
}
 ::google::protobuf::uint32 ImageCaptureControlPBMsg::desiredimagewidth() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCaptureControlPBMsg.DesiredImageWidth)
  return desiredimagewidth_;
}
 void ImageCaptureControlPBMsg::set_desiredimagewidth(::google::protobuf::uint32 value) {
  set_has_desiredimagewidth();
  desiredimagewidth_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageCaptureControlPBMsg.DesiredImageWidth)
}

// optional uint32 DesiredImageHeight = 5;
bool ImageCaptureControlPBMsg::has_desiredimageheight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageCaptureControlPBMsg::set_has_desiredimageheight() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageCaptureControlPBMsg::clear_has_desiredimageheight() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageCaptureControlPBMsg::clear_desiredimageheight() {
  desiredimageheight_ = 0u;
  clear_has_desiredimageheight();
}
 ::google::protobuf::uint32 ImageCaptureControlPBMsg::desiredimageheight() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCaptureControlPBMsg.DesiredImageHeight)
  return desiredimageheight_;
}
 void ImageCaptureControlPBMsg::set_desiredimageheight(::google::protobuf::uint32 value) {
  set_has_desiredimageheight();
  desiredimageheight_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageCaptureControlPBMsg.DesiredImageHeight)
}

// optional .vision_messages.ImageCaptureSource_e ImageCaptureSource = 6;
bool ImageCaptureControlPBMsg::has_imagecapturesource() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageCaptureControlPBMsg::set_has_imagecapturesource() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageCaptureControlPBMsg::clear_has_imagecapturesource() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageCaptureControlPBMsg::clear_imagecapturesource() {
  imagecapturesource_ = 0;
  clear_has_imagecapturesource();
}
 ::vision_messages::ImageCaptureSource_e ImageCaptureControlPBMsg::imagecapturesource() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCaptureControlPBMsg.ImageCaptureSource)
  return static_cast< ::vision_messages::ImageCaptureSource_e >(imagecapturesource_);
}
 void ImageCaptureControlPBMsg::set_imagecapturesource(::vision_messages::ImageCaptureSource_e value) {
  assert(::vision_messages::ImageCaptureSource_e_IsValid(value));
  set_has_imagecapturesource();
  imagecapturesource_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageCaptureControlPBMsg.ImageCaptureSource)
}

// optional .vision_messages.CPImageCaptureFormat_e ImageCaptureFormat = 7;
bool ImageCaptureControlPBMsg::has_imagecaptureformat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ImageCaptureControlPBMsg::set_has_imagecaptureformat() {
  _has_bits_[0] |= 0x00000040u;
}
void ImageCaptureControlPBMsg::clear_has_imagecaptureformat() {
  _has_bits_[0] &= ~0x00000040u;
}
void ImageCaptureControlPBMsg::clear_imagecaptureformat() {
  imagecaptureformat_ = 0;
  clear_has_imagecaptureformat();
}
 ::vision_messages::CPImageCaptureFormat_e ImageCaptureControlPBMsg::imagecaptureformat() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCaptureControlPBMsg.ImageCaptureFormat)
  return static_cast< ::vision_messages::CPImageCaptureFormat_e >(imagecaptureformat_);
}
 void ImageCaptureControlPBMsg::set_imagecaptureformat(::vision_messages::CPImageCaptureFormat_e value) {
  assert(::vision_messages::CPImageCaptureFormat_e_IsValid(value));
  set_has_imagecaptureformat();
  imagecaptureformat_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageCaptureControlPBMsg.ImageCaptureFormat)
}

// optional string ImageCaptureSourceConfigPri = 8;
bool ImageCaptureControlPBMsg::has_imagecapturesourceconfigpri() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ImageCaptureControlPBMsg::set_has_imagecapturesourceconfigpri() {
  _has_bits_[0] |= 0x00000080u;
}
void ImageCaptureControlPBMsg::clear_has_imagecapturesourceconfigpri() {
  _has_bits_[0] &= ~0x00000080u;
}
void ImageCaptureControlPBMsg::clear_imagecapturesourceconfigpri() {
  imagecapturesourceconfigpri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imagecapturesourceconfigpri();
}
 const ::std::string& ImageCaptureControlPBMsg::imagecapturesourceconfigpri() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCaptureControlPBMsg.ImageCaptureSourceConfigPri)
  return imagecapturesourceconfigpri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageCaptureControlPBMsg::set_imagecapturesourceconfigpri(const ::std::string& value) {
  set_has_imagecapturesourceconfigpri();
  imagecapturesourceconfigpri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vision_messages.ImageCaptureControlPBMsg.ImageCaptureSourceConfigPri)
}
 void ImageCaptureControlPBMsg::set_imagecapturesourceconfigpri(const char* value) {
  set_has_imagecapturesourceconfigpri();
  imagecapturesourceconfigpri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vision_messages.ImageCaptureControlPBMsg.ImageCaptureSourceConfigPri)
}
 void ImageCaptureControlPBMsg::set_imagecapturesourceconfigpri(const char* value, size_t size) {
  set_has_imagecapturesourceconfigpri();
  imagecapturesourceconfigpri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vision_messages.ImageCaptureControlPBMsg.ImageCaptureSourceConfigPri)
}
 ::std::string* ImageCaptureControlPBMsg::mutable_imagecapturesourceconfigpri() {
  set_has_imagecapturesourceconfigpri();
  // @@protoc_insertion_point(field_mutable:vision_messages.ImageCaptureControlPBMsg.ImageCaptureSourceConfigPri)
  return imagecapturesourceconfigpri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImageCaptureControlPBMsg::release_imagecapturesourceconfigpri() {
  // @@protoc_insertion_point(field_release:vision_messages.ImageCaptureControlPBMsg.ImageCaptureSourceConfigPri)
  clear_has_imagecapturesourceconfigpri();
  return imagecapturesourceconfigpri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageCaptureControlPBMsg::set_allocated_imagecapturesourceconfigpri(::std::string* imagecapturesourceconfigpri) {
  if (imagecapturesourceconfigpri != NULL) {
    set_has_imagecapturesourceconfigpri();
  } else {
    clear_has_imagecapturesourceconfigpri();
  }
  imagecapturesourceconfigpri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imagecapturesourceconfigpri);
  // @@protoc_insertion_point(field_set_allocated:vision_messages.ImageCaptureControlPBMsg.ImageCaptureSourceConfigPri)
}

// optional string ImageCaptureSourceConfigSec = 9;
bool ImageCaptureControlPBMsg::has_imagecapturesourceconfigsec() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ImageCaptureControlPBMsg::set_has_imagecapturesourceconfigsec() {
  _has_bits_[0] |= 0x00000100u;
}
void ImageCaptureControlPBMsg::clear_has_imagecapturesourceconfigsec() {
  _has_bits_[0] &= ~0x00000100u;
}
void ImageCaptureControlPBMsg::clear_imagecapturesourceconfigsec() {
  imagecapturesourceconfigsec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imagecapturesourceconfigsec();
}
 const ::std::string& ImageCaptureControlPBMsg::imagecapturesourceconfigsec() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCaptureControlPBMsg.ImageCaptureSourceConfigSec)
  return imagecapturesourceconfigsec_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageCaptureControlPBMsg::set_imagecapturesourceconfigsec(const ::std::string& value) {
  set_has_imagecapturesourceconfigsec();
  imagecapturesourceconfigsec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vision_messages.ImageCaptureControlPBMsg.ImageCaptureSourceConfigSec)
}
 void ImageCaptureControlPBMsg::set_imagecapturesourceconfigsec(const char* value) {
  set_has_imagecapturesourceconfigsec();
  imagecapturesourceconfigsec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vision_messages.ImageCaptureControlPBMsg.ImageCaptureSourceConfigSec)
}
 void ImageCaptureControlPBMsg::set_imagecapturesourceconfigsec(const char* value, size_t size) {
  set_has_imagecapturesourceconfigsec();
  imagecapturesourceconfigsec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vision_messages.ImageCaptureControlPBMsg.ImageCaptureSourceConfigSec)
}
 ::std::string* ImageCaptureControlPBMsg::mutable_imagecapturesourceconfigsec() {
  set_has_imagecapturesourceconfigsec();
  // @@protoc_insertion_point(field_mutable:vision_messages.ImageCaptureControlPBMsg.ImageCaptureSourceConfigSec)
  return imagecapturesourceconfigsec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImageCaptureControlPBMsg::release_imagecapturesourceconfigsec() {
  // @@protoc_insertion_point(field_release:vision_messages.ImageCaptureControlPBMsg.ImageCaptureSourceConfigSec)
  clear_has_imagecapturesourceconfigsec();
  return imagecapturesourceconfigsec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageCaptureControlPBMsg::set_allocated_imagecapturesourceconfigsec(::std::string* imagecapturesourceconfigsec) {
  if (imagecapturesourceconfigsec != NULL) {
    set_has_imagecapturesourceconfigsec();
  } else {
    clear_has_imagecapturesourceconfigsec();
  }
  imagecapturesourceconfigsec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imagecapturesourceconfigsec);
  // @@protoc_insertion_point(field_set_allocated:vision_messages.ImageCaptureControlPBMsg.ImageCaptureSourceConfigSec)
}

// optional bool ImageSourceLoopAround = 10;
bool ImageCaptureControlPBMsg::has_imagesourcelooparound() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ImageCaptureControlPBMsg::set_has_imagesourcelooparound() {
  _has_bits_[0] |= 0x00000200u;
}
void ImageCaptureControlPBMsg::clear_has_imagesourcelooparound() {
  _has_bits_[0] &= ~0x00000200u;
}
void ImageCaptureControlPBMsg::clear_imagesourcelooparound() {
  imagesourcelooparound_ = false;
  clear_has_imagesourcelooparound();
}
 bool ImageCaptureControlPBMsg::imagesourcelooparound() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCaptureControlPBMsg.ImageSourceLoopAround)
  return imagesourcelooparound_;
}
 void ImageCaptureControlPBMsg::set_imagesourcelooparound(bool value) {
  set_has_imagesourcelooparound();
  imagesourcelooparound_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageCaptureControlPBMsg.ImageSourceLoopAround)
}

// optional bool AutoFocusEnable = 11;
bool ImageCaptureControlPBMsg::has_autofocusenable() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ImageCaptureControlPBMsg::set_has_autofocusenable() {
  _has_bits_[0] |= 0x00000400u;
}
void ImageCaptureControlPBMsg::clear_has_autofocusenable() {
  _has_bits_[0] &= ~0x00000400u;
}
void ImageCaptureControlPBMsg::clear_autofocusenable() {
  autofocusenable_ = false;
  clear_has_autofocusenable();
}
 bool ImageCaptureControlPBMsg::autofocusenable() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCaptureControlPBMsg.AutoFocusEnable)
  return autofocusenable_;
}
 void ImageCaptureControlPBMsg::set_autofocusenable(bool value) {
  set_has_autofocusenable();
  autofocusenable_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageCaptureControlPBMsg.AutoFocusEnable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraParametersSetupPBMsg::kImageCaptureFormatFieldNumber;
const int CameraParametersSetupPBMsg::kModeFieldNumber;
const int CameraParametersSetupPBMsg::kFrameWidthFieldNumber;
const int CameraParametersSetupPBMsg::kFrameHeightFieldNumber;
const int CameraParametersSetupPBMsg::kFrameRateFPSFieldNumber;
const int CameraParametersSetupPBMsg::kAutofocusFieldNumber;
const int CameraParametersSetupPBMsg::kFocusValueFieldNumber;
const int CameraParametersSetupPBMsg::kBrightnessFieldNumber;
const int CameraParametersSetupPBMsg::kContrastFieldNumber;
const int CameraParametersSetupPBMsg::kSaturationFieldNumber;
const int CameraParametersSetupPBMsg::kHueFieldNumber;
const int CameraParametersSetupPBMsg::kGainFieldNumber;
const int CameraParametersSetupPBMsg::kExposureFieldNumber;
const int CameraParametersSetupPBMsg::kWhiteBallanceBlueFieldNumber;
const int CameraParametersSetupPBMsg::kWhiteBallanceRedFieldNumber;
const int CameraParametersSetupPBMsg::kExternalTriggerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraParametersSetupPBMsg::CameraParametersSetupPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.CameraParametersSetupPBMsg)
}

void CameraParametersSetupPBMsg::InitAsDefaultInstance() {
}

CameraParametersSetupPBMsg::CameraParametersSetupPBMsg(const CameraParametersSetupPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.CameraParametersSetupPBMsg)
}

void CameraParametersSetupPBMsg::SharedCtor() {
  _cached_size_ = 0;
  imagecaptureformat_ = 0;
  mode_ = 0u;
  framewidth_ = 0u;
  frameheight_ = 0u;
  frameratefps_ = 0;
  autofocus_ = false;
  focusvalue_ = 0;
  brightness_ = 0;
  contrast_ = 0;
  saturation_ = 0;
  hue_ = 0;
  gain_ = 0;
  exposure_ = 0;
  whiteballanceblue_ = 0;
  whiteballancered_ = 0;
  externaltrigger_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraParametersSetupPBMsg::~CameraParametersSetupPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.CameraParametersSetupPBMsg)
  SharedDtor();
}

void CameraParametersSetupPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraParametersSetupPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraParametersSetupPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraParametersSetupPBMsg_descriptor_;
}

const CameraParametersSetupPBMsg& CameraParametersSetupPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

CameraParametersSetupPBMsg* CameraParametersSetupPBMsg::default_instance_ = NULL;

CameraParametersSetupPBMsg* CameraParametersSetupPBMsg::New(::google::protobuf::Arena* arena) const {
  CameraParametersSetupPBMsg* n = new CameraParametersSetupPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraParametersSetupPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.CameraParametersSetupPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CameraParametersSetupPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CameraParametersSetupPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(imagecaptureformat_, brightness_);
    autofocus_ = false;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(contrast_, whiteballancered_);
    externaltrigger_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CameraParametersSetupPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.CameraParametersSetupPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vision_messages.CPImageCaptureFormat_e ImageCaptureFormat = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vision_messages::CPImageCaptureFormat_e_IsValid(value)) {
            set_imagecaptureformat(static_cast< ::vision_messages::CPImageCaptureFormat_e >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Mode;
        break;
      }

      // optional uint32 Mode = 2;
      case 2: {
        if (tag == 16) {
         parse_Mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FrameWidth;
        break;
      }

      // optional uint32 FrameWidth = 3;
      case 3: {
        if (tag == 24) {
         parse_FrameWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framewidth_)));
          set_has_framewidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_FrameHeight;
        break;
      }

      // optional uint32 FrameHeight = 4;
      case 4: {
        if (tag == 32) {
         parse_FrameHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frameheight_)));
          set_has_frameheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_FrameRateFPS;
        break;
      }

      // optional double FrameRateFPS = 5;
      case 5: {
        if (tag == 41) {
         parse_FrameRateFPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frameratefps_)));
          set_has_frameratefps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Autofocus;
        break;
      }

      // optional bool Autofocus = 6;
      case 6: {
        if (tag == 48) {
         parse_Autofocus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autofocus_)));
          set_has_autofocus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_FocusValue;
        break;
      }

      // optional double FocusValue = 7;
      case 7: {
        if (tag == 57) {
         parse_FocusValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &focusvalue_)));
          set_has_focusvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_Brightness;
        break;
      }

      // optional double Brightness = 8;
      case 8: {
        if (tag == 65) {
         parse_Brightness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brightness_)));
          set_has_brightness();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_Contrast;
        break;
      }

      // optional double Contrast = 9;
      case 9: {
        if (tag == 73) {
         parse_Contrast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &contrast_)));
          set_has_contrast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_Saturation;
        break;
      }

      // optional double Saturation = 10;
      case 10: {
        if (tag == 81) {
         parse_Saturation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &saturation_)));
          set_has_saturation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_Hue;
        break;
      }

      // optional double Hue = 11;
      case 11: {
        if (tag == 89) {
         parse_Hue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hue_)));
          set_has_hue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_Gain;
        break;
      }

      // optional double Gain = 12;
      case 12: {
        if (tag == 97) {
         parse_Gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_Exposure;
        break;
      }

      // optional double Exposure = 13;
      case 13: {
        if (tag == 105) {
         parse_Exposure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exposure_)));
          set_has_exposure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_WhiteBallanceBlue;
        break;
      }

      // optional double WhiteBallanceBlue = 14;
      case 14: {
        if (tag == 113) {
         parse_WhiteBallanceBlue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &whiteballanceblue_)));
          set_has_whiteballanceblue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_WhiteBallanceRed;
        break;
      }

      // optional double WhiteBallanceRed = 15;
      case 15: {
        if (tag == 121) {
         parse_WhiteBallanceRed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &whiteballancered_)));
          set_has_whiteballancered();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_ExternalTrigger;
        break;
      }

      // optional bool ExternalTrigger = 16;
      case 16: {
        if (tag == 128) {
         parse_ExternalTrigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &externaltrigger_)));
          set_has_externaltrigger();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.CameraParametersSetupPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.CameraParametersSetupPBMsg)
  return false;
#undef DO_
}

void CameraParametersSetupPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.CameraParametersSetupPBMsg)
  // optional .vision_messages.CPImageCaptureFormat_e ImageCaptureFormat = 1;
  if (has_imagecaptureformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->imagecaptureformat(), output);
  }

  // optional uint32 Mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mode(), output);
  }

  // optional uint32 FrameWidth = 3;
  if (has_framewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->framewidth(), output);
  }

  // optional uint32 FrameHeight = 4;
  if (has_frameheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->frameheight(), output);
  }

  // optional double FrameRateFPS = 5;
  if (has_frameratefps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->frameratefps(), output);
  }

  // optional bool Autofocus = 6;
  if (has_autofocus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->autofocus(), output);
  }

  // optional double FocusValue = 7;
  if (has_focusvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->focusvalue(), output);
  }

  // optional double Brightness = 8;
  if (has_brightness()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->brightness(), output);
  }

  // optional double Contrast = 9;
  if (has_contrast()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->contrast(), output);
  }

  // optional double Saturation = 10;
  if (has_saturation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->saturation(), output);
  }

  // optional double Hue = 11;
  if (has_hue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->hue(), output);
  }

  // optional double Gain = 12;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->gain(), output);
  }

  // optional double Exposure = 13;
  if (has_exposure()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->exposure(), output);
  }

  // optional double WhiteBallanceBlue = 14;
  if (has_whiteballanceblue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->whiteballanceblue(), output);
  }

  // optional double WhiteBallanceRed = 15;
  if (has_whiteballancered()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->whiteballancered(), output);
  }

  // optional bool ExternalTrigger = 16;
  if (has_externaltrigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->externaltrigger(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.CameraParametersSetupPBMsg)
}

::google::protobuf::uint8* CameraParametersSetupPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.CameraParametersSetupPBMsg)
  // optional .vision_messages.CPImageCaptureFormat_e ImageCaptureFormat = 1;
  if (has_imagecaptureformat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->imagecaptureformat(), target);
  }

  // optional uint32 Mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mode(), target);
  }

  // optional uint32 FrameWidth = 3;
  if (has_framewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->framewidth(), target);
  }

  // optional uint32 FrameHeight = 4;
  if (has_frameheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->frameheight(), target);
  }

  // optional double FrameRateFPS = 5;
  if (has_frameratefps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->frameratefps(), target);
  }

  // optional bool Autofocus = 6;
  if (has_autofocus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->autofocus(), target);
  }

  // optional double FocusValue = 7;
  if (has_focusvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->focusvalue(), target);
  }

  // optional double Brightness = 8;
  if (has_brightness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->brightness(), target);
  }

  // optional double Contrast = 9;
  if (has_contrast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->contrast(), target);
  }

  // optional double Saturation = 10;
  if (has_saturation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->saturation(), target);
  }

  // optional double Hue = 11;
  if (has_hue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->hue(), target);
  }

  // optional double Gain = 12;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->gain(), target);
  }

  // optional double Exposure = 13;
  if (has_exposure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->exposure(), target);
  }

  // optional double WhiteBallanceBlue = 14;
  if (has_whiteballanceblue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->whiteballanceblue(), target);
  }

  // optional double WhiteBallanceRed = 15;
  if (has_whiteballancered()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->whiteballancered(), target);
  }

  // optional bool ExternalTrigger = 16;
  if (has_externaltrigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->externaltrigger(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.CameraParametersSetupPBMsg)
  return target;
}

int CameraParametersSetupPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.CameraParametersSetupPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .vision_messages.CPImageCaptureFormat_e ImageCaptureFormat = 1;
    if (has_imagecaptureformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->imagecaptureformat());
    }

    // optional uint32 Mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

    // optional uint32 FrameWidth = 3;
    if (has_framewidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framewidth());
    }

    // optional uint32 FrameHeight = 4;
    if (has_frameheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frameheight());
    }

    // optional double FrameRateFPS = 5;
    if (has_frameratefps()) {
      total_size += 1 + 8;
    }

    // optional bool Autofocus = 6;
    if (has_autofocus()) {
      total_size += 1 + 1;
    }

    // optional double FocusValue = 7;
    if (has_focusvalue()) {
      total_size += 1 + 8;
    }

    // optional double Brightness = 8;
    if (has_brightness()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double Contrast = 9;
    if (has_contrast()) {
      total_size += 1 + 8;
    }

    // optional double Saturation = 10;
    if (has_saturation()) {
      total_size += 1 + 8;
    }

    // optional double Hue = 11;
    if (has_hue()) {
      total_size += 1 + 8;
    }

    // optional double Gain = 12;
    if (has_gain()) {
      total_size += 1 + 8;
    }

    // optional double Exposure = 13;
    if (has_exposure()) {
      total_size += 1 + 8;
    }

    // optional double WhiteBallanceBlue = 14;
    if (has_whiteballanceblue()) {
      total_size += 1 + 8;
    }

    // optional double WhiteBallanceRed = 15;
    if (has_whiteballancered()) {
      total_size += 1 + 8;
    }

    // optional bool ExternalTrigger = 16;
    if (has_externaltrigger()) {
      total_size += 2 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraParametersSetupPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.CameraParametersSetupPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CameraParametersSetupPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraParametersSetupPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.CameraParametersSetupPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.CameraParametersSetupPBMsg)
    MergeFrom(*source);
  }
}

void CameraParametersSetupPBMsg::MergeFrom(const CameraParametersSetupPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.CameraParametersSetupPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imagecaptureformat()) {
      set_imagecaptureformat(from.imagecaptureformat());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_framewidth()) {
      set_framewidth(from.framewidth());
    }
    if (from.has_frameheight()) {
      set_frameheight(from.frameheight());
    }
    if (from.has_frameratefps()) {
      set_frameratefps(from.frameratefps());
    }
    if (from.has_autofocus()) {
      set_autofocus(from.autofocus());
    }
    if (from.has_focusvalue()) {
      set_focusvalue(from.focusvalue());
    }
    if (from.has_brightness()) {
      set_brightness(from.brightness());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_contrast()) {
      set_contrast(from.contrast());
    }
    if (from.has_saturation()) {
      set_saturation(from.saturation());
    }
    if (from.has_hue()) {
      set_hue(from.hue());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
    if (from.has_exposure()) {
      set_exposure(from.exposure());
    }
    if (from.has_whiteballanceblue()) {
      set_whiteballanceblue(from.whiteballanceblue());
    }
    if (from.has_whiteballancered()) {
      set_whiteballancered(from.whiteballancered());
    }
    if (from.has_externaltrigger()) {
      set_externaltrigger(from.externaltrigger());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CameraParametersSetupPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.CameraParametersSetupPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraParametersSetupPBMsg::CopyFrom(const CameraParametersSetupPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.CameraParametersSetupPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraParametersSetupPBMsg::IsInitialized() const {

  return true;
}

void CameraParametersSetupPBMsg::Swap(CameraParametersSetupPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraParametersSetupPBMsg::InternalSwap(CameraParametersSetupPBMsg* other) {
  std::swap(imagecaptureformat_, other->imagecaptureformat_);
  std::swap(mode_, other->mode_);
  std::swap(framewidth_, other->framewidth_);
  std::swap(frameheight_, other->frameheight_);
  std::swap(frameratefps_, other->frameratefps_);
  std::swap(autofocus_, other->autofocus_);
  std::swap(focusvalue_, other->focusvalue_);
  std::swap(brightness_, other->brightness_);
  std::swap(contrast_, other->contrast_);
  std::swap(saturation_, other->saturation_);
  std::swap(hue_, other->hue_);
  std::swap(gain_, other->gain_);
  std::swap(exposure_, other->exposure_);
  std::swap(whiteballanceblue_, other->whiteballanceblue_);
  std::swap(whiteballancered_, other->whiteballancered_);
  std::swap(externaltrigger_, other->externaltrigger_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraParametersSetupPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraParametersSetupPBMsg_descriptor_;
  metadata.reflection = CameraParametersSetupPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraParametersSetupPBMsg

// optional .vision_messages.CPImageCaptureFormat_e ImageCaptureFormat = 1;
bool CameraParametersSetupPBMsg::has_imagecaptureformat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CameraParametersSetupPBMsg::set_has_imagecaptureformat() {
  _has_bits_[0] |= 0x00000001u;
}
void CameraParametersSetupPBMsg::clear_has_imagecaptureformat() {
  _has_bits_[0] &= ~0x00000001u;
}
void CameraParametersSetupPBMsg::clear_imagecaptureformat() {
  imagecaptureformat_ = 0;
  clear_has_imagecaptureformat();
}
 ::vision_messages::CPImageCaptureFormat_e CameraParametersSetupPBMsg::imagecaptureformat() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraParametersSetupPBMsg.ImageCaptureFormat)
  return static_cast< ::vision_messages::CPImageCaptureFormat_e >(imagecaptureformat_);
}
 void CameraParametersSetupPBMsg::set_imagecaptureformat(::vision_messages::CPImageCaptureFormat_e value) {
  assert(::vision_messages::CPImageCaptureFormat_e_IsValid(value));
  set_has_imagecaptureformat();
  imagecaptureformat_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraParametersSetupPBMsg.ImageCaptureFormat)
}

// optional uint32 Mode = 2;
bool CameraParametersSetupPBMsg::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CameraParametersSetupPBMsg::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void CameraParametersSetupPBMsg::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void CameraParametersSetupPBMsg::clear_mode() {
  mode_ = 0u;
  clear_has_mode();
}
 ::google::protobuf::uint32 CameraParametersSetupPBMsg::mode() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraParametersSetupPBMsg.Mode)
  return mode_;
}
 void CameraParametersSetupPBMsg::set_mode(::google::protobuf::uint32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraParametersSetupPBMsg.Mode)
}

// optional uint32 FrameWidth = 3;
bool CameraParametersSetupPBMsg::has_framewidth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CameraParametersSetupPBMsg::set_has_framewidth() {
  _has_bits_[0] |= 0x00000004u;
}
void CameraParametersSetupPBMsg::clear_has_framewidth() {
  _has_bits_[0] &= ~0x00000004u;
}
void CameraParametersSetupPBMsg::clear_framewidth() {
  framewidth_ = 0u;
  clear_has_framewidth();
}
 ::google::protobuf::uint32 CameraParametersSetupPBMsg::framewidth() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraParametersSetupPBMsg.FrameWidth)
  return framewidth_;
}
 void CameraParametersSetupPBMsg::set_framewidth(::google::protobuf::uint32 value) {
  set_has_framewidth();
  framewidth_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraParametersSetupPBMsg.FrameWidth)
}

// optional uint32 FrameHeight = 4;
bool CameraParametersSetupPBMsg::has_frameheight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CameraParametersSetupPBMsg::set_has_frameheight() {
  _has_bits_[0] |= 0x00000008u;
}
void CameraParametersSetupPBMsg::clear_has_frameheight() {
  _has_bits_[0] &= ~0x00000008u;
}
void CameraParametersSetupPBMsg::clear_frameheight() {
  frameheight_ = 0u;
  clear_has_frameheight();
}
 ::google::protobuf::uint32 CameraParametersSetupPBMsg::frameheight() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraParametersSetupPBMsg.FrameHeight)
  return frameheight_;
}
 void CameraParametersSetupPBMsg::set_frameheight(::google::protobuf::uint32 value) {
  set_has_frameheight();
  frameheight_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraParametersSetupPBMsg.FrameHeight)
}

// optional double FrameRateFPS = 5;
bool CameraParametersSetupPBMsg::has_frameratefps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CameraParametersSetupPBMsg::set_has_frameratefps() {
  _has_bits_[0] |= 0x00000010u;
}
void CameraParametersSetupPBMsg::clear_has_frameratefps() {
  _has_bits_[0] &= ~0x00000010u;
}
void CameraParametersSetupPBMsg::clear_frameratefps() {
  frameratefps_ = 0;
  clear_has_frameratefps();
}
 double CameraParametersSetupPBMsg::frameratefps() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraParametersSetupPBMsg.FrameRateFPS)
  return frameratefps_;
}
 void CameraParametersSetupPBMsg::set_frameratefps(double value) {
  set_has_frameratefps();
  frameratefps_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraParametersSetupPBMsg.FrameRateFPS)
}

// optional bool Autofocus = 6;
bool CameraParametersSetupPBMsg::has_autofocus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CameraParametersSetupPBMsg::set_has_autofocus() {
  _has_bits_[0] |= 0x00000020u;
}
void CameraParametersSetupPBMsg::clear_has_autofocus() {
  _has_bits_[0] &= ~0x00000020u;
}
void CameraParametersSetupPBMsg::clear_autofocus() {
  autofocus_ = false;
  clear_has_autofocus();
}
 bool CameraParametersSetupPBMsg::autofocus() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraParametersSetupPBMsg.Autofocus)
  return autofocus_;
}
 void CameraParametersSetupPBMsg::set_autofocus(bool value) {
  set_has_autofocus();
  autofocus_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraParametersSetupPBMsg.Autofocus)
}

// optional double FocusValue = 7;
bool CameraParametersSetupPBMsg::has_focusvalue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CameraParametersSetupPBMsg::set_has_focusvalue() {
  _has_bits_[0] |= 0x00000040u;
}
void CameraParametersSetupPBMsg::clear_has_focusvalue() {
  _has_bits_[0] &= ~0x00000040u;
}
void CameraParametersSetupPBMsg::clear_focusvalue() {
  focusvalue_ = 0;
  clear_has_focusvalue();
}
 double CameraParametersSetupPBMsg::focusvalue() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraParametersSetupPBMsg.FocusValue)
  return focusvalue_;
}
 void CameraParametersSetupPBMsg::set_focusvalue(double value) {
  set_has_focusvalue();
  focusvalue_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraParametersSetupPBMsg.FocusValue)
}

// optional double Brightness = 8;
bool CameraParametersSetupPBMsg::has_brightness() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CameraParametersSetupPBMsg::set_has_brightness() {
  _has_bits_[0] |= 0x00000080u;
}
void CameraParametersSetupPBMsg::clear_has_brightness() {
  _has_bits_[0] &= ~0x00000080u;
}
void CameraParametersSetupPBMsg::clear_brightness() {
  brightness_ = 0;
  clear_has_brightness();
}
 double CameraParametersSetupPBMsg::brightness() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraParametersSetupPBMsg.Brightness)
  return brightness_;
}
 void CameraParametersSetupPBMsg::set_brightness(double value) {
  set_has_brightness();
  brightness_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraParametersSetupPBMsg.Brightness)
}

// optional double Contrast = 9;
bool CameraParametersSetupPBMsg::has_contrast() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CameraParametersSetupPBMsg::set_has_contrast() {
  _has_bits_[0] |= 0x00000100u;
}
void CameraParametersSetupPBMsg::clear_has_contrast() {
  _has_bits_[0] &= ~0x00000100u;
}
void CameraParametersSetupPBMsg::clear_contrast() {
  contrast_ = 0;
  clear_has_contrast();
}
 double CameraParametersSetupPBMsg::contrast() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraParametersSetupPBMsg.Contrast)
  return contrast_;
}
 void CameraParametersSetupPBMsg::set_contrast(double value) {
  set_has_contrast();
  contrast_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraParametersSetupPBMsg.Contrast)
}

// optional double Saturation = 10;
bool CameraParametersSetupPBMsg::has_saturation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CameraParametersSetupPBMsg::set_has_saturation() {
  _has_bits_[0] |= 0x00000200u;
}
void CameraParametersSetupPBMsg::clear_has_saturation() {
  _has_bits_[0] &= ~0x00000200u;
}
void CameraParametersSetupPBMsg::clear_saturation() {
  saturation_ = 0;
  clear_has_saturation();
}
 double CameraParametersSetupPBMsg::saturation() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraParametersSetupPBMsg.Saturation)
  return saturation_;
}
 void CameraParametersSetupPBMsg::set_saturation(double value) {
  set_has_saturation();
  saturation_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraParametersSetupPBMsg.Saturation)
}

// optional double Hue = 11;
bool CameraParametersSetupPBMsg::has_hue() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CameraParametersSetupPBMsg::set_has_hue() {
  _has_bits_[0] |= 0x00000400u;
}
void CameraParametersSetupPBMsg::clear_has_hue() {
  _has_bits_[0] &= ~0x00000400u;
}
void CameraParametersSetupPBMsg::clear_hue() {
  hue_ = 0;
  clear_has_hue();
}
 double CameraParametersSetupPBMsg::hue() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraParametersSetupPBMsg.Hue)
  return hue_;
}
 void CameraParametersSetupPBMsg::set_hue(double value) {
  set_has_hue();
  hue_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraParametersSetupPBMsg.Hue)
}

// optional double Gain = 12;
bool CameraParametersSetupPBMsg::has_gain() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CameraParametersSetupPBMsg::set_has_gain() {
  _has_bits_[0] |= 0x00000800u;
}
void CameraParametersSetupPBMsg::clear_has_gain() {
  _has_bits_[0] &= ~0x00000800u;
}
void CameraParametersSetupPBMsg::clear_gain() {
  gain_ = 0;
  clear_has_gain();
}
 double CameraParametersSetupPBMsg::gain() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraParametersSetupPBMsg.Gain)
  return gain_;
}
 void CameraParametersSetupPBMsg::set_gain(double value) {
  set_has_gain();
  gain_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraParametersSetupPBMsg.Gain)
}

// optional double Exposure = 13;
bool CameraParametersSetupPBMsg::has_exposure() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CameraParametersSetupPBMsg::set_has_exposure() {
  _has_bits_[0] |= 0x00001000u;
}
void CameraParametersSetupPBMsg::clear_has_exposure() {
  _has_bits_[0] &= ~0x00001000u;
}
void CameraParametersSetupPBMsg::clear_exposure() {
  exposure_ = 0;
  clear_has_exposure();
}
 double CameraParametersSetupPBMsg::exposure() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraParametersSetupPBMsg.Exposure)
  return exposure_;
}
 void CameraParametersSetupPBMsg::set_exposure(double value) {
  set_has_exposure();
  exposure_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraParametersSetupPBMsg.Exposure)
}

// optional double WhiteBallanceBlue = 14;
bool CameraParametersSetupPBMsg::has_whiteballanceblue() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CameraParametersSetupPBMsg::set_has_whiteballanceblue() {
  _has_bits_[0] |= 0x00002000u;
}
void CameraParametersSetupPBMsg::clear_has_whiteballanceblue() {
  _has_bits_[0] &= ~0x00002000u;
}
void CameraParametersSetupPBMsg::clear_whiteballanceblue() {
  whiteballanceblue_ = 0;
  clear_has_whiteballanceblue();
}
 double CameraParametersSetupPBMsg::whiteballanceblue() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraParametersSetupPBMsg.WhiteBallanceBlue)
  return whiteballanceblue_;
}
 void CameraParametersSetupPBMsg::set_whiteballanceblue(double value) {
  set_has_whiteballanceblue();
  whiteballanceblue_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraParametersSetupPBMsg.WhiteBallanceBlue)
}

// optional double WhiteBallanceRed = 15;
bool CameraParametersSetupPBMsg::has_whiteballancered() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CameraParametersSetupPBMsg::set_has_whiteballancered() {
  _has_bits_[0] |= 0x00004000u;
}
void CameraParametersSetupPBMsg::clear_has_whiteballancered() {
  _has_bits_[0] &= ~0x00004000u;
}
void CameraParametersSetupPBMsg::clear_whiteballancered() {
  whiteballancered_ = 0;
  clear_has_whiteballancered();
}
 double CameraParametersSetupPBMsg::whiteballancered() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraParametersSetupPBMsg.WhiteBallanceRed)
  return whiteballancered_;
}
 void CameraParametersSetupPBMsg::set_whiteballancered(double value) {
  set_has_whiteballancered();
  whiteballancered_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraParametersSetupPBMsg.WhiteBallanceRed)
}

// optional bool ExternalTrigger = 16;
bool CameraParametersSetupPBMsg::has_externaltrigger() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CameraParametersSetupPBMsg::set_has_externaltrigger() {
  _has_bits_[0] |= 0x00008000u;
}
void CameraParametersSetupPBMsg::clear_has_externaltrigger() {
  _has_bits_[0] &= ~0x00008000u;
}
void CameraParametersSetupPBMsg::clear_externaltrigger() {
  externaltrigger_ = false;
  clear_has_externaltrigger();
}
 bool CameraParametersSetupPBMsg::externaltrigger() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraParametersSetupPBMsg.ExternalTrigger)
  return externaltrigger_;
}
 void CameraParametersSetupPBMsg::set_externaltrigger(bool value) {
  set_has_externaltrigger();
  externaltrigger_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraParametersSetupPBMsg.ExternalTrigger)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamControlPBMsg::kStreamImagesEnabledFieldNumber;
const int StreamControlPBMsg::kStreamImageFrameRateFieldNumber;
const int StreamControlPBMsg::kImageCompressionQualityFieldNumber;
const int StreamControlPBMsg::kStreamImageScaleDownFactorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamControlPBMsg::StreamControlPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.StreamControlPBMsg)
}

void StreamControlPBMsg::InitAsDefaultInstance() {
}

StreamControlPBMsg::StreamControlPBMsg(const StreamControlPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.StreamControlPBMsg)
}

void StreamControlPBMsg::SharedCtor() {
  _cached_size_ = 0;
  streamimagesenabled_ = false;
  streamimageframerate_ = 0;
  imagecompressionquality_ = 0u;
  streamimagescaledownfactor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamControlPBMsg::~StreamControlPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.StreamControlPBMsg)
  SharedDtor();
}

void StreamControlPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamControlPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamControlPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamControlPBMsg_descriptor_;
}

const StreamControlPBMsg& StreamControlPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

StreamControlPBMsg* StreamControlPBMsg::default_instance_ = NULL;

StreamControlPBMsg* StreamControlPBMsg::New(::google::protobuf::Arena* arena) const {
  StreamControlPBMsg* n = new StreamControlPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamControlPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.StreamControlPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StreamControlPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StreamControlPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(streamimageframerate_, streamimagescaledownfactor_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StreamControlPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.StreamControlPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool StreamImagesEnabled = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &streamimagesenabled_)));
          set_has_streamimagesenabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_StreamImageFrameRate;
        break;
      }

      // optional double StreamImageFrameRate = 2;
      case 2: {
        if (tag == 17) {
         parse_StreamImageFrameRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &streamimageframerate_)));
          set_has_streamimageframerate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ImageCompressionQuality;
        break;
      }

      // optional uint32 ImageCompressionQuality = 3;
      case 3: {
        if (tag == 24) {
         parse_ImageCompressionQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imagecompressionquality_)));
          set_has_imagecompressionquality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_StreamImageScaleDownFactor;
        break;
      }

      // optional double StreamImageScaleDownFactor = 4;
      case 4: {
        if (tag == 33) {
         parse_StreamImageScaleDownFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &streamimagescaledownfactor_)));
          set_has_streamimagescaledownfactor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.StreamControlPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.StreamControlPBMsg)
  return false;
#undef DO_
}

void StreamControlPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.StreamControlPBMsg)
  // optional bool StreamImagesEnabled = 1;
  if (has_streamimagesenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->streamimagesenabled(), output);
  }

  // optional double StreamImageFrameRate = 2;
  if (has_streamimageframerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->streamimageframerate(), output);
  }

  // optional uint32 ImageCompressionQuality = 3;
  if (has_imagecompressionquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->imagecompressionquality(), output);
  }

  // optional double StreamImageScaleDownFactor = 4;
  if (has_streamimagescaledownfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->streamimagescaledownfactor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.StreamControlPBMsg)
}

::google::protobuf::uint8* StreamControlPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.StreamControlPBMsg)
  // optional bool StreamImagesEnabled = 1;
  if (has_streamimagesenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->streamimagesenabled(), target);
  }

  // optional double StreamImageFrameRate = 2;
  if (has_streamimageframerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->streamimageframerate(), target);
  }

  // optional uint32 ImageCompressionQuality = 3;
  if (has_imagecompressionquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->imagecompressionquality(), target);
  }

  // optional double StreamImageScaleDownFactor = 4;
  if (has_streamimagescaledownfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->streamimagescaledownfactor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.StreamControlPBMsg)
  return target;
}

int StreamControlPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.StreamControlPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional bool StreamImagesEnabled = 1;
    if (has_streamimagesenabled()) {
      total_size += 1 + 1;
    }

    // optional double StreamImageFrameRate = 2;
    if (has_streamimageframerate()) {
      total_size += 1 + 8;
    }

    // optional uint32 ImageCompressionQuality = 3;
    if (has_imagecompressionquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imagecompressionquality());
    }

    // optional double StreamImageScaleDownFactor = 4;
    if (has_streamimagescaledownfactor()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamControlPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.StreamControlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StreamControlPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamControlPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.StreamControlPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.StreamControlPBMsg)
    MergeFrom(*source);
  }
}

void StreamControlPBMsg::MergeFrom(const StreamControlPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.StreamControlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_streamimagesenabled()) {
      set_streamimagesenabled(from.streamimagesenabled());
    }
    if (from.has_streamimageframerate()) {
      set_streamimageframerate(from.streamimageframerate());
    }
    if (from.has_imagecompressionquality()) {
      set_imagecompressionquality(from.imagecompressionquality());
    }
    if (from.has_streamimagescaledownfactor()) {
      set_streamimagescaledownfactor(from.streamimagescaledownfactor());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StreamControlPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.StreamControlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamControlPBMsg::CopyFrom(const StreamControlPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.StreamControlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamControlPBMsg::IsInitialized() const {

  return true;
}

void StreamControlPBMsg::Swap(StreamControlPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamControlPBMsg::InternalSwap(StreamControlPBMsg* other) {
  std::swap(streamimagesenabled_, other->streamimagesenabled_);
  std::swap(streamimageframerate_, other->streamimageframerate_);
  std::swap(imagecompressionquality_, other->imagecompressionquality_);
  std::swap(streamimagescaledownfactor_, other->streamimagescaledownfactor_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamControlPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamControlPBMsg_descriptor_;
  metadata.reflection = StreamControlPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamControlPBMsg

// optional bool StreamImagesEnabled = 1;
bool StreamControlPBMsg::has_streamimagesenabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StreamControlPBMsg::set_has_streamimagesenabled() {
  _has_bits_[0] |= 0x00000001u;
}
void StreamControlPBMsg::clear_has_streamimagesenabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void StreamControlPBMsg::clear_streamimagesenabled() {
  streamimagesenabled_ = false;
  clear_has_streamimagesenabled();
}
 bool StreamControlPBMsg::streamimagesenabled() const {
  // @@protoc_insertion_point(field_get:vision_messages.StreamControlPBMsg.StreamImagesEnabled)
  return streamimagesenabled_;
}
 void StreamControlPBMsg::set_streamimagesenabled(bool value) {
  set_has_streamimagesenabled();
  streamimagesenabled_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.StreamControlPBMsg.StreamImagesEnabled)
}

// optional double StreamImageFrameRate = 2;
bool StreamControlPBMsg::has_streamimageframerate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StreamControlPBMsg::set_has_streamimageframerate() {
  _has_bits_[0] |= 0x00000002u;
}
void StreamControlPBMsg::clear_has_streamimageframerate() {
  _has_bits_[0] &= ~0x00000002u;
}
void StreamControlPBMsg::clear_streamimageframerate() {
  streamimageframerate_ = 0;
  clear_has_streamimageframerate();
}
 double StreamControlPBMsg::streamimageframerate() const {
  // @@protoc_insertion_point(field_get:vision_messages.StreamControlPBMsg.StreamImageFrameRate)
  return streamimageframerate_;
}
 void StreamControlPBMsg::set_streamimageframerate(double value) {
  set_has_streamimageframerate();
  streamimageframerate_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.StreamControlPBMsg.StreamImageFrameRate)
}

// optional uint32 ImageCompressionQuality = 3;
bool StreamControlPBMsg::has_imagecompressionquality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StreamControlPBMsg::set_has_imagecompressionquality() {
  _has_bits_[0] |= 0x00000004u;
}
void StreamControlPBMsg::clear_has_imagecompressionquality() {
  _has_bits_[0] &= ~0x00000004u;
}
void StreamControlPBMsg::clear_imagecompressionquality() {
  imagecompressionquality_ = 0u;
  clear_has_imagecompressionquality();
}
 ::google::protobuf::uint32 StreamControlPBMsg::imagecompressionquality() const {
  // @@protoc_insertion_point(field_get:vision_messages.StreamControlPBMsg.ImageCompressionQuality)
  return imagecompressionquality_;
}
 void StreamControlPBMsg::set_imagecompressionquality(::google::protobuf::uint32 value) {
  set_has_imagecompressionquality();
  imagecompressionquality_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.StreamControlPBMsg.ImageCompressionQuality)
}

// optional double StreamImageScaleDownFactor = 4;
bool StreamControlPBMsg::has_streamimagescaledownfactor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StreamControlPBMsg::set_has_streamimagescaledownfactor() {
  _has_bits_[0] |= 0x00000008u;
}
void StreamControlPBMsg::clear_has_streamimagescaledownfactor() {
  _has_bits_[0] &= ~0x00000008u;
}
void StreamControlPBMsg::clear_streamimagescaledownfactor() {
  streamimagescaledownfactor_ = 0;
  clear_has_streamimagescaledownfactor();
}
 double StreamControlPBMsg::streamimagescaledownfactor() const {
  // @@protoc_insertion_point(field_get:vision_messages.StreamControlPBMsg.StreamImageScaleDownFactor)
  return streamimagescaledownfactor_;
}
 void StreamControlPBMsg::set_streamimagescaledownfactor(double value) {
  set_has_streamimagescaledownfactor();
  streamimagescaledownfactor_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.StreamControlPBMsg.StreamImageScaleDownFactor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageCaptureStatusPBMsg::kImageCaptureEnabledFieldNumber;
const int ImageCaptureStatusPBMsg::kImageCaptureCompleteFieldNumber;
const int ImageCaptureStatusPBMsg::kEndOfImagesFieldNumber;
const int ImageCaptureStatusPBMsg::kTotalNumberOfImagesCapturedFieldNumber;
const int ImageCaptureStatusPBMsg::kCurrentNumberOfImagesCapturedFieldNumber;
const int ImageCaptureStatusPBMsg::kAverageFramesPerSecondFieldNumber;
const int ImageCaptureStatusPBMsg::kImageCaptureSourceFieldNumber;
const int ImageCaptureStatusPBMsg::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageCaptureStatusPBMsg::ImageCaptureStatusPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.ImageCaptureStatusPBMsg)
}

void ImageCaptureStatusPBMsg::InitAsDefaultInstance() {
}

ImageCaptureStatusPBMsg::ImageCaptureStatusPBMsg(const ImageCaptureStatusPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.ImageCaptureStatusPBMsg)
}

void ImageCaptureStatusPBMsg::SharedCtor() {
  _cached_size_ = 0;
  imagecaptureenabled_ = false;
  imagecapturecomplete_ = false;
  endofimages_ = false;
  totalnumberofimagescaptured_ = 0u;
  currentnumberofimagescaptured_ = 0u;
  averageframespersecond_ = 0;
  imagecapturesource_ = 0;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageCaptureStatusPBMsg::~ImageCaptureStatusPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.ImageCaptureStatusPBMsg)
  SharedDtor();
}

void ImageCaptureStatusPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImageCaptureStatusPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageCaptureStatusPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageCaptureStatusPBMsg_descriptor_;
}

const ImageCaptureStatusPBMsg& ImageCaptureStatusPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

ImageCaptureStatusPBMsg* ImageCaptureStatusPBMsg::default_instance_ = NULL;

ImageCaptureStatusPBMsg* ImageCaptureStatusPBMsg::New(::google::protobuf::Arena* arena) const {
  ImageCaptureStatusPBMsg* n = new ImageCaptureStatusPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageCaptureStatusPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.ImageCaptureStatusPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImageCaptureStatusPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImageCaptureStatusPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(imagecaptureenabled_, errorcode_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImageCaptureStatusPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.ImageCaptureStatusPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ImageCaptureEnabled = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &imagecaptureenabled_)));
          set_has_imagecaptureenabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ImageCaptureComplete;
        break;
      }

      // optional bool ImageCaptureComplete = 2;
      case 2: {
        if (tag == 16) {
         parse_ImageCaptureComplete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &imagecapturecomplete_)));
          set_has_imagecapturecomplete();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EndOfImages;
        break;
      }

      // optional bool EndOfImages = 3;
      case 3: {
        if (tag == 24) {
         parse_EndOfImages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &endofimages_)));
          set_has_endofimages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TotalNumberOfImagesCaptured;
        break;
      }

      // optional uint32 TotalNumberOfImagesCaptured = 4;
      case 4: {
        if (tag == 32) {
         parse_TotalNumberOfImagesCaptured:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalnumberofimagescaptured_)));
          set_has_totalnumberofimagescaptured();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CurrentNumberOfImagesCaptured;
        break;
      }

      // optional uint32 CurrentNumberOfImagesCaptured = 5;
      case 5: {
        if (tag == 40) {
         parse_CurrentNumberOfImagesCaptured:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentnumberofimagescaptured_)));
          set_has_currentnumberofimagescaptured();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_AverageFramesPerSecond;
        break;
      }

      // optional double AverageFramesPerSecond = 6;
      case 6: {
        if (tag == 49) {
         parse_AverageFramesPerSecond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &averageframespersecond_)));
          set_has_averageframespersecond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ImageCaptureSource;
        break;
      }

      // optional .vision_messages.ImageCaptureSource_e ImageCaptureSource = 7;
      case 7: {
        if (tag == 56) {
         parse_ImageCaptureSource:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vision_messages::ImageCaptureSource_e_IsValid(value)) {
            set_imagecapturesource(static_cast< ::vision_messages::ImageCaptureSource_e >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ErrorCode;
        break;
      }

      // optional .vision_messages.ImageCaptureError_e ErrorCode = 8;
      case 8: {
        if (tag == 64) {
         parse_ErrorCode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vision_messages::ImageCaptureError_e_IsValid(value)) {
            set_errorcode(static_cast< ::vision_messages::ImageCaptureError_e >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.ImageCaptureStatusPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.ImageCaptureStatusPBMsg)
  return false;
#undef DO_
}

void ImageCaptureStatusPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.ImageCaptureStatusPBMsg)
  // optional bool ImageCaptureEnabled = 1;
  if (has_imagecaptureenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->imagecaptureenabled(), output);
  }

  // optional bool ImageCaptureComplete = 2;
  if (has_imagecapturecomplete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->imagecapturecomplete(), output);
  }

  // optional bool EndOfImages = 3;
  if (has_endofimages()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->endofimages(), output);
  }

  // optional uint32 TotalNumberOfImagesCaptured = 4;
  if (has_totalnumberofimagescaptured()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->totalnumberofimagescaptured(), output);
  }

  // optional uint32 CurrentNumberOfImagesCaptured = 5;
  if (has_currentnumberofimagescaptured()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->currentnumberofimagescaptured(), output);
  }

  // optional double AverageFramesPerSecond = 6;
  if (has_averageframespersecond()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->averageframespersecond(), output);
  }

  // optional .vision_messages.ImageCaptureSource_e ImageCaptureSource = 7;
  if (has_imagecapturesource()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->imagecapturesource(), output);
  }

  // optional .vision_messages.ImageCaptureError_e ErrorCode = 8;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->errorcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.ImageCaptureStatusPBMsg)
}

::google::protobuf::uint8* ImageCaptureStatusPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.ImageCaptureStatusPBMsg)
  // optional bool ImageCaptureEnabled = 1;
  if (has_imagecaptureenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->imagecaptureenabled(), target);
  }

  // optional bool ImageCaptureComplete = 2;
  if (has_imagecapturecomplete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->imagecapturecomplete(), target);
  }

  // optional bool EndOfImages = 3;
  if (has_endofimages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->endofimages(), target);
  }

  // optional uint32 TotalNumberOfImagesCaptured = 4;
  if (has_totalnumberofimagescaptured()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->totalnumberofimagescaptured(), target);
  }

  // optional uint32 CurrentNumberOfImagesCaptured = 5;
  if (has_currentnumberofimagescaptured()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->currentnumberofimagescaptured(), target);
  }

  // optional double AverageFramesPerSecond = 6;
  if (has_averageframespersecond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->averageframespersecond(), target);
  }

  // optional .vision_messages.ImageCaptureSource_e ImageCaptureSource = 7;
  if (has_imagecapturesource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->imagecapturesource(), target);
  }

  // optional .vision_messages.ImageCaptureError_e ErrorCode = 8;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->errorcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.ImageCaptureStatusPBMsg)
  return target;
}

int ImageCaptureStatusPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.ImageCaptureStatusPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool ImageCaptureEnabled = 1;
    if (has_imagecaptureenabled()) {
      total_size += 1 + 1;
    }

    // optional bool ImageCaptureComplete = 2;
    if (has_imagecapturecomplete()) {
      total_size += 1 + 1;
    }

    // optional bool EndOfImages = 3;
    if (has_endofimages()) {
      total_size += 1 + 1;
    }

    // optional uint32 TotalNumberOfImagesCaptured = 4;
    if (has_totalnumberofimagescaptured()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalnumberofimagescaptured());
    }

    // optional uint32 CurrentNumberOfImagesCaptured = 5;
    if (has_currentnumberofimagescaptured()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currentnumberofimagescaptured());
    }

    // optional double AverageFramesPerSecond = 6;
    if (has_averageframespersecond()) {
      total_size += 1 + 8;
    }

    // optional .vision_messages.ImageCaptureSource_e ImageCaptureSource = 7;
    if (has_imagecapturesource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->imagecapturesource());
    }

    // optional .vision_messages.ImageCaptureError_e ErrorCode = 8;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errorcode());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageCaptureStatusPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.ImageCaptureStatusPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImageCaptureStatusPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageCaptureStatusPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.ImageCaptureStatusPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.ImageCaptureStatusPBMsg)
    MergeFrom(*source);
  }
}

void ImageCaptureStatusPBMsg::MergeFrom(const ImageCaptureStatusPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.ImageCaptureStatusPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imagecaptureenabled()) {
      set_imagecaptureenabled(from.imagecaptureenabled());
    }
    if (from.has_imagecapturecomplete()) {
      set_imagecapturecomplete(from.imagecapturecomplete());
    }
    if (from.has_endofimages()) {
      set_endofimages(from.endofimages());
    }
    if (from.has_totalnumberofimagescaptured()) {
      set_totalnumberofimagescaptured(from.totalnumberofimagescaptured());
    }
    if (from.has_currentnumberofimagescaptured()) {
      set_currentnumberofimagescaptured(from.currentnumberofimagescaptured());
    }
    if (from.has_averageframespersecond()) {
      set_averageframespersecond(from.averageframespersecond());
    }
    if (from.has_imagecapturesource()) {
      set_imagecapturesource(from.imagecapturesource());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ImageCaptureStatusPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.ImageCaptureStatusPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageCaptureStatusPBMsg::CopyFrom(const ImageCaptureStatusPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.ImageCaptureStatusPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageCaptureStatusPBMsg::IsInitialized() const {

  return true;
}

void ImageCaptureStatusPBMsg::Swap(ImageCaptureStatusPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageCaptureStatusPBMsg::InternalSwap(ImageCaptureStatusPBMsg* other) {
  std::swap(imagecaptureenabled_, other->imagecaptureenabled_);
  std::swap(imagecapturecomplete_, other->imagecapturecomplete_);
  std::swap(endofimages_, other->endofimages_);
  std::swap(totalnumberofimagescaptured_, other->totalnumberofimagescaptured_);
  std::swap(currentnumberofimagescaptured_, other->currentnumberofimagescaptured_);
  std::swap(averageframespersecond_, other->averageframespersecond_);
  std::swap(imagecapturesource_, other->imagecapturesource_);
  std::swap(errorcode_, other->errorcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageCaptureStatusPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageCaptureStatusPBMsg_descriptor_;
  metadata.reflection = ImageCaptureStatusPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageCaptureStatusPBMsg

// optional bool ImageCaptureEnabled = 1;
bool ImageCaptureStatusPBMsg::has_imagecaptureenabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageCaptureStatusPBMsg::set_has_imagecaptureenabled() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageCaptureStatusPBMsg::clear_has_imagecaptureenabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageCaptureStatusPBMsg::clear_imagecaptureenabled() {
  imagecaptureenabled_ = false;
  clear_has_imagecaptureenabled();
}
 bool ImageCaptureStatusPBMsg::imagecaptureenabled() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCaptureStatusPBMsg.ImageCaptureEnabled)
  return imagecaptureenabled_;
}
 void ImageCaptureStatusPBMsg::set_imagecaptureenabled(bool value) {
  set_has_imagecaptureenabled();
  imagecaptureenabled_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageCaptureStatusPBMsg.ImageCaptureEnabled)
}

// optional bool ImageCaptureComplete = 2;
bool ImageCaptureStatusPBMsg::has_imagecapturecomplete() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageCaptureStatusPBMsg::set_has_imagecapturecomplete() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageCaptureStatusPBMsg::clear_has_imagecapturecomplete() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageCaptureStatusPBMsg::clear_imagecapturecomplete() {
  imagecapturecomplete_ = false;
  clear_has_imagecapturecomplete();
}
 bool ImageCaptureStatusPBMsg::imagecapturecomplete() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCaptureStatusPBMsg.ImageCaptureComplete)
  return imagecapturecomplete_;
}
 void ImageCaptureStatusPBMsg::set_imagecapturecomplete(bool value) {
  set_has_imagecapturecomplete();
  imagecapturecomplete_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageCaptureStatusPBMsg.ImageCaptureComplete)
}

// optional bool EndOfImages = 3;
bool ImageCaptureStatusPBMsg::has_endofimages() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageCaptureStatusPBMsg::set_has_endofimages() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageCaptureStatusPBMsg::clear_has_endofimages() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageCaptureStatusPBMsg::clear_endofimages() {
  endofimages_ = false;
  clear_has_endofimages();
}
 bool ImageCaptureStatusPBMsg::endofimages() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCaptureStatusPBMsg.EndOfImages)
  return endofimages_;
}
 void ImageCaptureStatusPBMsg::set_endofimages(bool value) {
  set_has_endofimages();
  endofimages_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageCaptureStatusPBMsg.EndOfImages)
}

// optional uint32 TotalNumberOfImagesCaptured = 4;
bool ImageCaptureStatusPBMsg::has_totalnumberofimagescaptured() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageCaptureStatusPBMsg::set_has_totalnumberofimagescaptured() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageCaptureStatusPBMsg::clear_has_totalnumberofimagescaptured() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageCaptureStatusPBMsg::clear_totalnumberofimagescaptured() {
  totalnumberofimagescaptured_ = 0u;
  clear_has_totalnumberofimagescaptured();
}
 ::google::protobuf::uint32 ImageCaptureStatusPBMsg::totalnumberofimagescaptured() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCaptureStatusPBMsg.TotalNumberOfImagesCaptured)
  return totalnumberofimagescaptured_;
}
 void ImageCaptureStatusPBMsg::set_totalnumberofimagescaptured(::google::protobuf::uint32 value) {
  set_has_totalnumberofimagescaptured();
  totalnumberofimagescaptured_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageCaptureStatusPBMsg.TotalNumberOfImagesCaptured)
}

// optional uint32 CurrentNumberOfImagesCaptured = 5;
bool ImageCaptureStatusPBMsg::has_currentnumberofimagescaptured() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageCaptureStatusPBMsg::set_has_currentnumberofimagescaptured() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageCaptureStatusPBMsg::clear_has_currentnumberofimagescaptured() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageCaptureStatusPBMsg::clear_currentnumberofimagescaptured() {
  currentnumberofimagescaptured_ = 0u;
  clear_has_currentnumberofimagescaptured();
}
 ::google::protobuf::uint32 ImageCaptureStatusPBMsg::currentnumberofimagescaptured() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCaptureStatusPBMsg.CurrentNumberOfImagesCaptured)
  return currentnumberofimagescaptured_;
}
 void ImageCaptureStatusPBMsg::set_currentnumberofimagescaptured(::google::protobuf::uint32 value) {
  set_has_currentnumberofimagescaptured();
  currentnumberofimagescaptured_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageCaptureStatusPBMsg.CurrentNumberOfImagesCaptured)
}

// optional double AverageFramesPerSecond = 6;
bool ImageCaptureStatusPBMsg::has_averageframespersecond() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageCaptureStatusPBMsg::set_has_averageframespersecond() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageCaptureStatusPBMsg::clear_has_averageframespersecond() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageCaptureStatusPBMsg::clear_averageframespersecond() {
  averageframespersecond_ = 0;
  clear_has_averageframespersecond();
}
 double ImageCaptureStatusPBMsg::averageframespersecond() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCaptureStatusPBMsg.AverageFramesPerSecond)
  return averageframespersecond_;
}
 void ImageCaptureStatusPBMsg::set_averageframespersecond(double value) {
  set_has_averageframespersecond();
  averageframespersecond_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageCaptureStatusPBMsg.AverageFramesPerSecond)
}

// optional .vision_messages.ImageCaptureSource_e ImageCaptureSource = 7;
bool ImageCaptureStatusPBMsg::has_imagecapturesource() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ImageCaptureStatusPBMsg::set_has_imagecapturesource() {
  _has_bits_[0] |= 0x00000040u;
}
void ImageCaptureStatusPBMsg::clear_has_imagecapturesource() {
  _has_bits_[0] &= ~0x00000040u;
}
void ImageCaptureStatusPBMsg::clear_imagecapturesource() {
  imagecapturesource_ = 0;
  clear_has_imagecapturesource();
}
 ::vision_messages::ImageCaptureSource_e ImageCaptureStatusPBMsg::imagecapturesource() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCaptureStatusPBMsg.ImageCaptureSource)
  return static_cast< ::vision_messages::ImageCaptureSource_e >(imagecapturesource_);
}
 void ImageCaptureStatusPBMsg::set_imagecapturesource(::vision_messages::ImageCaptureSource_e value) {
  assert(::vision_messages::ImageCaptureSource_e_IsValid(value));
  set_has_imagecapturesource();
  imagecapturesource_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageCaptureStatusPBMsg.ImageCaptureSource)
}

// optional .vision_messages.ImageCaptureError_e ErrorCode = 8;
bool ImageCaptureStatusPBMsg::has_errorcode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ImageCaptureStatusPBMsg::set_has_errorcode() {
  _has_bits_[0] |= 0x00000080u;
}
void ImageCaptureStatusPBMsg::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000080u;
}
void ImageCaptureStatusPBMsg::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
 ::vision_messages::ImageCaptureError_e ImageCaptureStatusPBMsg::errorcode() const {
  // @@protoc_insertion_point(field_get:vision_messages.ImageCaptureStatusPBMsg.ErrorCode)
  return static_cast< ::vision_messages::ImageCaptureError_e >(errorcode_);
}
 void ImageCaptureStatusPBMsg::set_errorcode(::vision_messages::ImageCaptureError_e value) {
  assert(::vision_messages::ImageCaptureError_e_IsValid(value));
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ImageCaptureStatusPBMsg.ErrorCode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* VisionProcessingControlPBMsg_VisionProcessingModeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisionProcessingControlPBMsg_VisionProcessingModeEnum_descriptor_;
}
bool VisionProcessingControlPBMsg_VisionProcessingModeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VisionProcessingControlPBMsg_VisionProcessingModeEnum VisionProcessingControlPBMsg::VisionProcMode_None;
const VisionProcessingControlPBMsg_VisionProcessingModeEnum VisionProcessingControlPBMsg::VisionProcMode_Target;
const VisionProcessingControlPBMsg_VisionProcessingModeEnum VisionProcessingControlPBMsg::VisionProcMode_GPSDenied;
const VisionProcessingControlPBMsg_VisionProcessingModeEnum VisionProcessingControlPBMsg::VisionProcMode_CameraCalibration;
const VisionProcessingControlPBMsg_VisionProcessingModeEnum VisionProcessingControlPBMsg::VisionProcMode_FeatureMatchProc;
const VisionProcessingControlPBMsg_VisionProcessingModeEnum VisionProcessingControlPBMsg::VisionProcMode_HeadTrackingProc;
const VisionProcessingControlPBMsg_VisionProcessingModeEnum VisionProcessingControlPBMsg::VisionProcMode_HeadOrientationCalProc;
const VisionProcessingControlPBMsg_VisionProcessingModeEnum VisionProcessingControlPBMsg::VisionProcessingModeEnum_MIN;
const VisionProcessingControlPBMsg_VisionProcessingModeEnum VisionProcessingControlPBMsg::VisionProcessingModeEnum_MAX;
const int VisionProcessingControlPBMsg::VisionProcessingModeEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VisionProcessingControlPBMsg_TargetProcessingModeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisionProcessingControlPBMsg_TargetProcessingModeEnum_descriptor_;
}
bool VisionProcessingControlPBMsg_TargetProcessingModeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VisionProcessingControlPBMsg_TargetProcessingModeEnum VisionProcessingControlPBMsg::TgtProcMode_None;
const VisionProcessingControlPBMsg_TargetProcessingModeEnum VisionProcessingControlPBMsg::TgtProcMode_Std;
const VisionProcessingControlPBMsg_TargetProcessingModeEnum VisionProcessingControlPBMsg::TgtProcMode_Blob;
const VisionProcessingControlPBMsg_TargetProcessingModeEnum VisionProcessingControlPBMsg::TgtProcMode_CheckerBoard;
const VisionProcessingControlPBMsg_TargetProcessingModeEnum VisionProcessingControlPBMsg::TargetProcessingModeEnum_MIN;
const VisionProcessingControlPBMsg_TargetProcessingModeEnum VisionProcessingControlPBMsg::TargetProcessingModeEnum_MAX;
const int VisionProcessingControlPBMsg::TargetProcessingModeEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VisionProcessingControlPBMsg_GPSDeniedProcessingModeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisionProcessingControlPBMsg_GPSDeniedProcessingModeEnum_descriptor_;
}
bool VisionProcessingControlPBMsg_GPSDeniedProcessingModeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VisionProcessingControlPBMsg_GPSDeniedProcessingModeEnum VisionProcessingControlPBMsg::GpsDeniedMode_None;
const VisionProcessingControlPBMsg_GPSDeniedProcessingModeEnum VisionProcessingControlPBMsg::GpsDeniedMode_Std;
const VisionProcessingControlPBMsg_GPSDeniedProcessingModeEnum VisionProcessingControlPBMsg::GPSDeniedProcessingModeEnum_MIN;
const VisionProcessingControlPBMsg_GPSDeniedProcessingModeEnum VisionProcessingControlPBMsg::GPSDeniedProcessingModeEnum_MAX;
const int VisionProcessingControlPBMsg::GPSDeniedProcessingModeEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VisionProcessingControlPBMsg::kImageCaptureEnabledFieldNumber;
const int VisionProcessingControlPBMsg::kNumberOfImagesToCaptureFieldNumber;
const int VisionProcessingControlPBMsg::kDesiredFramesPerSecondFieldNumber;
const int VisionProcessingControlPBMsg::kGPUProcessingEnabledFieldNumber;
const int VisionProcessingControlPBMsg::kTargetImageProcessingEnabledFieldNumber;
const int VisionProcessingControlPBMsg::kVisionProcessingModeFieldNumber;
const int VisionProcessingControlPBMsg::kTargetProcessingModeFieldNumber;
const int VisionProcessingControlPBMsg::kGPSDeniedProcessingEnabledFieldNumber;
const int VisionProcessingControlPBMsg::kGPSDeniedProcessingModeFieldNumber;
const int VisionProcessingControlPBMsg::kRecordImagesEnabledFieldNumber;
const int VisionProcessingControlPBMsg::kStreamImagesEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VisionProcessingControlPBMsg::VisionProcessingControlPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.VisionProcessingControlPBMsg)
}

void VisionProcessingControlPBMsg::InitAsDefaultInstance() {
}

VisionProcessingControlPBMsg::VisionProcessingControlPBMsg(const VisionProcessingControlPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.VisionProcessingControlPBMsg)
}

void VisionProcessingControlPBMsg::SharedCtor() {
  _cached_size_ = 0;
  imagecaptureenabled_ = false;
  numberofimagestocapture_ = 0;
  desiredframespersecond_ = 0;
  gpuprocessingenabled_ = false;
  targetimageprocessingenabled_ = false;
  visionprocessingmode_ = 0;
  targetprocessingmode_ = 0;
  gpsdeniedprocessingenabled_ = false;
  gpsdeniedprocessingmode_ = 0;
  recordimagesenabled_ = false;
  streamimagesenabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisionProcessingControlPBMsg::~VisionProcessingControlPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.VisionProcessingControlPBMsg)
  SharedDtor();
}

void VisionProcessingControlPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VisionProcessingControlPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisionProcessingControlPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisionProcessingControlPBMsg_descriptor_;
}

const VisionProcessingControlPBMsg& VisionProcessingControlPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

VisionProcessingControlPBMsg* VisionProcessingControlPBMsg::default_instance_ = NULL;

VisionProcessingControlPBMsg* VisionProcessingControlPBMsg::New(::google::protobuf::Arena* arena) const {
  VisionProcessingControlPBMsg* n = new VisionProcessingControlPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VisionProcessingControlPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.VisionProcessingControlPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VisionProcessingControlPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VisionProcessingControlPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(desiredframespersecond_, targetprocessingmode_);
  }
  ZR_(gpsdeniedprocessingmode_, streamimagesenabled_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VisionProcessingControlPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.VisionProcessingControlPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ImageCaptureEnabled = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &imagecaptureenabled_)));
          set_has_imagecaptureenabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_NumberOfImagesToCapture;
        break;
      }

      // optional sint32 NumberOfImagesToCapture = 2;
      case 2: {
        if (tag == 16) {
         parse_NumberOfImagesToCapture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &numberofimagestocapture_)));
          set_has_numberofimagestocapture();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_DesiredFramesPerSecond;
        break;
      }

      // optional double DesiredFramesPerSecond = 3;
      case 3: {
        if (tag == 25) {
         parse_DesiredFramesPerSecond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &desiredframespersecond_)));
          set_has_desiredframespersecond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_GPUProcessingEnabled;
        break;
      }

      // optional bool GPUProcessingEnabled = 4;
      case 4: {
        if (tag == 32) {
         parse_GPUProcessingEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gpuprocessingenabled_)));
          set_has_gpuprocessingenabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_TargetImageProcessingEnabled;
        break;
      }

      // optional bool TargetImageProcessingEnabled = 5;
      case 5: {
        if (tag == 40) {
         parse_TargetImageProcessingEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &targetimageprocessingenabled_)));
          set_has_targetimageprocessingenabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_VisionProcessingMode;
        break;
      }

      // optional .vision_messages.VisionProcessingControlPBMsg.VisionProcessingModeEnum VisionProcessingMode = 6;
      case 6: {
        if (tag == 48) {
         parse_VisionProcessingMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vision_messages::VisionProcessingControlPBMsg_VisionProcessingModeEnum_IsValid(value)) {
            set_visionprocessingmode(static_cast< ::vision_messages::VisionProcessingControlPBMsg_VisionProcessingModeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_TargetProcessingMode;
        break;
      }

      // optional .vision_messages.VisionProcessingControlPBMsg.TargetProcessingModeEnum TargetProcessingMode = 7;
      case 7: {
        if (tag == 56) {
         parse_TargetProcessingMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vision_messages::VisionProcessingControlPBMsg_TargetProcessingModeEnum_IsValid(value)) {
            set_targetprocessingmode(static_cast< ::vision_messages::VisionProcessingControlPBMsg_TargetProcessingModeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_GPSDeniedProcessingEnabled;
        break;
      }

      // optional bool GPSDeniedProcessingEnabled = 8;
      case 8: {
        if (tag == 64) {
         parse_GPSDeniedProcessingEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gpsdeniedprocessingenabled_)));
          set_has_gpsdeniedprocessingenabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_GPSDeniedProcessingMode;
        break;
      }

      // optional .vision_messages.VisionProcessingControlPBMsg.GPSDeniedProcessingModeEnum GPSDeniedProcessingMode = 9;
      case 9: {
        if (tag == 72) {
         parse_GPSDeniedProcessingMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vision_messages::VisionProcessingControlPBMsg_GPSDeniedProcessingModeEnum_IsValid(value)) {
            set_gpsdeniedprocessingmode(static_cast< ::vision_messages::VisionProcessingControlPBMsg_GPSDeniedProcessingModeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_RecordImagesEnabled;
        break;
      }

      // optional bool RecordImagesEnabled = 10;
      case 10: {
        if (tag == 80) {
         parse_RecordImagesEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recordimagesenabled_)));
          set_has_recordimagesenabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_StreamImagesEnabled;
        break;
      }

      // optional bool StreamImagesEnabled = 11;
      case 11: {
        if (tag == 88) {
         parse_StreamImagesEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &streamimagesenabled_)));
          set_has_streamimagesenabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.VisionProcessingControlPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.VisionProcessingControlPBMsg)
  return false;
#undef DO_
}

void VisionProcessingControlPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.VisionProcessingControlPBMsg)
  // optional bool ImageCaptureEnabled = 1;
  if (has_imagecaptureenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->imagecaptureenabled(), output);
  }

  // optional sint32 NumberOfImagesToCapture = 2;
  if (has_numberofimagestocapture()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->numberofimagestocapture(), output);
  }

  // optional double DesiredFramesPerSecond = 3;
  if (has_desiredframespersecond()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->desiredframespersecond(), output);
  }

  // optional bool GPUProcessingEnabled = 4;
  if (has_gpuprocessingenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->gpuprocessingenabled(), output);
  }

  // optional bool TargetImageProcessingEnabled = 5;
  if (has_targetimageprocessingenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->targetimageprocessingenabled(), output);
  }

  // optional .vision_messages.VisionProcessingControlPBMsg.VisionProcessingModeEnum VisionProcessingMode = 6;
  if (has_visionprocessingmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->visionprocessingmode(), output);
  }

  // optional .vision_messages.VisionProcessingControlPBMsg.TargetProcessingModeEnum TargetProcessingMode = 7;
  if (has_targetprocessingmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->targetprocessingmode(), output);
  }

  // optional bool GPSDeniedProcessingEnabled = 8;
  if (has_gpsdeniedprocessingenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->gpsdeniedprocessingenabled(), output);
  }

  // optional .vision_messages.VisionProcessingControlPBMsg.GPSDeniedProcessingModeEnum GPSDeniedProcessingMode = 9;
  if (has_gpsdeniedprocessingmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->gpsdeniedprocessingmode(), output);
  }

  // optional bool RecordImagesEnabled = 10;
  if (has_recordimagesenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->recordimagesenabled(), output);
  }

  // optional bool StreamImagesEnabled = 11;
  if (has_streamimagesenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->streamimagesenabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.VisionProcessingControlPBMsg)
}

::google::protobuf::uint8* VisionProcessingControlPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.VisionProcessingControlPBMsg)
  // optional bool ImageCaptureEnabled = 1;
  if (has_imagecaptureenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->imagecaptureenabled(), target);
  }

  // optional sint32 NumberOfImagesToCapture = 2;
  if (has_numberofimagestocapture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->numberofimagestocapture(), target);
  }

  // optional double DesiredFramesPerSecond = 3;
  if (has_desiredframespersecond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->desiredframespersecond(), target);
  }

  // optional bool GPUProcessingEnabled = 4;
  if (has_gpuprocessingenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->gpuprocessingenabled(), target);
  }

  // optional bool TargetImageProcessingEnabled = 5;
  if (has_targetimageprocessingenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->targetimageprocessingenabled(), target);
  }

  // optional .vision_messages.VisionProcessingControlPBMsg.VisionProcessingModeEnum VisionProcessingMode = 6;
  if (has_visionprocessingmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->visionprocessingmode(), target);
  }

  // optional .vision_messages.VisionProcessingControlPBMsg.TargetProcessingModeEnum TargetProcessingMode = 7;
  if (has_targetprocessingmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->targetprocessingmode(), target);
  }

  // optional bool GPSDeniedProcessingEnabled = 8;
  if (has_gpsdeniedprocessingenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->gpsdeniedprocessingenabled(), target);
  }

  // optional .vision_messages.VisionProcessingControlPBMsg.GPSDeniedProcessingModeEnum GPSDeniedProcessingMode = 9;
  if (has_gpsdeniedprocessingmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->gpsdeniedprocessingmode(), target);
  }

  // optional bool RecordImagesEnabled = 10;
  if (has_recordimagesenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->recordimagesenabled(), target);
  }

  // optional bool StreamImagesEnabled = 11;
  if (has_streamimagesenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->streamimagesenabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.VisionProcessingControlPBMsg)
  return target;
}

int VisionProcessingControlPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.VisionProcessingControlPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool ImageCaptureEnabled = 1;
    if (has_imagecaptureenabled()) {
      total_size += 1 + 1;
    }

    // optional sint32 NumberOfImagesToCapture = 2;
    if (has_numberofimagestocapture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->numberofimagestocapture());
    }

    // optional double DesiredFramesPerSecond = 3;
    if (has_desiredframespersecond()) {
      total_size += 1 + 8;
    }

    // optional bool GPUProcessingEnabled = 4;
    if (has_gpuprocessingenabled()) {
      total_size += 1 + 1;
    }

    // optional bool TargetImageProcessingEnabled = 5;
    if (has_targetimageprocessingenabled()) {
      total_size += 1 + 1;
    }

    // optional .vision_messages.VisionProcessingControlPBMsg.VisionProcessingModeEnum VisionProcessingMode = 6;
    if (has_visionprocessingmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->visionprocessingmode());
    }

    // optional .vision_messages.VisionProcessingControlPBMsg.TargetProcessingModeEnum TargetProcessingMode = 7;
    if (has_targetprocessingmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->targetprocessingmode());
    }

    // optional bool GPSDeniedProcessingEnabled = 8;
    if (has_gpsdeniedprocessingenabled()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional .vision_messages.VisionProcessingControlPBMsg.GPSDeniedProcessingModeEnum GPSDeniedProcessingMode = 9;
    if (has_gpsdeniedprocessingmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gpsdeniedprocessingmode());
    }

    // optional bool RecordImagesEnabled = 10;
    if (has_recordimagesenabled()) {
      total_size += 1 + 1;
    }

    // optional bool StreamImagesEnabled = 11;
    if (has_streamimagesenabled()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisionProcessingControlPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.VisionProcessingControlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VisionProcessingControlPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VisionProcessingControlPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.VisionProcessingControlPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.VisionProcessingControlPBMsg)
    MergeFrom(*source);
  }
}

void VisionProcessingControlPBMsg::MergeFrom(const VisionProcessingControlPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.VisionProcessingControlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imagecaptureenabled()) {
      set_imagecaptureenabled(from.imagecaptureenabled());
    }
    if (from.has_numberofimagestocapture()) {
      set_numberofimagestocapture(from.numberofimagestocapture());
    }
    if (from.has_desiredframespersecond()) {
      set_desiredframespersecond(from.desiredframespersecond());
    }
    if (from.has_gpuprocessingenabled()) {
      set_gpuprocessingenabled(from.gpuprocessingenabled());
    }
    if (from.has_targetimageprocessingenabled()) {
      set_targetimageprocessingenabled(from.targetimageprocessingenabled());
    }
    if (from.has_visionprocessingmode()) {
      set_visionprocessingmode(from.visionprocessingmode());
    }
    if (from.has_targetprocessingmode()) {
      set_targetprocessingmode(from.targetprocessingmode());
    }
    if (from.has_gpsdeniedprocessingenabled()) {
      set_gpsdeniedprocessingenabled(from.gpsdeniedprocessingenabled());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gpsdeniedprocessingmode()) {
      set_gpsdeniedprocessingmode(from.gpsdeniedprocessingmode());
    }
    if (from.has_recordimagesenabled()) {
      set_recordimagesenabled(from.recordimagesenabled());
    }
    if (from.has_streamimagesenabled()) {
      set_streamimagesenabled(from.streamimagesenabled());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VisionProcessingControlPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.VisionProcessingControlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisionProcessingControlPBMsg::CopyFrom(const VisionProcessingControlPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.VisionProcessingControlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionProcessingControlPBMsg::IsInitialized() const {

  return true;
}

void VisionProcessingControlPBMsg::Swap(VisionProcessingControlPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VisionProcessingControlPBMsg::InternalSwap(VisionProcessingControlPBMsg* other) {
  std::swap(imagecaptureenabled_, other->imagecaptureenabled_);
  std::swap(numberofimagestocapture_, other->numberofimagestocapture_);
  std::swap(desiredframespersecond_, other->desiredframespersecond_);
  std::swap(gpuprocessingenabled_, other->gpuprocessingenabled_);
  std::swap(targetimageprocessingenabled_, other->targetimageprocessingenabled_);
  std::swap(visionprocessingmode_, other->visionprocessingmode_);
  std::swap(targetprocessingmode_, other->targetprocessingmode_);
  std::swap(gpsdeniedprocessingenabled_, other->gpsdeniedprocessingenabled_);
  std::swap(gpsdeniedprocessingmode_, other->gpsdeniedprocessingmode_);
  std::swap(recordimagesenabled_, other->recordimagesenabled_);
  std::swap(streamimagesenabled_, other->streamimagesenabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VisionProcessingControlPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisionProcessingControlPBMsg_descriptor_;
  metadata.reflection = VisionProcessingControlPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VisionProcessingControlPBMsg

// optional bool ImageCaptureEnabled = 1;
bool VisionProcessingControlPBMsg::has_imagecaptureenabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VisionProcessingControlPBMsg::set_has_imagecaptureenabled() {
  _has_bits_[0] |= 0x00000001u;
}
void VisionProcessingControlPBMsg::clear_has_imagecaptureenabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void VisionProcessingControlPBMsg::clear_imagecaptureenabled() {
  imagecaptureenabled_ = false;
  clear_has_imagecaptureenabled();
}
 bool VisionProcessingControlPBMsg::imagecaptureenabled() const {
  // @@protoc_insertion_point(field_get:vision_messages.VisionProcessingControlPBMsg.ImageCaptureEnabled)
  return imagecaptureenabled_;
}
 void VisionProcessingControlPBMsg::set_imagecaptureenabled(bool value) {
  set_has_imagecaptureenabled();
  imagecaptureenabled_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VisionProcessingControlPBMsg.ImageCaptureEnabled)
}

// optional sint32 NumberOfImagesToCapture = 2;
bool VisionProcessingControlPBMsg::has_numberofimagestocapture() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VisionProcessingControlPBMsg::set_has_numberofimagestocapture() {
  _has_bits_[0] |= 0x00000002u;
}
void VisionProcessingControlPBMsg::clear_has_numberofimagestocapture() {
  _has_bits_[0] &= ~0x00000002u;
}
void VisionProcessingControlPBMsg::clear_numberofimagestocapture() {
  numberofimagestocapture_ = 0;
  clear_has_numberofimagestocapture();
}
 ::google::protobuf::int32 VisionProcessingControlPBMsg::numberofimagestocapture() const {
  // @@protoc_insertion_point(field_get:vision_messages.VisionProcessingControlPBMsg.NumberOfImagesToCapture)
  return numberofimagestocapture_;
}
 void VisionProcessingControlPBMsg::set_numberofimagestocapture(::google::protobuf::int32 value) {
  set_has_numberofimagestocapture();
  numberofimagestocapture_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VisionProcessingControlPBMsg.NumberOfImagesToCapture)
}

// optional double DesiredFramesPerSecond = 3;
bool VisionProcessingControlPBMsg::has_desiredframespersecond() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VisionProcessingControlPBMsg::set_has_desiredframespersecond() {
  _has_bits_[0] |= 0x00000004u;
}
void VisionProcessingControlPBMsg::clear_has_desiredframespersecond() {
  _has_bits_[0] &= ~0x00000004u;
}
void VisionProcessingControlPBMsg::clear_desiredframespersecond() {
  desiredframespersecond_ = 0;
  clear_has_desiredframespersecond();
}
 double VisionProcessingControlPBMsg::desiredframespersecond() const {
  // @@protoc_insertion_point(field_get:vision_messages.VisionProcessingControlPBMsg.DesiredFramesPerSecond)
  return desiredframespersecond_;
}
 void VisionProcessingControlPBMsg::set_desiredframespersecond(double value) {
  set_has_desiredframespersecond();
  desiredframespersecond_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VisionProcessingControlPBMsg.DesiredFramesPerSecond)
}

// optional bool GPUProcessingEnabled = 4;
bool VisionProcessingControlPBMsg::has_gpuprocessingenabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VisionProcessingControlPBMsg::set_has_gpuprocessingenabled() {
  _has_bits_[0] |= 0x00000008u;
}
void VisionProcessingControlPBMsg::clear_has_gpuprocessingenabled() {
  _has_bits_[0] &= ~0x00000008u;
}
void VisionProcessingControlPBMsg::clear_gpuprocessingenabled() {
  gpuprocessingenabled_ = false;
  clear_has_gpuprocessingenabled();
}
 bool VisionProcessingControlPBMsg::gpuprocessingenabled() const {
  // @@protoc_insertion_point(field_get:vision_messages.VisionProcessingControlPBMsg.GPUProcessingEnabled)
  return gpuprocessingenabled_;
}
 void VisionProcessingControlPBMsg::set_gpuprocessingenabled(bool value) {
  set_has_gpuprocessingenabled();
  gpuprocessingenabled_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VisionProcessingControlPBMsg.GPUProcessingEnabled)
}

// optional bool TargetImageProcessingEnabled = 5;
bool VisionProcessingControlPBMsg::has_targetimageprocessingenabled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VisionProcessingControlPBMsg::set_has_targetimageprocessingenabled() {
  _has_bits_[0] |= 0x00000010u;
}
void VisionProcessingControlPBMsg::clear_has_targetimageprocessingenabled() {
  _has_bits_[0] &= ~0x00000010u;
}
void VisionProcessingControlPBMsg::clear_targetimageprocessingenabled() {
  targetimageprocessingenabled_ = false;
  clear_has_targetimageprocessingenabled();
}
 bool VisionProcessingControlPBMsg::targetimageprocessingenabled() const {
  // @@protoc_insertion_point(field_get:vision_messages.VisionProcessingControlPBMsg.TargetImageProcessingEnabled)
  return targetimageprocessingenabled_;
}
 void VisionProcessingControlPBMsg::set_targetimageprocessingenabled(bool value) {
  set_has_targetimageprocessingenabled();
  targetimageprocessingenabled_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VisionProcessingControlPBMsg.TargetImageProcessingEnabled)
}

// optional .vision_messages.VisionProcessingControlPBMsg.VisionProcessingModeEnum VisionProcessingMode = 6;
bool VisionProcessingControlPBMsg::has_visionprocessingmode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VisionProcessingControlPBMsg::set_has_visionprocessingmode() {
  _has_bits_[0] |= 0x00000020u;
}
void VisionProcessingControlPBMsg::clear_has_visionprocessingmode() {
  _has_bits_[0] &= ~0x00000020u;
}
void VisionProcessingControlPBMsg::clear_visionprocessingmode() {
  visionprocessingmode_ = 0;
  clear_has_visionprocessingmode();
}
 ::vision_messages::VisionProcessingControlPBMsg_VisionProcessingModeEnum VisionProcessingControlPBMsg::visionprocessingmode() const {
  // @@protoc_insertion_point(field_get:vision_messages.VisionProcessingControlPBMsg.VisionProcessingMode)
  return static_cast< ::vision_messages::VisionProcessingControlPBMsg_VisionProcessingModeEnum >(visionprocessingmode_);
}
 void VisionProcessingControlPBMsg::set_visionprocessingmode(::vision_messages::VisionProcessingControlPBMsg_VisionProcessingModeEnum value) {
  assert(::vision_messages::VisionProcessingControlPBMsg_VisionProcessingModeEnum_IsValid(value));
  set_has_visionprocessingmode();
  visionprocessingmode_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VisionProcessingControlPBMsg.VisionProcessingMode)
}

// optional .vision_messages.VisionProcessingControlPBMsg.TargetProcessingModeEnum TargetProcessingMode = 7;
bool VisionProcessingControlPBMsg::has_targetprocessingmode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VisionProcessingControlPBMsg::set_has_targetprocessingmode() {
  _has_bits_[0] |= 0x00000040u;
}
void VisionProcessingControlPBMsg::clear_has_targetprocessingmode() {
  _has_bits_[0] &= ~0x00000040u;
}
void VisionProcessingControlPBMsg::clear_targetprocessingmode() {
  targetprocessingmode_ = 0;
  clear_has_targetprocessingmode();
}
 ::vision_messages::VisionProcessingControlPBMsg_TargetProcessingModeEnum VisionProcessingControlPBMsg::targetprocessingmode() const {
  // @@protoc_insertion_point(field_get:vision_messages.VisionProcessingControlPBMsg.TargetProcessingMode)
  return static_cast< ::vision_messages::VisionProcessingControlPBMsg_TargetProcessingModeEnum >(targetprocessingmode_);
}
 void VisionProcessingControlPBMsg::set_targetprocessingmode(::vision_messages::VisionProcessingControlPBMsg_TargetProcessingModeEnum value) {
  assert(::vision_messages::VisionProcessingControlPBMsg_TargetProcessingModeEnum_IsValid(value));
  set_has_targetprocessingmode();
  targetprocessingmode_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VisionProcessingControlPBMsg.TargetProcessingMode)
}

// optional bool GPSDeniedProcessingEnabled = 8;
bool VisionProcessingControlPBMsg::has_gpsdeniedprocessingenabled() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VisionProcessingControlPBMsg::set_has_gpsdeniedprocessingenabled() {
  _has_bits_[0] |= 0x00000080u;
}
void VisionProcessingControlPBMsg::clear_has_gpsdeniedprocessingenabled() {
  _has_bits_[0] &= ~0x00000080u;
}
void VisionProcessingControlPBMsg::clear_gpsdeniedprocessingenabled() {
  gpsdeniedprocessingenabled_ = false;
  clear_has_gpsdeniedprocessingenabled();
}
 bool VisionProcessingControlPBMsg::gpsdeniedprocessingenabled() const {
  // @@protoc_insertion_point(field_get:vision_messages.VisionProcessingControlPBMsg.GPSDeniedProcessingEnabled)
  return gpsdeniedprocessingenabled_;
}
 void VisionProcessingControlPBMsg::set_gpsdeniedprocessingenabled(bool value) {
  set_has_gpsdeniedprocessingenabled();
  gpsdeniedprocessingenabled_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VisionProcessingControlPBMsg.GPSDeniedProcessingEnabled)
}

// optional .vision_messages.VisionProcessingControlPBMsg.GPSDeniedProcessingModeEnum GPSDeniedProcessingMode = 9;
bool VisionProcessingControlPBMsg::has_gpsdeniedprocessingmode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VisionProcessingControlPBMsg::set_has_gpsdeniedprocessingmode() {
  _has_bits_[0] |= 0x00000100u;
}
void VisionProcessingControlPBMsg::clear_has_gpsdeniedprocessingmode() {
  _has_bits_[0] &= ~0x00000100u;
}
void VisionProcessingControlPBMsg::clear_gpsdeniedprocessingmode() {
  gpsdeniedprocessingmode_ = 0;
  clear_has_gpsdeniedprocessingmode();
}
 ::vision_messages::VisionProcessingControlPBMsg_GPSDeniedProcessingModeEnum VisionProcessingControlPBMsg::gpsdeniedprocessingmode() const {
  // @@protoc_insertion_point(field_get:vision_messages.VisionProcessingControlPBMsg.GPSDeniedProcessingMode)
  return static_cast< ::vision_messages::VisionProcessingControlPBMsg_GPSDeniedProcessingModeEnum >(gpsdeniedprocessingmode_);
}
 void VisionProcessingControlPBMsg::set_gpsdeniedprocessingmode(::vision_messages::VisionProcessingControlPBMsg_GPSDeniedProcessingModeEnum value) {
  assert(::vision_messages::VisionProcessingControlPBMsg_GPSDeniedProcessingModeEnum_IsValid(value));
  set_has_gpsdeniedprocessingmode();
  gpsdeniedprocessingmode_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VisionProcessingControlPBMsg.GPSDeniedProcessingMode)
}

// optional bool RecordImagesEnabled = 10;
bool VisionProcessingControlPBMsg::has_recordimagesenabled() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VisionProcessingControlPBMsg::set_has_recordimagesenabled() {
  _has_bits_[0] |= 0x00000200u;
}
void VisionProcessingControlPBMsg::clear_has_recordimagesenabled() {
  _has_bits_[0] &= ~0x00000200u;
}
void VisionProcessingControlPBMsg::clear_recordimagesenabled() {
  recordimagesenabled_ = false;
  clear_has_recordimagesenabled();
}
 bool VisionProcessingControlPBMsg::recordimagesenabled() const {
  // @@protoc_insertion_point(field_get:vision_messages.VisionProcessingControlPBMsg.RecordImagesEnabled)
  return recordimagesenabled_;
}
 void VisionProcessingControlPBMsg::set_recordimagesenabled(bool value) {
  set_has_recordimagesenabled();
  recordimagesenabled_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VisionProcessingControlPBMsg.RecordImagesEnabled)
}

// optional bool StreamImagesEnabled = 11;
bool VisionProcessingControlPBMsg::has_streamimagesenabled() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VisionProcessingControlPBMsg::set_has_streamimagesenabled() {
  _has_bits_[0] |= 0x00000400u;
}
void VisionProcessingControlPBMsg::clear_has_streamimagesenabled() {
  _has_bits_[0] &= ~0x00000400u;
}
void VisionProcessingControlPBMsg::clear_streamimagesenabled() {
  streamimagesenabled_ = false;
  clear_has_streamimagesenabled();
}
 bool VisionProcessingControlPBMsg::streamimagesenabled() const {
  // @@protoc_insertion_point(field_get:vision_messages.VisionProcessingControlPBMsg.StreamImagesEnabled)
  return streamimagesenabled_;
}
 void VisionProcessingControlPBMsg::set_streamimagesenabled(bool value) {
  set_has_streamimagesenabled();
  streamimagesenabled_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VisionProcessingControlPBMsg.StreamImagesEnabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CameraCalControlPBMsg_CameraCalibrationType_e_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraCalControlPBMsg_CameraCalibrationType_e_descriptor_;
}
bool CameraCalControlPBMsg_CameraCalibrationType_e_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CameraCalControlPBMsg_CameraCalibrationType_e CameraCalControlPBMsg::CameraCal_2DPlaneCheckerBoard;
const CameraCalControlPBMsg_CameraCalibrationType_e CameraCalControlPBMsg::CameraCalibrationType_e_MIN;
const CameraCalControlPBMsg_CameraCalibrationType_e CameraCalControlPBMsg::CameraCalibrationType_e_MAX;
const int CameraCalControlPBMsg::CameraCalibrationType_e_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CameraCalControlPBMsg_CameraCalCmd_e_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraCalControlPBMsg_CameraCalCmd_e_descriptor_;
}
bool CameraCalControlPBMsg_CameraCalCmd_e_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CameraCalControlPBMsg_CameraCalCmd_e CameraCalControlPBMsg::NullCmd;
const CameraCalControlPBMsg_CameraCalCmd_e CameraCalControlPBMsg::Reset;
const CameraCalControlPBMsg_CameraCalCmd_e CameraCalControlPBMsg::ClearImageSet;
const CameraCalControlPBMsg_CameraCalCmd_e CameraCalControlPBMsg::StreamImages;
const CameraCalControlPBMsg_CameraCalCmd_e CameraCalControlPBMsg::CaptureImage;
const CameraCalControlPBMsg_CameraCalCmd_e CameraCalControlPBMsg::SetImageOk;
const CameraCalControlPBMsg_CameraCalCmd_e CameraCalControlPBMsg::RejectImage;
const CameraCalControlPBMsg_CameraCalCmd_e CameraCalControlPBMsg::RunCalProcess;
const CameraCalControlPBMsg_CameraCalCmd_e CameraCalControlPBMsg::CameraCalCmd_e_MIN;
const CameraCalControlPBMsg_CameraCalCmd_e CameraCalControlPBMsg::CameraCalCmd_e_MAX;
const int CameraCalControlPBMsg::CameraCalCmd_e_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraCalControlPBMsg::kCameraCalibrationTypeFieldNumber;
const int CameraCalControlPBMsg::kCameraCalCmdFieldNumber;
const int CameraCalControlPBMsg::kCameraCalBaseFilenameFieldNumber;
const int CameraCalControlPBMsg::kNumberOfRowsFieldNumber;
const int CameraCalControlPBMsg::kNumberOfColsFieldNumber;
const int CameraCalControlPBMsg::kSquareSizeMilliMetersFieldNumber;
const int CameraCalControlPBMsg::kYawCorrectionDegreesFieldNumber;
const int CameraCalControlPBMsg::kPitchCorrectionDegreesFieldNumber;
const int CameraCalControlPBMsg::kRollCorrectionDegreesFieldNumber;
const int CameraCalControlPBMsg::kDelXCorrectionCentiMetersFieldNumber;
const int CameraCalControlPBMsg::kDelYCorrectionCentiMetersFieldNumber;
const int CameraCalControlPBMsg::kDelZCorrectionCentiMetersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraCalControlPBMsg::CameraCalControlPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.CameraCalControlPBMsg)
}

void CameraCalControlPBMsg::InitAsDefaultInstance() {
}

CameraCalControlPBMsg::CameraCalControlPBMsg(const CameraCalControlPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.CameraCalControlPBMsg)
}

void CameraCalControlPBMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cameracalibrationtype_ = 0;
  cameracalcmd_ = 0;
  cameracalbasefilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  numberofrows_ = 0;
  numberofcols_ = 0;
  squaresizemillimeters_ = 0;
  yawcorrectiondegrees_ = 0;
  pitchcorrectiondegrees_ = 0;
  rollcorrectiondegrees_ = 0;
  delxcorrectioncentimeters_ = 0;
  delycorrectioncentimeters_ = 0;
  delzcorrectioncentimeters_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraCalControlPBMsg::~CameraCalControlPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.CameraCalControlPBMsg)
  SharedDtor();
}

void CameraCalControlPBMsg::SharedDtor() {
  cameracalbasefilename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CameraCalControlPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraCalControlPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraCalControlPBMsg_descriptor_;
}

const CameraCalControlPBMsg& CameraCalControlPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

CameraCalControlPBMsg* CameraCalControlPBMsg::default_instance_ = NULL;

CameraCalControlPBMsg* CameraCalControlPBMsg::New(::google::protobuf::Arena* arena) const {
  CameraCalControlPBMsg* n = new CameraCalControlPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraCalControlPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.CameraCalControlPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CameraCalControlPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CameraCalControlPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(cameracalibrationtype_, cameracalcmd_);
    ZR_(numberofrows_, pitchcorrectiondegrees_);
    if (has_cameracalbasefilename()) {
      cameracalbasefilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(rollcorrectiondegrees_, delzcorrectioncentimeters_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CameraCalControlPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.CameraCalControlPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vision_messages.CameraCalControlPBMsg.CameraCalibrationType_e CameraCalibrationType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vision_messages::CameraCalControlPBMsg_CameraCalibrationType_e_IsValid(value)) {
            set_cameracalibrationtype(static_cast< ::vision_messages::CameraCalControlPBMsg_CameraCalibrationType_e >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CameraCalCmd;
        break;
      }

      // optional .vision_messages.CameraCalControlPBMsg.CameraCalCmd_e CameraCalCmd = 2;
      case 2: {
        if (tag == 16) {
         parse_CameraCalCmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vision_messages::CameraCalControlPBMsg_CameraCalCmd_e_IsValid(value)) {
            set_cameracalcmd(static_cast< ::vision_messages::CameraCalControlPBMsg_CameraCalCmd_e >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_CameraCalBaseFilename;
        break;
      }

      // optional string CameraCalBaseFilename = 3;
      case 3: {
        if (tag == 26) {
         parse_CameraCalBaseFilename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cameracalbasefilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cameracalbasefilename().data(), this->cameracalbasefilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vision_messages.CameraCalControlPBMsg.CameraCalBaseFilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_NumberOfRows;
        break;
      }

      // optional int32 NumberOfRows = 4;
      case 4: {
        if (tag == 32) {
         parse_NumberOfRows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberofrows_)));
          set_has_numberofrows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_NumberOfCols;
        break;
      }

      // optional int32 NumberOfCols = 5;
      case 5: {
        if (tag == 40) {
         parse_NumberOfCols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberofcols_)));
          set_has_numberofcols();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_SquareSizeMilliMeters;
        break;
      }

      // optional double SquareSizeMilliMeters = 6;
      case 6: {
        if (tag == 49) {
         parse_SquareSizeMilliMeters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &squaresizemillimeters_)));
          set_has_squaresizemillimeters();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_YawCorrectionDegrees;
        break;
      }

      // optional double YawCorrectionDegrees = 7;
      case 7: {
        if (tag == 57) {
         parse_YawCorrectionDegrees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yawcorrectiondegrees_)));
          set_has_yawcorrectiondegrees();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_PitchCorrectionDegrees;
        break;
      }

      // optional double PitchCorrectionDegrees = 8;
      case 8: {
        if (tag == 65) {
         parse_PitchCorrectionDegrees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitchcorrectiondegrees_)));
          set_has_pitchcorrectiondegrees();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_RollCorrectionDegrees;
        break;
      }

      // optional double RollCorrectionDegrees = 9;
      case 9: {
        if (tag == 73) {
         parse_RollCorrectionDegrees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rollcorrectiondegrees_)));
          set_has_rollcorrectiondegrees();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_DelXCorrectionCentiMeters;
        break;
      }

      // optional double DelXCorrectionCentiMeters = 10;
      case 10: {
        if (tag == 81) {
         parse_DelXCorrectionCentiMeters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delxcorrectioncentimeters_)));
          set_has_delxcorrectioncentimeters();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_DelYCorrectionCentiMeters;
        break;
      }

      // optional double DelYCorrectionCentiMeters = 11;
      case 11: {
        if (tag == 89) {
         parse_DelYCorrectionCentiMeters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delycorrectioncentimeters_)));
          set_has_delycorrectioncentimeters();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_DelZCorrectionCentiMeters;
        break;
      }

      // optional double DelZCorrectionCentiMeters = 12;
      case 12: {
        if (tag == 97) {
         parse_DelZCorrectionCentiMeters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delzcorrectioncentimeters_)));
          set_has_delzcorrectioncentimeters();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.CameraCalControlPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.CameraCalControlPBMsg)
  return false;
#undef DO_
}

void CameraCalControlPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.CameraCalControlPBMsg)
  // optional .vision_messages.CameraCalControlPBMsg.CameraCalibrationType_e CameraCalibrationType = 1;
  if (has_cameracalibrationtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cameracalibrationtype(), output);
  }

  // optional .vision_messages.CameraCalControlPBMsg.CameraCalCmd_e CameraCalCmd = 2;
  if (has_cameracalcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cameracalcmd(), output);
  }

  // optional string CameraCalBaseFilename = 3;
  if (has_cameracalbasefilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cameracalbasefilename().data(), this->cameracalbasefilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.CameraCalControlPBMsg.CameraCalBaseFilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cameracalbasefilename(), output);
  }

  // optional int32 NumberOfRows = 4;
  if (has_numberofrows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->numberofrows(), output);
  }

  // optional int32 NumberOfCols = 5;
  if (has_numberofcols()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->numberofcols(), output);
  }

  // optional double SquareSizeMilliMeters = 6;
  if (has_squaresizemillimeters()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->squaresizemillimeters(), output);
  }

  // optional double YawCorrectionDegrees = 7;
  if (has_yawcorrectiondegrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->yawcorrectiondegrees(), output);
  }

  // optional double PitchCorrectionDegrees = 8;
  if (has_pitchcorrectiondegrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->pitchcorrectiondegrees(), output);
  }

  // optional double RollCorrectionDegrees = 9;
  if (has_rollcorrectiondegrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->rollcorrectiondegrees(), output);
  }

  // optional double DelXCorrectionCentiMeters = 10;
  if (has_delxcorrectioncentimeters()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->delxcorrectioncentimeters(), output);
  }

  // optional double DelYCorrectionCentiMeters = 11;
  if (has_delycorrectioncentimeters()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->delycorrectioncentimeters(), output);
  }

  // optional double DelZCorrectionCentiMeters = 12;
  if (has_delzcorrectioncentimeters()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->delzcorrectioncentimeters(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.CameraCalControlPBMsg)
}

::google::protobuf::uint8* CameraCalControlPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.CameraCalControlPBMsg)
  // optional .vision_messages.CameraCalControlPBMsg.CameraCalibrationType_e CameraCalibrationType = 1;
  if (has_cameracalibrationtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cameracalibrationtype(), target);
  }

  // optional .vision_messages.CameraCalControlPBMsg.CameraCalCmd_e CameraCalCmd = 2;
  if (has_cameracalcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cameracalcmd(), target);
  }

  // optional string CameraCalBaseFilename = 3;
  if (has_cameracalbasefilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cameracalbasefilename().data(), this->cameracalbasefilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.CameraCalControlPBMsg.CameraCalBaseFilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cameracalbasefilename(), target);
  }

  // optional int32 NumberOfRows = 4;
  if (has_numberofrows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->numberofrows(), target);
  }

  // optional int32 NumberOfCols = 5;
  if (has_numberofcols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->numberofcols(), target);
  }

  // optional double SquareSizeMilliMeters = 6;
  if (has_squaresizemillimeters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->squaresizemillimeters(), target);
  }

  // optional double YawCorrectionDegrees = 7;
  if (has_yawcorrectiondegrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->yawcorrectiondegrees(), target);
  }

  // optional double PitchCorrectionDegrees = 8;
  if (has_pitchcorrectiondegrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->pitchcorrectiondegrees(), target);
  }

  // optional double RollCorrectionDegrees = 9;
  if (has_rollcorrectiondegrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->rollcorrectiondegrees(), target);
  }

  // optional double DelXCorrectionCentiMeters = 10;
  if (has_delxcorrectioncentimeters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->delxcorrectioncentimeters(), target);
  }

  // optional double DelYCorrectionCentiMeters = 11;
  if (has_delycorrectioncentimeters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->delycorrectioncentimeters(), target);
  }

  // optional double DelZCorrectionCentiMeters = 12;
  if (has_delzcorrectioncentimeters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->delzcorrectioncentimeters(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.CameraCalControlPBMsg)
  return target;
}

int CameraCalControlPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.CameraCalControlPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .vision_messages.CameraCalControlPBMsg.CameraCalibrationType_e CameraCalibrationType = 1;
    if (has_cameracalibrationtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cameracalibrationtype());
    }

    // optional .vision_messages.CameraCalControlPBMsg.CameraCalCmd_e CameraCalCmd = 2;
    if (has_cameracalcmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cameracalcmd());
    }

    // optional string CameraCalBaseFilename = 3;
    if (has_cameracalbasefilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cameracalbasefilename());
    }

    // optional int32 NumberOfRows = 4;
    if (has_numberofrows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numberofrows());
    }

    // optional int32 NumberOfCols = 5;
    if (has_numberofcols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numberofcols());
    }

    // optional double SquareSizeMilliMeters = 6;
    if (has_squaresizemillimeters()) {
      total_size += 1 + 8;
    }

    // optional double YawCorrectionDegrees = 7;
    if (has_yawcorrectiondegrees()) {
      total_size += 1 + 8;
    }

    // optional double PitchCorrectionDegrees = 8;
    if (has_pitchcorrectiondegrees()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double RollCorrectionDegrees = 9;
    if (has_rollcorrectiondegrees()) {
      total_size += 1 + 8;
    }

    // optional double DelXCorrectionCentiMeters = 10;
    if (has_delxcorrectioncentimeters()) {
      total_size += 1 + 8;
    }

    // optional double DelYCorrectionCentiMeters = 11;
    if (has_delycorrectioncentimeters()) {
      total_size += 1 + 8;
    }

    // optional double DelZCorrectionCentiMeters = 12;
    if (has_delzcorrectioncentimeters()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraCalControlPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.CameraCalControlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CameraCalControlPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraCalControlPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.CameraCalControlPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.CameraCalControlPBMsg)
    MergeFrom(*source);
  }
}

void CameraCalControlPBMsg::MergeFrom(const CameraCalControlPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.CameraCalControlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cameracalibrationtype()) {
      set_cameracalibrationtype(from.cameracalibrationtype());
    }
    if (from.has_cameracalcmd()) {
      set_cameracalcmd(from.cameracalcmd());
    }
    if (from.has_cameracalbasefilename()) {
      set_has_cameracalbasefilename();
      cameracalbasefilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cameracalbasefilename_);
    }
    if (from.has_numberofrows()) {
      set_numberofrows(from.numberofrows());
    }
    if (from.has_numberofcols()) {
      set_numberofcols(from.numberofcols());
    }
    if (from.has_squaresizemillimeters()) {
      set_squaresizemillimeters(from.squaresizemillimeters());
    }
    if (from.has_yawcorrectiondegrees()) {
      set_yawcorrectiondegrees(from.yawcorrectiondegrees());
    }
    if (from.has_pitchcorrectiondegrees()) {
      set_pitchcorrectiondegrees(from.pitchcorrectiondegrees());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rollcorrectiondegrees()) {
      set_rollcorrectiondegrees(from.rollcorrectiondegrees());
    }
    if (from.has_delxcorrectioncentimeters()) {
      set_delxcorrectioncentimeters(from.delxcorrectioncentimeters());
    }
    if (from.has_delycorrectioncentimeters()) {
      set_delycorrectioncentimeters(from.delycorrectioncentimeters());
    }
    if (from.has_delzcorrectioncentimeters()) {
      set_delzcorrectioncentimeters(from.delzcorrectioncentimeters());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CameraCalControlPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.CameraCalControlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraCalControlPBMsg::CopyFrom(const CameraCalControlPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.CameraCalControlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraCalControlPBMsg::IsInitialized() const {

  return true;
}

void CameraCalControlPBMsg::Swap(CameraCalControlPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraCalControlPBMsg::InternalSwap(CameraCalControlPBMsg* other) {
  std::swap(cameracalibrationtype_, other->cameracalibrationtype_);
  std::swap(cameracalcmd_, other->cameracalcmd_);
  cameracalbasefilename_.Swap(&other->cameracalbasefilename_);
  std::swap(numberofrows_, other->numberofrows_);
  std::swap(numberofcols_, other->numberofcols_);
  std::swap(squaresizemillimeters_, other->squaresizemillimeters_);
  std::swap(yawcorrectiondegrees_, other->yawcorrectiondegrees_);
  std::swap(pitchcorrectiondegrees_, other->pitchcorrectiondegrees_);
  std::swap(rollcorrectiondegrees_, other->rollcorrectiondegrees_);
  std::swap(delxcorrectioncentimeters_, other->delxcorrectioncentimeters_);
  std::swap(delycorrectioncentimeters_, other->delycorrectioncentimeters_);
  std::swap(delzcorrectioncentimeters_, other->delzcorrectioncentimeters_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraCalControlPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraCalControlPBMsg_descriptor_;
  metadata.reflection = CameraCalControlPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraCalControlPBMsg

// optional .vision_messages.CameraCalControlPBMsg.CameraCalibrationType_e CameraCalibrationType = 1;
bool CameraCalControlPBMsg::has_cameracalibrationtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CameraCalControlPBMsg::set_has_cameracalibrationtype() {
  _has_bits_[0] |= 0x00000001u;
}
void CameraCalControlPBMsg::clear_has_cameracalibrationtype() {
  _has_bits_[0] &= ~0x00000001u;
}
void CameraCalControlPBMsg::clear_cameracalibrationtype() {
  cameracalibrationtype_ = 0;
  clear_has_cameracalibrationtype();
}
 ::vision_messages::CameraCalControlPBMsg_CameraCalibrationType_e CameraCalControlPBMsg::cameracalibrationtype() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraCalControlPBMsg.CameraCalibrationType)
  return static_cast< ::vision_messages::CameraCalControlPBMsg_CameraCalibrationType_e >(cameracalibrationtype_);
}
 void CameraCalControlPBMsg::set_cameracalibrationtype(::vision_messages::CameraCalControlPBMsg_CameraCalibrationType_e value) {
  assert(::vision_messages::CameraCalControlPBMsg_CameraCalibrationType_e_IsValid(value));
  set_has_cameracalibrationtype();
  cameracalibrationtype_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraCalControlPBMsg.CameraCalibrationType)
}

// optional .vision_messages.CameraCalControlPBMsg.CameraCalCmd_e CameraCalCmd = 2;
bool CameraCalControlPBMsg::has_cameracalcmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CameraCalControlPBMsg::set_has_cameracalcmd() {
  _has_bits_[0] |= 0x00000002u;
}
void CameraCalControlPBMsg::clear_has_cameracalcmd() {
  _has_bits_[0] &= ~0x00000002u;
}
void CameraCalControlPBMsg::clear_cameracalcmd() {
  cameracalcmd_ = 0;
  clear_has_cameracalcmd();
}
 ::vision_messages::CameraCalControlPBMsg_CameraCalCmd_e CameraCalControlPBMsg::cameracalcmd() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraCalControlPBMsg.CameraCalCmd)
  return static_cast< ::vision_messages::CameraCalControlPBMsg_CameraCalCmd_e >(cameracalcmd_);
}
 void CameraCalControlPBMsg::set_cameracalcmd(::vision_messages::CameraCalControlPBMsg_CameraCalCmd_e value) {
  assert(::vision_messages::CameraCalControlPBMsg_CameraCalCmd_e_IsValid(value));
  set_has_cameracalcmd();
  cameracalcmd_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraCalControlPBMsg.CameraCalCmd)
}

// optional string CameraCalBaseFilename = 3;
bool CameraCalControlPBMsg::has_cameracalbasefilename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CameraCalControlPBMsg::set_has_cameracalbasefilename() {
  _has_bits_[0] |= 0x00000004u;
}
void CameraCalControlPBMsg::clear_has_cameracalbasefilename() {
  _has_bits_[0] &= ~0x00000004u;
}
void CameraCalControlPBMsg::clear_cameracalbasefilename() {
  cameracalbasefilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cameracalbasefilename();
}
 const ::std::string& CameraCalControlPBMsg::cameracalbasefilename() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraCalControlPBMsg.CameraCalBaseFilename)
  return cameracalbasefilename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraCalControlPBMsg::set_cameracalbasefilename(const ::std::string& value) {
  set_has_cameracalbasefilename();
  cameracalbasefilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vision_messages.CameraCalControlPBMsg.CameraCalBaseFilename)
}
 void CameraCalControlPBMsg::set_cameracalbasefilename(const char* value) {
  set_has_cameracalbasefilename();
  cameracalbasefilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vision_messages.CameraCalControlPBMsg.CameraCalBaseFilename)
}
 void CameraCalControlPBMsg::set_cameracalbasefilename(const char* value, size_t size) {
  set_has_cameracalbasefilename();
  cameracalbasefilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vision_messages.CameraCalControlPBMsg.CameraCalBaseFilename)
}
 ::std::string* CameraCalControlPBMsg::mutable_cameracalbasefilename() {
  set_has_cameracalbasefilename();
  // @@protoc_insertion_point(field_mutable:vision_messages.CameraCalControlPBMsg.CameraCalBaseFilename)
  return cameracalbasefilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CameraCalControlPBMsg::release_cameracalbasefilename() {
  // @@protoc_insertion_point(field_release:vision_messages.CameraCalControlPBMsg.CameraCalBaseFilename)
  clear_has_cameracalbasefilename();
  return cameracalbasefilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraCalControlPBMsg::set_allocated_cameracalbasefilename(::std::string* cameracalbasefilename) {
  if (cameracalbasefilename != NULL) {
    set_has_cameracalbasefilename();
  } else {
    clear_has_cameracalbasefilename();
  }
  cameracalbasefilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cameracalbasefilename);
  // @@protoc_insertion_point(field_set_allocated:vision_messages.CameraCalControlPBMsg.CameraCalBaseFilename)
}

// optional int32 NumberOfRows = 4;
bool CameraCalControlPBMsg::has_numberofrows() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CameraCalControlPBMsg::set_has_numberofrows() {
  _has_bits_[0] |= 0x00000008u;
}
void CameraCalControlPBMsg::clear_has_numberofrows() {
  _has_bits_[0] &= ~0x00000008u;
}
void CameraCalControlPBMsg::clear_numberofrows() {
  numberofrows_ = 0;
  clear_has_numberofrows();
}
 ::google::protobuf::int32 CameraCalControlPBMsg::numberofrows() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraCalControlPBMsg.NumberOfRows)
  return numberofrows_;
}
 void CameraCalControlPBMsg::set_numberofrows(::google::protobuf::int32 value) {
  set_has_numberofrows();
  numberofrows_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraCalControlPBMsg.NumberOfRows)
}

// optional int32 NumberOfCols = 5;
bool CameraCalControlPBMsg::has_numberofcols() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CameraCalControlPBMsg::set_has_numberofcols() {
  _has_bits_[0] |= 0x00000010u;
}
void CameraCalControlPBMsg::clear_has_numberofcols() {
  _has_bits_[0] &= ~0x00000010u;
}
void CameraCalControlPBMsg::clear_numberofcols() {
  numberofcols_ = 0;
  clear_has_numberofcols();
}
 ::google::protobuf::int32 CameraCalControlPBMsg::numberofcols() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraCalControlPBMsg.NumberOfCols)
  return numberofcols_;
}
 void CameraCalControlPBMsg::set_numberofcols(::google::protobuf::int32 value) {
  set_has_numberofcols();
  numberofcols_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraCalControlPBMsg.NumberOfCols)
}

// optional double SquareSizeMilliMeters = 6;
bool CameraCalControlPBMsg::has_squaresizemillimeters() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CameraCalControlPBMsg::set_has_squaresizemillimeters() {
  _has_bits_[0] |= 0x00000020u;
}
void CameraCalControlPBMsg::clear_has_squaresizemillimeters() {
  _has_bits_[0] &= ~0x00000020u;
}
void CameraCalControlPBMsg::clear_squaresizemillimeters() {
  squaresizemillimeters_ = 0;
  clear_has_squaresizemillimeters();
}
 double CameraCalControlPBMsg::squaresizemillimeters() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraCalControlPBMsg.SquareSizeMilliMeters)
  return squaresizemillimeters_;
}
 void CameraCalControlPBMsg::set_squaresizemillimeters(double value) {
  set_has_squaresizemillimeters();
  squaresizemillimeters_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraCalControlPBMsg.SquareSizeMilliMeters)
}

// optional double YawCorrectionDegrees = 7;
bool CameraCalControlPBMsg::has_yawcorrectiondegrees() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CameraCalControlPBMsg::set_has_yawcorrectiondegrees() {
  _has_bits_[0] |= 0x00000040u;
}
void CameraCalControlPBMsg::clear_has_yawcorrectiondegrees() {
  _has_bits_[0] &= ~0x00000040u;
}
void CameraCalControlPBMsg::clear_yawcorrectiondegrees() {
  yawcorrectiondegrees_ = 0;
  clear_has_yawcorrectiondegrees();
}
 double CameraCalControlPBMsg::yawcorrectiondegrees() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraCalControlPBMsg.YawCorrectionDegrees)
  return yawcorrectiondegrees_;
}
 void CameraCalControlPBMsg::set_yawcorrectiondegrees(double value) {
  set_has_yawcorrectiondegrees();
  yawcorrectiondegrees_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraCalControlPBMsg.YawCorrectionDegrees)
}

// optional double PitchCorrectionDegrees = 8;
bool CameraCalControlPBMsg::has_pitchcorrectiondegrees() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CameraCalControlPBMsg::set_has_pitchcorrectiondegrees() {
  _has_bits_[0] |= 0x00000080u;
}
void CameraCalControlPBMsg::clear_has_pitchcorrectiondegrees() {
  _has_bits_[0] &= ~0x00000080u;
}
void CameraCalControlPBMsg::clear_pitchcorrectiondegrees() {
  pitchcorrectiondegrees_ = 0;
  clear_has_pitchcorrectiondegrees();
}
 double CameraCalControlPBMsg::pitchcorrectiondegrees() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraCalControlPBMsg.PitchCorrectionDegrees)
  return pitchcorrectiondegrees_;
}
 void CameraCalControlPBMsg::set_pitchcorrectiondegrees(double value) {
  set_has_pitchcorrectiondegrees();
  pitchcorrectiondegrees_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraCalControlPBMsg.PitchCorrectionDegrees)
}

// optional double RollCorrectionDegrees = 9;
bool CameraCalControlPBMsg::has_rollcorrectiondegrees() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CameraCalControlPBMsg::set_has_rollcorrectiondegrees() {
  _has_bits_[0] |= 0x00000100u;
}
void CameraCalControlPBMsg::clear_has_rollcorrectiondegrees() {
  _has_bits_[0] &= ~0x00000100u;
}
void CameraCalControlPBMsg::clear_rollcorrectiondegrees() {
  rollcorrectiondegrees_ = 0;
  clear_has_rollcorrectiondegrees();
}
 double CameraCalControlPBMsg::rollcorrectiondegrees() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraCalControlPBMsg.RollCorrectionDegrees)
  return rollcorrectiondegrees_;
}
 void CameraCalControlPBMsg::set_rollcorrectiondegrees(double value) {
  set_has_rollcorrectiondegrees();
  rollcorrectiondegrees_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraCalControlPBMsg.RollCorrectionDegrees)
}

// optional double DelXCorrectionCentiMeters = 10;
bool CameraCalControlPBMsg::has_delxcorrectioncentimeters() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CameraCalControlPBMsg::set_has_delxcorrectioncentimeters() {
  _has_bits_[0] |= 0x00000200u;
}
void CameraCalControlPBMsg::clear_has_delxcorrectioncentimeters() {
  _has_bits_[0] &= ~0x00000200u;
}
void CameraCalControlPBMsg::clear_delxcorrectioncentimeters() {
  delxcorrectioncentimeters_ = 0;
  clear_has_delxcorrectioncentimeters();
}
 double CameraCalControlPBMsg::delxcorrectioncentimeters() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraCalControlPBMsg.DelXCorrectionCentiMeters)
  return delxcorrectioncentimeters_;
}
 void CameraCalControlPBMsg::set_delxcorrectioncentimeters(double value) {
  set_has_delxcorrectioncentimeters();
  delxcorrectioncentimeters_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraCalControlPBMsg.DelXCorrectionCentiMeters)
}

// optional double DelYCorrectionCentiMeters = 11;
bool CameraCalControlPBMsg::has_delycorrectioncentimeters() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CameraCalControlPBMsg::set_has_delycorrectioncentimeters() {
  _has_bits_[0] |= 0x00000400u;
}
void CameraCalControlPBMsg::clear_has_delycorrectioncentimeters() {
  _has_bits_[0] &= ~0x00000400u;
}
void CameraCalControlPBMsg::clear_delycorrectioncentimeters() {
  delycorrectioncentimeters_ = 0;
  clear_has_delycorrectioncentimeters();
}
 double CameraCalControlPBMsg::delycorrectioncentimeters() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraCalControlPBMsg.DelYCorrectionCentiMeters)
  return delycorrectioncentimeters_;
}
 void CameraCalControlPBMsg::set_delycorrectioncentimeters(double value) {
  set_has_delycorrectioncentimeters();
  delycorrectioncentimeters_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraCalControlPBMsg.DelYCorrectionCentiMeters)
}

// optional double DelZCorrectionCentiMeters = 12;
bool CameraCalControlPBMsg::has_delzcorrectioncentimeters() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CameraCalControlPBMsg::set_has_delzcorrectioncentimeters() {
  _has_bits_[0] |= 0x00000800u;
}
void CameraCalControlPBMsg::clear_has_delzcorrectioncentimeters() {
  _has_bits_[0] &= ~0x00000800u;
}
void CameraCalControlPBMsg::clear_delzcorrectioncentimeters() {
  delzcorrectioncentimeters_ = 0;
  clear_has_delzcorrectioncentimeters();
}
 double CameraCalControlPBMsg::delzcorrectioncentimeters() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraCalControlPBMsg.DelZCorrectionCentiMeters)
  return delzcorrectioncentimeters_;
}
 void CameraCalControlPBMsg::set_delzcorrectioncentimeters(double value) {
  set_has_delzcorrectioncentimeters();
  delzcorrectioncentimeters_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraCalControlPBMsg.DelZCorrectionCentiMeters)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CameraCalStatusPBMsg_CameraCalState_e_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraCalStatusPBMsg_CameraCalState_e_descriptor_;
}
bool CameraCalStatusPBMsg_CameraCalState_e_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CameraCalStatusPBMsg_CameraCalState_e CameraCalStatusPBMsg::Reset;
const CameraCalStatusPBMsg_CameraCalState_e CameraCalStatusPBMsg::WaitForStart;
const CameraCalStatusPBMsg_CameraCalState_e CameraCalStatusPBMsg::StreamImages;
const CameraCalStatusPBMsg_CameraCalState_e CameraCalStatusPBMsg::ImageValidate;
const CameraCalStatusPBMsg_CameraCalState_e CameraCalStatusPBMsg::ImageCapturedWait;
const CameraCalStatusPBMsg_CameraCalState_e CameraCalStatusPBMsg::CalProcess;
const CameraCalStatusPBMsg_CameraCalState_e CameraCalStatusPBMsg::CalComplete;
const CameraCalStatusPBMsg_CameraCalState_e CameraCalStatusPBMsg::CalError;
const CameraCalStatusPBMsg_CameraCalState_e CameraCalStatusPBMsg::CameraCalState_e_MIN;
const CameraCalStatusPBMsg_CameraCalState_e CameraCalStatusPBMsg::CameraCalState_e_MAX;
const int CameraCalStatusPBMsg::CameraCalState_e_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraCalStatusPBMsg::kCameraCalStateFieldNumber;
const int CameraCalStatusPBMsg::kNumberOfImagesCapturedFieldNumber;
const int CameraCalStatusPBMsg::kCameraCalStatusMsgFieldNumber;
const int CameraCalStatusPBMsg::kImageOkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraCalStatusPBMsg::CameraCalStatusPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.CameraCalStatusPBMsg)
}

void CameraCalStatusPBMsg::InitAsDefaultInstance() {
}

CameraCalStatusPBMsg::CameraCalStatusPBMsg(const CameraCalStatusPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.CameraCalStatusPBMsg)
}

void CameraCalStatusPBMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cameracalstate_ = 0;
  numberofimagescaptured_ = 0;
  cameracalstatusmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imageok_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraCalStatusPBMsg::~CameraCalStatusPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.CameraCalStatusPBMsg)
  SharedDtor();
}

void CameraCalStatusPBMsg::SharedDtor() {
  cameracalstatusmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CameraCalStatusPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraCalStatusPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraCalStatusPBMsg_descriptor_;
}

const CameraCalStatusPBMsg& CameraCalStatusPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

CameraCalStatusPBMsg* CameraCalStatusPBMsg::default_instance_ = NULL;

CameraCalStatusPBMsg* CameraCalStatusPBMsg::New(::google::protobuf::Arena* arena) const {
  CameraCalStatusPBMsg* n = new CameraCalStatusPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraCalStatusPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.CameraCalStatusPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CameraCalStatusPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CameraCalStatusPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(cameracalstate_, numberofimagescaptured_);
    if (has_cameracalstatusmsg()) {
      cameracalstatusmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    imageok_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CameraCalStatusPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.CameraCalStatusPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vision_messages.CameraCalStatusPBMsg.CameraCalState_e CameraCalState = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vision_messages::CameraCalStatusPBMsg_CameraCalState_e_IsValid(value)) {
            set_cameracalstate(static_cast< ::vision_messages::CameraCalStatusPBMsg_CameraCalState_e >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_NumberOfImagesCaptured;
        break;
      }

      // optional int32 NumberOfImagesCaptured = 2;
      case 2: {
        if (tag == 16) {
         parse_NumberOfImagesCaptured:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberofimagescaptured_)));
          set_has_numberofimagescaptured();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_CameraCalStatusMsg;
        break;
      }

      // optional string CameraCalStatusMsg = 3;
      case 3: {
        if (tag == 26) {
         parse_CameraCalStatusMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cameracalstatusmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cameracalstatusmsg().data(), this->cameracalstatusmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vision_messages.CameraCalStatusPBMsg.CameraCalStatusMsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ImageOk;
        break;
      }

      // optional bool ImageOk = 4;
      case 4: {
        if (tag == 32) {
         parse_ImageOk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &imageok_)));
          set_has_imageok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.CameraCalStatusPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.CameraCalStatusPBMsg)
  return false;
#undef DO_
}

void CameraCalStatusPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.CameraCalStatusPBMsg)
  // optional .vision_messages.CameraCalStatusPBMsg.CameraCalState_e CameraCalState = 1;
  if (has_cameracalstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cameracalstate(), output);
  }

  // optional int32 NumberOfImagesCaptured = 2;
  if (has_numberofimagescaptured()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numberofimagescaptured(), output);
  }

  // optional string CameraCalStatusMsg = 3;
  if (has_cameracalstatusmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cameracalstatusmsg().data(), this->cameracalstatusmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.CameraCalStatusPBMsg.CameraCalStatusMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cameracalstatusmsg(), output);
  }

  // optional bool ImageOk = 4;
  if (has_imageok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->imageok(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.CameraCalStatusPBMsg)
}

::google::protobuf::uint8* CameraCalStatusPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.CameraCalStatusPBMsg)
  // optional .vision_messages.CameraCalStatusPBMsg.CameraCalState_e CameraCalState = 1;
  if (has_cameracalstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cameracalstate(), target);
  }

  // optional int32 NumberOfImagesCaptured = 2;
  if (has_numberofimagescaptured()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numberofimagescaptured(), target);
  }

  // optional string CameraCalStatusMsg = 3;
  if (has_cameracalstatusmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cameracalstatusmsg().data(), this->cameracalstatusmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.CameraCalStatusPBMsg.CameraCalStatusMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cameracalstatusmsg(), target);
  }

  // optional bool ImageOk = 4;
  if (has_imageok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->imageok(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.CameraCalStatusPBMsg)
  return target;
}

int CameraCalStatusPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.CameraCalStatusPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .vision_messages.CameraCalStatusPBMsg.CameraCalState_e CameraCalState = 1;
    if (has_cameracalstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cameracalstate());
    }

    // optional int32 NumberOfImagesCaptured = 2;
    if (has_numberofimagescaptured()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numberofimagescaptured());
    }

    // optional string CameraCalStatusMsg = 3;
    if (has_cameracalstatusmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cameracalstatusmsg());
    }

    // optional bool ImageOk = 4;
    if (has_imageok()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraCalStatusPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.CameraCalStatusPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CameraCalStatusPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraCalStatusPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.CameraCalStatusPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.CameraCalStatusPBMsg)
    MergeFrom(*source);
  }
}

void CameraCalStatusPBMsg::MergeFrom(const CameraCalStatusPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.CameraCalStatusPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cameracalstate()) {
      set_cameracalstate(from.cameracalstate());
    }
    if (from.has_numberofimagescaptured()) {
      set_numberofimagescaptured(from.numberofimagescaptured());
    }
    if (from.has_cameracalstatusmsg()) {
      set_has_cameracalstatusmsg();
      cameracalstatusmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cameracalstatusmsg_);
    }
    if (from.has_imageok()) {
      set_imageok(from.imageok());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CameraCalStatusPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.CameraCalStatusPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraCalStatusPBMsg::CopyFrom(const CameraCalStatusPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.CameraCalStatusPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraCalStatusPBMsg::IsInitialized() const {

  return true;
}

void CameraCalStatusPBMsg::Swap(CameraCalStatusPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraCalStatusPBMsg::InternalSwap(CameraCalStatusPBMsg* other) {
  std::swap(cameracalstate_, other->cameracalstate_);
  std::swap(numberofimagescaptured_, other->numberofimagescaptured_);
  cameracalstatusmsg_.Swap(&other->cameracalstatusmsg_);
  std::swap(imageok_, other->imageok_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraCalStatusPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraCalStatusPBMsg_descriptor_;
  metadata.reflection = CameraCalStatusPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraCalStatusPBMsg

// optional .vision_messages.CameraCalStatusPBMsg.CameraCalState_e CameraCalState = 1;
bool CameraCalStatusPBMsg::has_cameracalstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CameraCalStatusPBMsg::set_has_cameracalstate() {
  _has_bits_[0] |= 0x00000001u;
}
void CameraCalStatusPBMsg::clear_has_cameracalstate() {
  _has_bits_[0] &= ~0x00000001u;
}
void CameraCalStatusPBMsg::clear_cameracalstate() {
  cameracalstate_ = 0;
  clear_has_cameracalstate();
}
 ::vision_messages::CameraCalStatusPBMsg_CameraCalState_e CameraCalStatusPBMsg::cameracalstate() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraCalStatusPBMsg.CameraCalState)
  return static_cast< ::vision_messages::CameraCalStatusPBMsg_CameraCalState_e >(cameracalstate_);
}
 void CameraCalStatusPBMsg::set_cameracalstate(::vision_messages::CameraCalStatusPBMsg_CameraCalState_e value) {
  assert(::vision_messages::CameraCalStatusPBMsg_CameraCalState_e_IsValid(value));
  set_has_cameracalstate();
  cameracalstate_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraCalStatusPBMsg.CameraCalState)
}

// optional int32 NumberOfImagesCaptured = 2;
bool CameraCalStatusPBMsg::has_numberofimagescaptured() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CameraCalStatusPBMsg::set_has_numberofimagescaptured() {
  _has_bits_[0] |= 0x00000002u;
}
void CameraCalStatusPBMsg::clear_has_numberofimagescaptured() {
  _has_bits_[0] &= ~0x00000002u;
}
void CameraCalStatusPBMsg::clear_numberofimagescaptured() {
  numberofimagescaptured_ = 0;
  clear_has_numberofimagescaptured();
}
 ::google::protobuf::int32 CameraCalStatusPBMsg::numberofimagescaptured() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraCalStatusPBMsg.NumberOfImagesCaptured)
  return numberofimagescaptured_;
}
 void CameraCalStatusPBMsg::set_numberofimagescaptured(::google::protobuf::int32 value) {
  set_has_numberofimagescaptured();
  numberofimagescaptured_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraCalStatusPBMsg.NumberOfImagesCaptured)
}

// optional string CameraCalStatusMsg = 3;
bool CameraCalStatusPBMsg::has_cameracalstatusmsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CameraCalStatusPBMsg::set_has_cameracalstatusmsg() {
  _has_bits_[0] |= 0x00000004u;
}
void CameraCalStatusPBMsg::clear_has_cameracalstatusmsg() {
  _has_bits_[0] &= ~0x00000004u;
}
void CameraCalStatusPBMsg::clear_cameracalstatusmsg() {
  cameracalstatusmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cameracalstatusmsg();
}
 const ::std::string& CameraCalStatusPBMsg::cameracalstatusmsg() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraCalStatusPBMsg.CameraCalStatusMsg)
  return cameracalstatusmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraCalStatusPBMsg::set_cameracalstatusmsg(const ::std::string& value) {
  set_has_cameracalstatusmsg();
  cameracalstatusmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vision_messages.CameraCalStatusPBMsg.CameraCalStatusMsg)
}
 void CameraCalStatusPBMsg::set_cameracalstatusmsg(const char* value) {
  set_has_cameracalstatusmsg();
  cameracalstatusmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vision_messages.CameraCalStatusPBMsg.CameraCalStatusMsg)
}
 void CameraCalStatusPBMsg::set_cameracalstatusmsg(const char* value, size_t size) {
  set_has_cameracalstatusmsg();
  cameracalstatusmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vision_messages.CameraCalStatusPBMsg.CameraCalStatusMsg)
}
 ::std::string* CameraCalStatusPBMsg::mutable_cameracalstatusmsg() {
  set_has_cameracalstatusmsg();
  // @@protoc_insertion_point(field_mutable:vision_messages.CameraCalStatusPBMsg.CameraCalStatusMsg)
  return cameracalstatusmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CameraCalStatusPBMsg::release_cameracalstatusmsg() {
  // @@protoc_insertion_point(field_release:vision_messages.CameraCalStatusPBMsg.CameraCalStatusMsg)
  clear_has_cameracalstatusmsg();
  return cameracalstatusmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraCalStatusPBMsg::set_allocated_cameracalstatusmsg(::std::string* cameracalstatusmsg) {
  if (cameracalstatusmsg != NULL) {
    set_has_cameracalstatusmsg();
  } else {
    clear_has_cameracalstatusmsg();
  }
  cameracalstatusmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cameracalstatusmsg);
  // @@protoc_insertion_point(field_set_allocated:vision_messages.CameraCalStatusPBMsg.CameraCalStatusMsg)
}

// optional bool ImageOk = 4;
bool CameraCalStatusPBMsg::has_imageok() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CameraCalStatusPBMsg::set_has_imageok() {
  _has_bits_[0] |= 0x00000008u;
}
void CameraCalStatusPBMsg::clear_has_imageok() {
  _has_bits_[0] &= ~0x00000008u;
}
void CameraCalStatusPBMsg::clear_imageok() {
  imageok_ = false;
  clear_has_imageok();
}
 bool CameraCalStatusPBMsg::imageok() const {
  // @@protoc_insertion_point(field_get:vision_messages.CameraCalStatusPBMsg.ImageOk)
  return imageok_;
}
 void CameraCalStatusPBMsg::set_imageok(bool value) {
  set_has_imageok();
  imageok_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.CameraCalStatusPBMsg.ImageOk)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureMatchProcCtrlPBMsg::kFeatureMatchingProcCmdFieldNumber;
const int FeatureMatchProcCtrlPBMsg::kFeatureExtractionTypeRoutineFieldNumber;
const int FeatureMatchProcCtrlPBMsg::kFeatureMatchTypeRoutineFieldNumber;
const int FeatureMatchProcCtrlPBMsg::kFMImagePostProcessMethodFieldNumber;
const int FeatureMatchProcCtrlPBMsg::kUseGPUProcessingFieldNumber;
const int FeatureMatchProcCtrlPBMsg::kParamI1FieldNumber;
const int FeatureMatchProcCtrlPBMsg::kParamI2FieldNumber;
const int FeatureMatchProcCtrlPBMsg::kParamI3FieldNumber;
const int FeatureMatchProcCtrlPBMsg::kParamI4FieldNumber;
const int FeatureMatchProcCtrlPBMsg::kParamI5FieldNumber;
const int FeatureMatchProcCtrlPBMsg::kParamI6FieldNumber;
const int FeatureMatchProcCtrlPBMsg::kParamI7FieldNumber;
const int FeatureMatchProcCtrlPBMsg::kParamI8FieldNumber;
const int FeatureMatchProcCtrlPBMsg::kParamI9FieldNumber;
const int FeatureMatchProcCtrlPBMsg::kParamF10FieldNumber;
const int FeatureMatchProcCtrlPBMsg::kParamF11FieldNumber;
const int FeatureMatchProcCtrlPBMsg::kParamF12FieldNumber;
const int FeatureMatchProcCtrlPBMsg::kParamF13FieldNumber;
const int FeatureMatchProcCtrlPBMsg::kParamF14FieldNumber;
const int FeatureMatchProcCtrlPBMsg::kParamF15FieldNumber;
const int FeatureMatchProcCtrlPBMsg::kParamF16FieldNumber;
const int FeatureMatchProcCtrlPBMsg::kParamF17FieldNumber;
const int FeatureMatchProcCtrlPBMsg::kParamF18FieldNumber;
const int FeatureMatchProcCtrlPBMsg::kParamF19FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureMatchProcCtrlPBMsg::FeatureMatchProcCtrlPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.FeatureMatchProcCtrlPBMsg)
}

void FeatureMatchProcCtrlPBMsg::InitAsDefaultInstance() {
}

FeatureMatchProcCtrlPBMsg::FeatureMatchProcCtrlPBMsg(const FeatureMatchProcCtrlPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.FeatureMatchProcCtrlPBMsg)
}

void FeatureMatchProcCtrlPBMsg::SharedCtor() {
  _cached_size_ = 0;
  featurematchingproccmd_ = 0;
  featureextractiontyperoutine_ = 0;
  featurematchtyperoutine_ = 0;
  fmimagepostprocessmethod_ = 0;
  usegpuprocessing_ = false;
  parami_1_ = 0;
  parami_2_ = 0;
  parami_3_ = 0;
  parami_4_ = 0;
  parami_5_ = 0;
  parami_6_ = 0;
  parami_7_ = 0;
  parami_8_ = 0;
  parami_9_ = 0;
  paramf_10_ = 0;
  paramf_11_ = 0;
  paramf_12_ = 0;
  paramf_13_ = 0;
  paramf_14_ = 0;
  paramf_15_ = 0;
  paramf_16_ = 0;
  paramf_17_ = 0;
  paramf_18_ = 0;
  paramf_19_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureMatchProcCtrlPBMsg::~FeatureMatchProcCtrlPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.FeatureMatchProcCtrlPBMsg)
  SharedDtor();
}

void FeatureMatchProcCtrlPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeatureMatchProcCtrlPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureMatchProcCtrlPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureMatchProcCtrlPBMsg_descriptor_;
}

const FeatureMatchProcCtrlPBMsg& FeatureMatchProcCtrlPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

FeatureMatchProcCtrlPBMsg* FeatureMatchProcCtrlPBMsg::default_instance_ = NULL;

FeatureMatchProcCtrlPBMsg* FeatureMatchProcCtrlPBMsg::New(::google::protobuf::Arena* arena) const {
  FeatureMatchProcCtrlPBMsg* n = new FeatureMatchProcCtrlPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureMatchProcCtrlPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.FeatureMatchProcCtrlPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FeatureMatchProcCtrlPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FeatureMatchProcCtrlPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(featurematchingproccmd_, parami_3_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(parami_4_, paramf_11_);
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(paramf_12_, paramf_19_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FeatureMatchProcCtrlPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.FeatureMatchProcCtrlPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 FeatureMatchingProcCmd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &featurematchingproccmd_)));
          set_has_featurematchingproccmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_FeatureExtractionTypeRoutine;
        break;
      }

      // optional int32 FeatureExtractionTypeRoutine = 2;
      case 2: {
        if (tag == 16) {
         parse_FeatureExtractionTypeRoutine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &featureextractiontyperoutine_)));
          set_has_featureextractiontyperoutine();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FeatureMatchTypeRoutine;
        break;
      }

      // optional int32 FeatureMatchTypeRoutine = 3;
      case 3: {
        if (tag == 24) {
         parse_FeatureMatchTypeRoutine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &featurematchtyperoutine_)));
          set_has_featurematchtyperoutine();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_FMImagePostProcessMethod;
        break;
      }

      // optional int32 FMImagePostProcessMethod = 4;
      case 4: {
        if (tag == 32) {
         parse_FMImagePostProcessMethod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmimagepostprocessmethod_)));
          set_has_fmimagepostprocessmethod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_UseGPUProcessing;
        break;
      }

      // optional bool UseGPUProcessing = 5;
      case 5: {
        if (tag == 40) {
         parse_UseGPUProcessing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usegpuprocessing_)));
          set_has_usegpuprocessing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ParamI_1;
        break;
      }

      // optional int32 ParamI_1 = 10;
      case 10: {
        if (tag == 80) {
         parse_ParamI_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parami_1_)));
          set_has_parami_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ParamI_2;
        break;
      }

      // optional int32 ParamI_2 = 11;
      case 11: {
        if (tag == 88) {
         parse_ParamI_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parami_2_)));
          set_has_parami_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ParamI_3;
        break;
      }

      // optional int32 ParamI_3 = 12;
      case 12: {
        if (tag == 96) {
         parse_ParamI_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parami_3_)));
          set_has_parami_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_ParamI_4;
        break;
      }

      // optional int32 ParamI_4 = 13;
      case 13: {
        if (tag == 104) {
         parse_ParamI_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parami_4_)));
          set_has_parami_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_ParamI_5;
        break;
      }

      // optional int32 ParamI_5 = 14;
      case 14: {
        if (tag == 112) {
         parse_ParamI_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parami_5_)));
          set_has_parami_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_ParamI_6;
        break;
      }

      // optional int32 ParamI_6 = 15;
      case 15: {
        if (tag == 120) {
         parse_ParamI_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parami_6_)));
          set_has_parami_6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_ParamI_7;
        break;
      }

      // optional int32 ParamI_7 = 16;
      case 16: {
        if (tag == 128) {
         parse_ParamI_7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parami_7_)));
          set_has_parami_7();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_ParamI_8;
        break;
      }

      // optional int32 ParamI_8 = 17;
      case 17: {
        if (tag == 136) {
         parse_ParamI_8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parami_8_)));
          set_has_parami_8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_ParamI_9;
        break;
      }

      // optional int32 ParamI_9 = 18;
      case 18: {
        if (tag == 144) {
         parse_ParamI_9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parami_9_)));
          set_has_parami_9();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_ParamF_10;
        break;
      }

      // optional double ParamF_10 = 20;
      case 20: {
        if (tag == 161) {
         parse_ParamF_10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &paramf_10_)));
          set_has_paramf_10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_ParamF_11;
        break;
      }

      // optional double ParamF_11 = 21;
      case 21: {
        if (tag == 169) {
         parse_ParamF_11:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &paramf_11_)));
          set_has_paramf_11();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_ParamF_12;
        break;
      }

      // optional double ParamF_12 = 22;
      case 22: {
        if (tag == 177) {
         parse_ParamF_12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &paramf_12_)));
          set_has_paramf_12();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_ParamF_13;
        break;
      }

      // optional double ParamF_13 = 23;
      case 23: {
        if (tag == 185) {
         parse_ParamF_13:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &paramf_13_)));
          set_has_paramf_13();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_ParamF_14;
        break;
      }

      // optional double ParamF_14 = 24;
      case 24: {
        if (tag == 193) {
         parse_ParamF_14:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &paramf_14_)));
          set_has_paramf_14();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_ParamF_15;
        break;
      }

      // optional double ParamF_15 = 25;
      case 25: {
        if (tag == 201) {
         parse_ParamF_15:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &paramf_15_)));
          set_has_paramf_15();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_ParamF_16;
        break;
      }

      // optional double ParamF_16 = 26;
      case 26: {
        if (tag == 209) {
         parse_ParamF_16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &paramf_16_)));
          set_has_paramf_16();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_ParamF_17;
        break;
      }

      // optional double ParamF_17 = 27;
      case 27: {
        if (tag == 217) {
         parse_ParamF_17:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &paramf_17_)));
          set_has_paramf_17();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_ParamF_18;
        break;
      }

      // optional double ParamF_18 = 28;
      case 28: {
        if (tag == 225) {
         parse_ParamF_18:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &paramf_18_)));
          set_has_paramf_18();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(233)) goto parse_ParamF_19;
        break;
      }

      // optional double ParamF_19 = 29;
      case 29: {
        if (tag == 233) {
         parse_ParamF_19:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &paramf_19_)));
          set_has_paramf_19();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.FeatureMatchProcCtrlPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.FeatureMatchProcCtrlPBMsg)
  return false;
#undef DO_
}

void FeatureMatchProcCtrlPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.FeatureMatchProcCtrlPBMsg)
  // optional int32 FeatureMatchingProcCmd = 1;
  if (has_featurematchingproccmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->featurematchingproccmd(), output);
  }

  // optional int32 FeatureExtractionTypeRoutine = 2;
  if (has_featureextractiontyperoutine()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->featureextractiontyperoutine(), output);
  }

  // optional int32 FeatureMatchTypeRoutine = 3;
  if (has_featurematchtyperoutine()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->featurematchtyperoutine(), output);
  }

  // optional int32 FMImagePostProcessMethod = 4;
  if (has_fmimagepostprocessmethod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fmimagepostprocessmethod(), output);
  }

  // optional bool UseGPUProcessing = 5;
  if (has_usegpuprocessing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->usegpuprocessing(), output);
  }

  // optional int32 ParamI_1 = 10;
  if (has_parami_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->parami_1(), output);
  }

  // optional int32 ParamI_2 = 11;
  if (has_parami_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->parami_2(), output);
  }

  // optional int32 ParamI_3 = 12;
  if (has_parami_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->parami_3(), output);
  }

  // optional int32 ParamI_4 = 13;
  if (has_parami_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->parami_4(), output);
  }

  // optional int32 ParamI_5 = 14;
  if (has_parami_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->parami_5(), output);
  }

  // optional int32 ParamI_6 = 15;
  if (has_parami_6()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->parami_6(), output);
  }

  // optional int32 ParamI_7 = 16;
  if (has_parami_7()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->parami_7(), output);
  }

  // optional int32 ParamI_8 = 17;
  if (has_parami_8()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->parami_8(), output);
  }

  // optional int32 ParamI_9 = 18;
  if (has_parami_9()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->parami_9(), output);
  }

  // optional double ParamF_10 = 20;
  if (has_paramf_10()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->paramf_10(), output);
  }

  // optional double ParamF_11 = 21;
  if (has_paramf_11()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->paramf_11(), output);
  }

  // optional double ParamF_12 = 22;
  if (has_paramf_12()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->paramf_12(), output);
  }

  // optional double ParamF_13 = 23;
  if (has_paramf_13()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->paramf_13(), output);
  }

  // optional double ParamF_14 = 24;
  if (has_paramf_14()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->paramf_14(), output);
  }

  // optional double ParamF_15 = 25;
  if (has_paramf_15()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->paramf_15(), output);
  }

  // optional double ParamF_16 = 26;
  if (has_paramf_16()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->paramf_16(), output);
  }

  // optional double ParamF_17 = 27;
  if (has_paramf_17()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->paramf_17(), output);
  }

  // optional double ParamF_18 = 28;
  if (has_paramf_18()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->paramf_18(), output);
  }

  // optional double ParamF_19 = 29;
  if (has_paramf_19()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->paramf_19(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.FeatureMatchProcCtrlPBMsg)
}

::google::protobuf::uint8* FeatureMatchProcCtrlPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.FeatureMatchProcCtrlPBMsg)
  // optional int32 FeatureMatchingProcCmd = 1;
  if (has_featurematchingproccmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->featurematchingproccmd(), target);
  }

  // optional int32 FeatureExtractionTypeRoutine = 2;
  if (has_featureextractiontyperoutine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->featureextractiontyperoutine(), target);
  }

  // optional int32 FeatureMatchTypeRoutine = 3;
  if (has_featurematchtyperoutine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->featurematchtyperoutine(), target);
  }

  // optional int32 FMImagePostProcessMethod = 4;
  if (has_fmimagepostprocessmethod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fmimagepostprocessmethod(), target);
  }

  // optional bool UseGPUProcessing = 5;
  if (has_usegpuprocessing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->usegpuprocessing(), target);
  }

  // optional int32 ParamI_1 = 10;
  if (has_parami_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->parami_1(), target);
  }

  // optional int32 ParamI_2 = 11;
  if (has_parami_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->parami_2(), target);
  }

  // optional int32 ParamI_3 = 12;
  if (has_parami_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->parami_3(), target);
  }

  // optional int32 ParamI_4 = 13;
  if (has_parami_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->parami_4(), target);
  }

  // optional int32 ParamI_5 = 14;
  if (has_parami_5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->parami_5(), target);
  }

  // optional int32 ParamI_6 = 15;
  if (has_parami_6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->parami_6(), target);
  }

  // optional int32 ParamI_7 = 16;
  if (has_parami_7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->parami_7(), target);
  }

  // optional int32 ParamI_8 = 17;
  if (has_parami_8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->parami_8(), target);
  }

  // optional int32 ParamI_9 = 18;
  if (has_parami_9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->parami_9(), target);
  }

  // optional double ParamF_10 = 20;
  if (has_paramf_10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->paramf_10(), target);
  }

  // optional double ParamF_11 = 21;
  if (has_paramf_11()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->paramf_11(), target);
  }

  // optional double ParamF_12 = 22;
  if (has_paramf_12()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->paramf_12(), target);
  }

  // optional double ParamF_13 = 23;
  if (has_paramf_13()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->paramf_13(), target);
  }

  // optional double ParamF_14 = 24;
  if (has_paramf_14()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->paramf_14(), target);
  }

  // optional double ParamF_15 = 25;
  if (has_paramf_15()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->paramf_15(), target);
  }

  // optional double ParamF_16 = 26;
  if (has_paramf_16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->paramf_16(), target);
  }

  // optional double ParamF_17 = 27;
  if (has_paramf_17()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->paramf_17(), target);
  }

  // optional double ParamF_18 = 28;
  if (has_paramf_18()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->paramf_18(), target);
  }

  // optional double ParamF_19 = 29;
  if (has_paramf_19()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->paramf_19(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.FeatureMatchProcCtrlPBMsg)
  return target;
}

int FeatureMatchProcCtrlPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.FeatureMatchProcCtrlPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 FeatureMatchingProcCmd = 1;
    if (has_featurematchingproccmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->featurematchingproccmd());
    }

    // optional int32 FeatureExtractionTypeRoutine = 2;
    if (has_featureextractiontyperoutine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->featureextractiontyperoutine());
    }

    // optional int32 FeatureMatchTypeRoutine = 3;
    if (has_featurematchtyperoutine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->featurematchtyperoutine());
    }

    // optional int32 FMImagePostProcessMethod = 4;
    if (has_fmimagepostprocessmethod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmimagepostprocessmethod());
    }

    // optional bool UseGPUProcessing = 5;
    if (has_usegpuprocessing()) {
      total_size += 1 + 1;
    }

    // optional int32 ParamI_1 = 10;
    if (has_parami_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parami_1());
    }

    // optional int32 ParamI_2 = 11;
    if (has_parami_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parami_2());
    }

    // optional int32 ParamI_3 = 12;
    if (has_parami_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parami_3());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 ParamI_4 = 13;
    if (has_parami_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parami_4());
    }

    // optional int32 ParamI_5 = 14;
    if (has_parami_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parami_5());
    }

    // optional int32 ParamI_6 = 15;
    if (has_parami_6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parami_6());
    }

    // optional int32 ParamI_7 = 16;
    if (has_parami_7()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parami_7());
    }

    // optional int32 ParamI_8 = 17;
    if (has_parami_8()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parami_8());
    }

    // optional int32 ParamI_9 = 18;
    if (has_parami_9()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parami_9());
    }

    // optional double ParamF_10 = 20;
    if (has_paramf_10()) {
      total_size += 2 + 8;
    }

    // optional double ParamF_11 = 21;
    if (has_paramf_11()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double ParamF_12 = 22;
    if (has_paramf_12()) {
      total_size += 2 + 8;
    }

    // optional double ParamF_13 = 23;
    if (has_paramf_13()) {
      total_size += 2 + 8;
    }

    // optional double ParamF_14 = 24;
    if (has_paramf_14()) {
      total_size += 2 + 8;
    }

    // optional double ParamF_15 = 25;
    if (has_paramf_15()) {
      total_size += 2 + 8;
    }

    // optional double ParamF_16 = 26;
    if (has_paramf_16()) {
      total_size += 2 + 8;
    }

    // optional double ParamF_17 = 27;
    if (has_paramf_17()) {
      total_size += 2 + 8;
    }

    // optional double ParamF_18 = 28;
    if (has_paramf_18()) {
      total_size += 2 + 8;
    }

    // optional double ParamF_19 = 29;
    if (has_paramf_19()) {
      total_size += 2 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureMatchProcCtrlPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.FeatureMatchProcCtrlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FeatureMatchProcCtrlPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureMatchProcCtrlPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.FeatureMatchProcCtrlPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.FeatureMatchProcCtrlPBMsg)
    MergeFrom(*source);
  }
}

void FeatureMatchProcCtrlPBMsg::MergeFrom(const FeatureMatchProcCtrlPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.FeatureMatchProcCtrlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_featurematchingproccmd()) {
      set_featurematchingproccmd(from.featurematchingproccmd());
    }
    if (from.has_featureextractiontyperoutine()) {
      set_featureextractiontyperoutine(from.featureextractiontyperoutine());
    }
    if (from.has_featurematchtyperoutine()) {
      set_featurematchtyperoutine(from.featurematchtyperoutine());
    }
    if (from.has_fmimagepostprocessmethod()) {
      set_fmimagepostprocessmethod(from.fmimagepostprocessmethod());
    }
    if (from.has_usegpuprocessing()) {
      set_usegpuprocessing(from.usegpuprocessing());
    }
    if (from.has_parami_1()) {
      set_parami_1(from.parami_1());
    }
    if (from.has_parami_2()) {
      set_parami_2(from.parami_2());
    }
    if (from.has_parami_3()) {
      set_parami_3(from.parami_3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_parami_4()) {
      set_parami_4(from.parami_4());
    }
    if (from.has_parami_5()) {
      set_parami_5(from.parami_5());
    }
    if (from.has_parami_6()) {
      set_parami_6(from.parami_6());
    }
    if (from.has_parami_7()) {
      set_parami_7(from.parami_7());
    }
    if (from.has_parami_8()) {
      set_parami_8(from.parami_8());
    }
    if (from.has_parami_9()) {
      set_parami_9(from.parami_9());
    }
    if (from.has_paramf_10()) {
      set_paramf_10(from.paramf_10());
    }
    if (from.has_paramf_11()) {
      set_paramf_11(from.paramf_11());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_paramf_12()) {
      set_paramf_12(from.paramf_12());
    }
    if (from.has_paramf_13()) {
      set_paramf_13(from.paramf_13());
    }
    if (from.has_paramf_14()) {
      set_paramf_14(from.paramf_14());
    }
    if (from.has_paramf_15()) {
      set_paramf_15(from.paramf_15());
    }
    if (from.has_paramf_16()) {
      set_paramf_16(from.paramf_16());
    }
    if (from.has_paramf_17()) {
      set_paramf_17(from.paramf_17());
    }
    if (from.has_paramf_18()) {
      set_paramf_18(from.paramf_18());
    }
    if (from.has_paramf_19()) {
      set_paramf_19(from.paramf_19());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FeatureMatchProcCtrlPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.FeatureMatchProcCtrlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureMatchProcCtrlPBMsg::CopyFrom(const FeatureMatchProcCtrlPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.FeatureMatchProcCtrlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureMatchProcCtrlPBMsg::IsInitialized() const {

  return true;
}

void FeatureMatchProcCtrlPBMsg::Swap(FeatureMatchProcCtrlPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureMatchProcCtrlPBMsg::InternalSwap(FeatureMatchProcCtrlPBMsg* other) {
  std::swap(featurematchingproccmd_, other->featurematchingproccmd_);
  std::swap(featureextractiontyperoutine_, other->featureextractiontyperoutine_);
  std::swap(featurematchtyperoutine_, other->featurematchtyperoutine_);
  std::swap(fmimagepostprocessmethod_, other->fmimagepostprocessmethod_);
  std::swap(usegpuprocessing_, other->usegpuprocessing_);
  std::swap(parami_1_, other->parami_1_);
  std::swap(parami_2_, other->parami_2_);
  std::swap(parami_3_, other->parami_3_);
  std::swap(parami_4_, other->parami_4_);
  std::swap(parami_5_, other->parami_5_);
  std::swap(parami_6_, other->parami_6_);
  std::swap(parami_7_, other->parami_7_);
  std::swap(parami_8_, other->parami_8_);
  std::swap(parami_9_, other->parami_9_);
  std::swap(paramf_10_, other->paramf_10_);
  std::swap(paramf_11_, other->paramf_11_);
  std::swap(paramf_12_, other->paramf_12_);
  std::swap(paramf_13_, other->paramf_13_);
  std::swap(paramf_14_, other->paramf_14_);
  std::swap(paramf_15_, other->paramf_15_);
  std::swap(paramf_16_, other->paramf_16_);
  std::swap(paramf_17_, other->paramf_17_);
  std::swap(paramf_18_, other->paramf_18_);
  std::swap(paramf_19_, other->paramf_19_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureMatchProcCtrlPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureMatchProcCtrlPBMsg_descriptor_;
  metadata.reflection = FeatureMatchProcCtrlPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureMatchProcCtrlPBMsg

// optional int32 FeatureMatchingProcCmd = 1;
bool FeatureMatchProcCtrlPBMsg::has_featurematchingproccmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_featurematchingproccmd() {
  _has_bits_[0] |= 0x00000001u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_featurematchingproccmd() {
  _has_bits_[0] &= ~0x00000001u;
}
void FeatureMatchProcCtrlPBMsg::clear_featurematchingproccmd() {
  featurematchingproccmd_ = 0;
  clear_has_featurematchingproccmd();
}
 ::google::protobuf::int32 FeatureMatchProcCtrlPBMsg::featurematchingproccmd() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.FeatureMatchingProcCmd)
  return featurematchingproccmd_;
}
 void FeatureMatchProcCtrlPBMsg::set_featurematchingproccmd(::google::protobuf::int32 value) {
  set_has_featurematchingproccmd();
  featurematchingproccmd_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.FeatureMatchingProcCmd)
}

// optional int32 FeatureExtractionTypeRoutine = 2;
bool FeatureMatchProcCtrlPBMsg::has_featureextractiontyperoutine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_featureextractiontyperoutine() {
  _has_bits_[0] |= 0x00000002u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_featureextractiontyperoutine() {
  _has_bits_[0] &= ~0x00000002u;
}
void FeatureMatchProcCtrlPBMsg::clear_featureextractiontyperoutine() {
  featureextractiontyperoutine_ = 0;
  clear_has_featureextractiontyperoutine();
}
 ::google::protobuf::int32 FeatureMatchProcCtrlPBMsg::featureextractiontyperoutine() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.FeatureExtractionTypeRoutine)
  return featureextractiontyperoutine_;
}
 void FeatureMatchProcCtrlPBMsg::set_featureextractiontyperoutine(::google::protobuf::int32 value) {
  set_has_featureextractiontyperoutine();
  featureextractiontyperoutine_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.FeatureExtractionTypeRoutine)
}

// optional int32 FeatureMatchTypeRoutine = 3;
bool FeatureMatchProcCtrlPBMsg::has_featurematchtyperoutine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_featurematchtyperoutine() {
  _has_bits_[0] |= 0x00000004u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_featurematchtyperoutine() {
  _has_bits_[0] &= ~0x00000004u;
}
void FeatureMatchProcCtrlPBMsg::clear_featurematchtyperoutine() {
  featurematchtyperoutine_ = 0;
  clear_has_featurematchtyperoutine();
}
 ::google::protobuf::int32 FeatureMatchProcCtrlPBMsg::featurematchtyperoutine() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.FeatureMatchTypeRoutine)
  return featurematchtyperoutine_;
}
 void FeatureMatchProcCtrlPBMsg::set_featurematchtyperoutine(::google::protobuf::int32 value) {
  set_has_featurematchtyperoutine();
  featurematchtyperoutine_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.FeatureMatchTypeRoutine)
}

// optional int32 FMImagePostProcessMethod = 4;
bool FeatureMatchProcCtrlPBMsg::has_fmimagepostprocessmethod() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_fmimagepostprocessmethod() {
  _has_bits_[0] |= 0x00000008u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_fmimagepostprocessmethod() {
  _has_bits_[0] &= ~0x00000008u;
}
void FeatureMatchProcCtrlPBMsg::clear_fmimagepostprocessmethod() {
  fmimagepostprocessmethod_ = 0;
  clear_has_fmimagepostprocessmethod();
}
 ::google::protobuf::int32 FeatureMatchProcCtrlPBMsg::fmimagepostprocessmethod() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.FMImagePostProcessMethod)
  return fmimagepostprocessmethod_;
}
 void FeatureMatchProcCtrlPBMsg::set_fmimagepostprocessmethod(::google::protobuf::int32 value) {
  set_has_fmimagepostprocessmethod();
  fmimagepostprocessmethod_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.FMImagePostProcessMethod)
}

// optional bool UseGPUProcessing = 5;
bool FeatureMatchProcCtrlPBMsg::has_usegpuprocessing() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_usegpuprocessing() {
  _has_bits_[0] |= 0x00000010u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_usegpuprocessing() {
  _has_bits_[0] &= ~0x00000010u;
}
void FeatureMatchProcCtrlPBMsg::clear_usegpuprocessing() {
  usegpuprocessing_ = false;
  clear_has_usegpuprocessing();
}
 bool FeatureMatchProcCtrlPBMsg::usegpuprocessing() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.UseGPUProcessing)
  return usegpuprocessing_;
}
 void FeatureMatchProcCtrlPBMsg::set_usegpuprocessing(bool value) {
  set_has_usegpuprocessing();
  usegpuprocessing_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.UseGPUProcessing)
}

// optional int32 ParamI_1 = 10;
bool FeatureMatchProcCtrlPBMsg::has_parami_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_parami_1() {
  _has_bits_[0] |= 0x00000020u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_parami_1() {
  _has_bits_[0] &= ~0x00000020u;
}
void FeatureMatchProcCtrlPBMsg::clear_parami_1() {
  parami_1_ = 0;
  clear_has_parami_1();
}
 ::google::protobuf::int32 FeatureMatchProcCtrlPBMsg::parami_1() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.ParamI_1)
  return parami_1_;
}
 void FeatureMatchProcCtrlPBMsg::set_parami_1(::google::protobuf::int32 value) {
  set_has_parami_1();
  parami_1_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.ParamI_1)
}

// optional int32 ParamI_2 = 11;
bool FeatureMatchProcCtrlPBMsg::has_parami_2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_parami_2() {
  _has_bits_[0] |= 0x00000040u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_parami_2() {
  _has_bits_[0] &= ~0x00000040u;
}
void FeatureMatchProcCtrlPBMsg::clear_parami_2() {
  parami_2_ = 0;
  clear_has_parami_2();
}
 ::google::protobuf::int32 FeatureMatchProcCtrlPBMsg::parami_2() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.ParamI_2)
  return parami_2_;
}
 void FeatureMatchProcCtrlPBMsg::set_parami_2(::google::protobuf::int32 value) {
  set_has_parami_2();
  parami_2_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.ParamI_2)
}

// optional int32 ParamI_3 = 12;
bool FeatureMatchProcCtrlPBMsg::has_parami_3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_parami_3() {
  _has_bits_[0] |= 0x00000080u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_parami_3() {
  _has_bits_[0] &= ~0x00000080u;
}
void FeatureMatchProcCtrlPBMsg::clear_parami_3() {
  parami_3_ = 0;
  clear_has_parami_3();
}
 ::google::protobuf::int32 FeatureMatchProcCtrlPBMsg::parami_3() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.ParamI_3)
  return parami_3_;
}
 void FeatureMatchProcCtrlPBMsg::set_parami_3(::google::protobuf::int32 value) {
  set_has_parami_3();
  parami_3_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.ParamI_3)
}

// optional int32 ParamI_4 = 13;
bool FeatureMatchProcCtrlPBMsg::has_parami_4() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_parami_4() {
  _has_bits_[0] |= 0x00000100u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_parami_4() {
  _has_bits_[0] &= ~0x00000100u;
}
void FeatureMatchProcCtrlPBMsg::clear_parami_4() {
  parami_4_ = 0;
  clear_has_parami_4();
}
 ::google::protobuf::int32 FeatureMatchProcCtrlPBMsg::parami_4() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.ParamI_4)
  return parami_4_;
}
 void FeatureMatchProcCtrlPBMsg::set_parami_4(::google::protobuf::int32 value) {
  set_has_parami_4();
  parami_4_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.ParamI_4)
}

// optional int32 ParamI_5 = 14;
bool FeatureMatchProcCtrlPBMsg::has_parami_5() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_parami_5() {
  _has_bits_[0] |= 0x00000200u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_parami_5() {
  _has_bits_[0] &= ~0x00000200u;
}
void FeatureMatchProcCtrlPBMsg::clear_parami_5() {
  parami_5_ = 0;
  clear_has_parami_5();
}
 ::google::protobuf::int32 FeatureMatchProcCtrlPBMsg::parami_5() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.ParamI_5)
  return parami_5_;
}
 void FeatureMatchProcCtrlPBMsg::set_parami_5(::google::protobuf::int32 value) {
  set_has_parami_5();
  parami_5_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.ParamI_5)
}

// optional int32 ParamI_6 = 15;
bool FeatureMatchProcCtrlPBMsg::has_parami_6() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_parami_6() {
  _has_bits_[0] |= 0x00000400u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_parami_6() {
  _has_bits_[0] &= ~0x00000400u;
}
void FeatureMatchProcCtrlPBMsg::clear_parami_6() {
  parami_6_ = 0;
  clear_has_parami_6();
}
 ::google::protobuf::int32 FeatureMatchProcCtrlPBMsg::parami_6() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.ParamI_6)
  return parami_6_;
}
 void FeatureMatchProcCtrlPBMsg::set_parami_6(::google::protobuf::int32 value) {
  set_has_parami_6();
  parami_6_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.ParamI_6)
}

// optional int32 ParamI_7 = 16;
bool FeatureMatchProcCtrlPBMsg::has_parami_7() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_parami_7() {
  _has_bits_[0] |= 0x00000800u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_parami_7() {
  _has_bits_[0] &= ~0x00000800u;
}
void FeatureMatchProcCtrlPBMsg::clear_parami_7() {
  parami_7_ = 0;
  clear_has_parami_7();
}
 ::google::protobuf::int32 FeatureMatchProcCtrlPBMsg::parami_7() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.ParamI_7)
  return parami_7_;
}
 void FeatureMatchProcCtrlPBMsg::set_parami_7(::google::protobuf::int32 value) {
  set_has_parami_7();
  parami_7_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.ParamI_7)
}

// optional int32 ParamI_8 = 17;
bool FeatureMatchProcCtrlPBMsg::has_parami_8() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_parami_8() {
  _has_bits_[0] |= 0x00001000u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_parami_8() {
  _has_bits_[0] &= ~0x00001000u;
}
void FeatureMatchProcCtrlPBMsg::clear_parami_8() {
  parami_8_ = 0;
  clear_has_parami_8();
}
 ::google::protobuf::int32 FeatureMatchProcCtrlPBMsg::parami_8() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.ParamI_8)
  return parami_8_;
}
 void FeatureMatchProcCtrlPBMsg::set_parami_8(::google::protobuf::int32 value) {
  set_has_parami_8();
  parami_8_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.ParamI_8)
}

// optional int32 ParamI_9 = 18;
bool FeatureMatchProcCtrlPBMsg::has_parami_9() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_parami_9() {
  _has_bits_[0] |= 0x00002000u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_parami_9() {
  _has_bits_[0] &= ~0x00002000u;
}
void FeatureMatchProcCtrlPBMsg::clear_parami_9() {
  parami_9_ = 0;
  clear_has_parami_9();
}
 ::google::protobuf::int32 FeatureMatchProcCtrlPBMsg::parami_9() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.ParamI_9)
  return parami_9_;
}
 void FeatureMatchProcCtrlPBMsg::set_parami_9(::google::protobuf::int32 value) {
  set_has_parami_9();
  parami_9_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.ParamI_9)
}

// optional double ParamF_10 = 20;
bool FeatureMatchProcCtrlPBMsg::has_paramf_10() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_paramf_10() {
  _has_bits_[0] |= 0x00004000u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_paramf_10() {
  _has_bits_[0] &= ~0x00004000u;
}
void FeatureMatchProcCtrlPBMsg::clear_paramf_10() {
  paramf_10_ = 0;
  clear_has_paramf_10();
}
 double FeatureMatchProcCtrlPBMsg::paramf_10() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.ParamF_10)
  return paramf_10_;
}
 void FeatureMatchProcCtrlPBMsg::set_paramf_10(double value) {
  set_has_paramf_10();
  paramf_10_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.ParamF_10)
}

// optional double ParamF_11 = 21;
bool FeatureMatchProcCtrlPBMsg::has_paramf_11() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_paramf_11() {
  _has_bits_[0] |= 0x00008000u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_paramf_11() {
  _has_bits_[0] &= ~0x00008000u;
}
void FeatureMatchProcCtrlPBMsg::clear_paramf_11() {
  paramf_11_ = 0;
  clear_has_paramf_11();
}
 double FeatureMatchProcCtrlPBMsg::paramf_11() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.ParamF_11)
  return paramf_11_;
}
 void FeatureMatchProcCtrlPBMsg::set_paramf_11(double value) {
  set_has_paramf_11();
  paramf_11_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.ParamF_11)
}

// optional double ParamF_12 = 22;
bool FeatureMatchProcCtrlPBMsg::has_paramf_12() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_paramf_12() {
  _has_bits_[0] |= 0x00010000u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_paramf_12() {
  _has_bits_[0] &= ~0x00010000u;
}
void FeatureMatchProcCtrlPBMsg::clear_paramf_12() {
  paramf_12_ = 0;
  clear_has_paramf_12();
}
 double FeatureMatchProcCtrlPBMsg::paramf_12() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.ParamF_12)
  return paramf_12_;
}
 void FeatureMatchProcCtrlPBMsg::set_paramf_12(double value) {
  set_has_paramf_12();
  paramf_12_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.ParamF_12)
}

// optional double ParamF_13 = 23;
bool FeatureMatchProcCtrlPBMsg::has_paramf_13() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_paramf_13() {
  _has_bits_[0] |= 0x00020000u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_paramf_13() {
  _has_bits_[0] &= ~0x00020000u;
}
void FeatureMatchProcCtrlPBMsg::clear_paramf_13() {
  paramf_13_ = 0;
  clear_has_paramf_13();
}
 double FeatureMatchProcCtrlPBMsg::paramf_13() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.ParamF_13)
  return paramf_13_;
}
 void FeatureMatchProcCtrlPBMsg::set_paramf_13(double value) {
  set_has_paramf_13();
  paramf_13_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.ParamF_13)
}

// optional double ParamF_14 = 24;
bool FeatureMatchProcCtrlPBMsg::has_paramf_14() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_paramf_14() {
  _has_bits_[0] |= 0x00040000u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_paramf_14() {
  _has_bits_[0] &= ~0x00040000u;
}
void FeatureMatchProcCtrlPBMsg::clear_paramf_14() {
  paramf_14_ = 0;
  clear_has_paramf_14();
}
 double FeatureMatchProcCtrlPBMsg::paramf_14() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.ParamF_14)
  return paramf_14_;
}
 void FeatureMatchProcCtrlPBMsg::set_paramf_14(double value) {
  set_has_paramf_14();
  paramf_14_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.ParamF_14)
}

// optional double ParamF_15 = 25;
bool FeatureMatchProcCtrlPBMsg::has_paramf_15() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_paramf_15() {
  _has_bits_[0] |= 0x00080000u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_paramf_15() {
  _has_bits_[0] &= ~0x00080000u;
}
void FeatureMatchProcCtrlPBMsg::clear_paramf_15() {
  paramf_15_ = 0;
  clear_has_paramf_15();
}
 double FeatureMatchProcCtrlPBMsg::paramf_15() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.ParamF_15)
  return paramf_15_;
}
 void FeatureMatchProcCtrlPBMsg::set_paramf_15(double value) {
  set_has_paramf_15();
  paramf_15_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.ParamF_15)
}

// optional double ParamF_16 = 26;
bool FeatureMatchProcCtrlPBMsg::has_paramf_16() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_paramf_16() {
  _has_bits_[0] |= 0x00100000u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_paramf_16() {
  _has_bits_[0] &= ~0x00100000u;
}
void FeatureMatchProcCtrlPBMsg::clear_paramf_16() {
  paramf_16_ = 0;
  clear_has_paramf_16();
}
 double FeatureMatchProcCtrlPBMsg::paramf_16() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.ParamF_16)
  return paramf_16_;
}
 void FeatureMatchProcCtrlPBMsg::set_paramf_16(double value) {
  set_has_paramf_16();
  paramf_16_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.ParamF_16)
}

// optional double ParamF_17 = 27;
bool FeatureMatchProcCtrlPBMsg::has_paramf_17() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_paramf_17() {
  _has_bits_[0] |= 0x00200000u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_paramf_17() {
  _has_bits_[0] &= ~0x00200000u;
}
void FeatureMatchProcCtrlPBMsg::clear_paramf_17() {
  paramf_17_ = 0;
  clear_has_paramf_17();
}
 double FeatureMatchProcCtrlPBMsg::paramf_17() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.ParamF_17)
  return paramf_17_;
}
 void FeatureMatchProcCtrlPBMsg::set_paramf_17(double value) {
  set_has_paramf_17();
  paramf_17_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.ParamF_17)
}

// optional double ParamF_18 = 28;
bool FeatureMatchProcCtrlPBMsg::has_paramf_18() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_paramf_18() {
  _has_bits_[0] |= 0x00400000u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_paramf_18() {
  _has_bits_[0] &= ~0x00400000u;
}
void FeatureMatchProcCtrlPBMsg::clear_paramf_18() {
  paramf_18_ = 0;
  clear_has_paramf_18();
}
 double FeatureMatchProcCtrlPBMsg::paramf_18() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.ParamF_18)
  return paramf_18_;
}
 void FeatureMatchProcCtrlPBMsg::set_paramf_18(double value) {
  set_has_paramf_18();
  paramf_18_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.ParamF_18)
}

// optional double ParamF_19 = 29;
bool FeatureMatchProcCtrlPBMsg::has_paramf_19() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void FeatureMatchProcCtrlPBMsg::set_has_paramf_19() {
  _has_bits_[0] |= 0x00800000u;
}
void FeatureMatchProcCtrlPBMsg::clear_has_paramf_19() {
  _has_bits_[0] &= ~0x00800000u;
}
void FeatureMatchProcCtrlPBMsg::clear_paramf_19() {
  paramf_19_ = 0;
  clear_has_paramf_19();
}
 double FeatureMatchProcCtrlPBMsg::paramf_19() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcCtrlPBMsg.ParamF_19)
  return paramf_19_;
}
 void FeatureMatchProcCtrlPBMsg::set_paramf_19(double value) {
  set_has_paramf_19();
  paramf_19_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcCtrlPBMsg.ParamF_19)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureMatchProcStatusPBMsg::kFeatureMatchingStateFieldNumber;
const int FeatureMatchProcStatusPBMsg::kFeatureExtractionTypeRoutineFieldNumber;
const int FeatureMatchProcStatusPBMsg::kFeatureMatchTypeRoutineFieldNumber;
const int FeatureMatchProcStatusPBMsg::kStatusMessageFieldNumber;
const int FeatureMatchProcStatusPBMsg::kNumberOfImagesCapturedFieldNumber;
const int FeatureMatchProcStatusPBMsg::kProcessTimer1FieldNumber;
const int FeatureMatchProcStatusPBMsg::kProcessTimer2FieldNumber;
const int FeatureMatchProcStatusPBMsg::kStatusValI1FieldNumber;
const int FeatureMatchProcStatusPBMsg::kStatusValI2FieldNumber;
const int FeatureMatchProcStatusPBMsg::kStatusValI3FieldNumber;
const int FeatureMatchProcStatusPBMsg::kStatusValI4FieldNumber;
const int FeatureMatchProcStatusPBMsg::kStatusValI5FieldNumber;
const int FeatureMatchProcStatusPBMsg::kStatusValI6FieldNumber;
const int FeatureMatchProcStatusPBMsg::kStatusValI7FieldNumber;
const int FeatureMatchProcStatusPBMsg::kStatusValI8FieldNumber;
const int FeatureMatchProcStatusPBMsg::kStatusValI9FieldNumber;
const int FeatureMatchProcStatusPBMsg::kStatusValF10FieldNumber;
const int FeatureMatchProcStatusPBMsg::kStatusValF11FieldNumber;
const int FeatureMatchProcStatusPBMsg::kStatusValF12FieldNumber;
const int FeatureMatchProcStatusPBMsg::kStatusValF13FieldNumber;
const int FeatureMatchProcStatusPBMsg::kStatusValF14FieldNumber;
const int FeatureMatchProcStatusPBMsg::kStatusValF15FieldNumber;
const int FeatureMatchProcStatusPBMsg::kStatusValF16FieldNumber;
const int FeatureMatchProcStatusPBMsg::kStatusValF17FieldNumber;
const int FeatureMatchProcStatusPBMsg::kStatusValF18FieldNumber;
const int FeatureMatchProcStatusPBMsg::kStatusValF19FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureMatchProcStatusPBMsg::FeatureMatchProcStatusPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.FeatureMatchProcStatusPBMsg)
}

void FeatureMatchProcStatusPBMsg::InitAsDefaultInstance() {
}

FeatureMatchProcStatusPBMsg::FeatureMatchProcStatusPBMsg(const FeatureMatchProcStatusPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.FeatureMatchProcStatusPBMsg)
}

void FeatureMatchProcStatusPBMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  featurematchingstate_ = 0;
  featureextractiontyperoutine_ = 0;
  featurematchtyperoutine_ = 0;
  statusmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  numberofimagescaptured_ = 0;
  processtimer_1_ = 0;
  processtimer_2_ = 0;
  statusvali_1_ = 0;
  statusvali_2_ = 0;
  statusvali_3_ = 0;
  statusvali_4_ = 0;
  statusvali_5_ = 0;
  statusvali_6_ = 0;
  statusvali_7_ = 0;
  statusvali_8_ = 0;
  statusvali_9_ = 0;
  statusvalf_10_ = 0;
  statusvalf_11_ = 0;
  statusvalf_12_ = 0;
  statusvalf_13_ = 0;
  statusvalf_14_ = 0;
  statusvalf_15_ = 0;
  statusvalf_16_ = 0;
  statusvalf_17_ = 0;
  statusvalf_18_ = 0;
  statusvalf_19_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureMatchProcStatusPBMsg::~FeatureMatchProcStatusPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.FeatureMatchProcStatusPBMsg)
  SharedDtor();
}

void FeatureMatchProcStatusPBMsg::SharedDtor() {
  statusmessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FeatureMatchProcStatusPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureMatchProcStatusPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureMatchProcStatusPBMsg_descriptor_;
}

const FeatureMatchProcStatusPBMsg& FeatureMatchProcStatusPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

FeatureMatchProcStatusPBMsg* FeatureMatchProcStatusPBMsg::default_instance_ = NULL;

FeatureMatchProcStatusPBMsg* FeatureMatchProcStatusPBMsg::New(::google::protobuf::Arena* arena) const {
  FeatureMatchProcStatusPBMsg* n = new FeatureMatchProcStatusPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureMatchProcStatusPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.FeatureMatchProcStatusPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FeatureMatchProcStatusPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FeatureMatchProcStatusPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(featurematchingstate_, featureextractiontyperoutine_);
    ZR_(featurematchtyperoutine_, statusvali_1_);
    if (has_statusmessage()) {
      statusmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(statusvali_2_, statusvali_8_);
    statusvali_9_ = 0;
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(statusvalf_10_, statusvalf_17_);
  }
  ZR_(statusvalf_18_, statusvalf_19_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FeatureMatchProcStatusPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.FeatureMatchProcStatusPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 FeatureMatchingState = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &featurematchingstate_)));
          set_has_featurematchingstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_FeatureExtractionTypeRoutine;
        break;
      }

      // optional int32 FeatureExtractionTypeRoutine = 2;
      case 2: {
        if (tag == 16) {
         parse_FeatureExtractionTypeRoutine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &featureextractiontyperoutine_)));
          set_has_featureextractiontyperoutine();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FeatureMatchTypeRoutine;
        break;
      }

      // optional int32 FeatureMatchTypeRoutine = 3;
      case 3: {
        if (tag == 24) {
         parse_FeatureMatchTypeRoutine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &featurematchtyperoutine_)));
          set_has_featurematchtyperoutine();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_StatusMessage;
        break;
      }

      // optional string StatusMessage = 4;
      case 4: {
        if (tag == 34) {
         parse_StatusMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statusmessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->statusmessage().data(), this->statusmessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vision_messages.FeatureMatchProcStatusPBMsg.StatusMessage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_NumberOfImagesCaptured;
        break;
      }

      // optional int32 NumberOfImagesCaptured = 5;
      case 5: {
        if (tag == 40) {
         parse_NumberOfImagesCaptured:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberofimagescaptured_)));
          set_has_numberofimagescaptured();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_ProcessTimer_1;
        break;
      }

      // optional double ProcessTimer_1 = 6;
      case 6: {
        if (tag == 49) {
         parse_ProcessTimer_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &processtimer_1_)));
          set_has_processtimer_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_ProcessTimer_2;
        break;
      }

      // optional double ProcessTimer_2 = 7;
      case 7: {
        if (tag == 57) {
         parse_ProcessTimer_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &processtimer_2_)));
          set_has_processtimer_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_StatusValI_1;
        break;
      }

      // optional int32 StatusValI_1 = 10;
      case 10: {
        if (tag == 80) {
         parse_StatusValI_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statusvali_1_)));
          set_has_statusvali_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_StatusValI_2;
        break;
      }

      // optional int32 StatusValI_2 = 11;
      case 11: {
        if (tag == 88) {
         parse_StatusValI_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statusvali_2_)));
          set_has_statusvali_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_StatusValI_3;
        break;
      }

      // optional int32 StatusValI_3 = 12;
      case 12: {
        if (tag == 96) {
         parse_StatusValI_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statusvali_3_)));
          set_has_statusvali_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_StatusValI_4;
        break;
      }

      // optional int32 StatusValI_4 = 13;
      case 13: {
        if (tag == 104) {
         parse_StatusValI_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statusvali_4_)));
          set_has_statusvali_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_StatusValI_5;
        break;
      }

      // optional int32 StatusValI_5 = 14;
      case 14: {
        if (tag == 112) {
         parse_StatusValI_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statusvali_5_)));
          set_has_statusvali_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_StatusValI_6;
        break;
      }

      // optional int32 StatusValI_6 = 15;
      case 15: {
        if (tag == 120) {
         parse_StatusValI_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statusvali_6_)));
          set_has_statusvali_6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_StatusValI_7;
        break;
      }

      // optional int32 StatusValI_7 = 16;
      case 16: {
        if (tag == 128) {
         parse_StatusValI_7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statusvali_7_)));
          set_has_statusvali_7();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_StatusValI_8;
        break;
      }

      // optional int32 StatusValI_8 = 17;
      case 17: {
        if (tag == 136) {
         parse_StatusValI_8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statusvali_8_)));
          set_has_statusvali_8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_StatusValI_9;
        break;
      }

      // optional int32 StatusValI_9 = 18;
      case 18: {
        if (tag == 144) {
         parse_StatusValI_9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statusvali_9_)));
          set_has_statusvali_9();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_StatusValF_10;
        break;
      }

      // optional double StatusValF_10 = 20;
      case 20: {
        if (tag == 161) {
         parse_StatusValF_10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &statusvalf_10_)));
          set_has_statusvalf_10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_StatusValF_11;
        break;
      }

      // optional double StatusValF_11 = 21;
      case 21: {
        if (tag == 169) {
         parse_StatusValF_11:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &statusvalf_11_)));
          set_has_statusvalf_11();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_StatusValF_12;
        break;
      }

      // optional double StatusValF_12 = 22;
      case 22: {
        if (tag == 177) {
         parse_StatusValF_12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &statusvalf_12_)));
          set_has_statusvalf_12();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_StatusValF_13;
        break;
      }

      // optional double StatusValF_13 = 23;
      case 23: {
        if (tag == 185) {
         parse_StatusValF_13:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &statusvalf_13_)));
          set_has_statusvalf_13();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_StatusValF_14;
        break;
      }

      // optional double StatusValF_14 = 24;
      case 24: {
        if (tag == 193) {
         parse_StatusValF_14:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &statusvalf_14_)));
          set_has_statusvalf_14();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_StatusValF_15;
        break;
      }

      // optional double StatusValF_15 = 25;
      case 25: {
        if (tag == 201) {
         parse_StatusValF_15:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &statusvalf_15_)));
          set_has_statusvalf_15();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_StatusValF_16;
        break;
      }

      // optional double StatusValF_16 = 26;
      case 26: {
        if (tag == 209) {
         parse_StatusValF_16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &statusvalf_16_)));
          set_has_statusvalf_16();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_StatusValF_17;
        break;
      }

      // optional double StatusValF_17 = 27;
      case 27: {
        if (tag == 217) {
         parse_StatusValF_17:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &statusvalf_17_)));
          set_has_statusvalf_17();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_StatusValF_18;
        break;
      }

      // optional double StatusValF_18 = 28;
      case 28: {
        if (tag == 225) {
         parse_StatusValF_18:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &statusvalf_18_)));
          set_has_statusvalf_18();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(233)) goto parse_StatusValF_19;
        break;
      }

      // optional double StatusValF_19 = 29;
      case 29: {
        if (tag == 233) {
         parse_StatusValF_19:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &statusvalf_19_)));
          set_has_statusvalf_19();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.FeatureMatchProcStatusPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.FeatureMatchProcStatusPBMsg)
  return false;
#undef DO_
}

void FeatureMatchProcStatusPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.FeatureMatchProcStatusPBMsg)
  // optional int32 FeatureMatchingState = 1;
  if (has_featurematchingstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->featurematchingstate(), output);
  }

  // optional int32 FeatureExtractionTypeRoutine = 2;
  if (has_featureextractiontyperoutine()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->featureextractiontyperoutine(), output);
  }

  // optional int32 FeatureMatchTypeRoutine = 3;
  if (has_featurematchtyperoutine()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->featurematchtyperoutine(), output);
  }

  // optional string StatusMessage = 4;
  if (has_statusmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statusmessage().data(), this->statusmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.FeatureMatchProcStatusPBMsg.StatusMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->statusmessage(), output);
  }

  // optional int32 NumberOfImagesCaptured = 5;
  if (has_numberofimagescaptured()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->numberofimagescaptured(), output);
  }

  // optional double ProcessTimer_1 = 6;
  if (has_processtimer_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->processtimer_1(), output);
  }

  // optional double ProcessTimer_2 = 7;
  if (has_processtimer_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->processtimer_2(), output);
  }

  // optional int32 StatusValI_1 = 10;
  if (has_statusvali_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->statusvali_1(), output);
  }

  // optional int32 StatusValI_2 = 11;
  if (has_statusvali_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->statusvali_2(), output);
  }

  // optional int32 StatusValI_3 = 12;
  if (has_statusvali_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->statusvali_3(), output);
  }

  // optional int32 StatusValI_4 = 13;
  if (has_statusvali_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->statusvali_4(), output);
  }

  // optional int32 StatusValI_5 = 14;
  if (has_statusvali_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->statusvali_5(), output);
  }

  // optional int32 StatusValI_6 = 15;
  if (has_statusvali_6()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->statusvali_6(), output);
  }

  // optional int32 StatusValI_7 = 16;
  if (has_statusvali_7()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->statusvali_7(), output);
  }

  // optional int32 StatusValI_8 = 17;
  if (has_statusvali_8()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->statusvali_8(), output);
  }

  // optional int32 StatusValI_9 = 18;
  if (has_statusvali_9()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->statusvali_9(), output);
  }

  // optional double StatusValF_10 = 20;
  if (has_statusvalf_10()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->statusvalf_10(), output);
  }

  // optional double StatusValF_11 = 21;
  if (has_statusvalf_11()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->statusvalf_11(), output);
  }

  // optional double StatusValF_12 = 22;
  if (has_statusvalf_12()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->statusvalf_12(), output);
  }

  // optional double StatusValF_13 = 23;
  if (has_statusvalf_13()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->statusvalf_13(), output);
  }

  // optional double StatusValF_14 = 24;
  if (has_statusvalf_14()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->statusvalf_14(), output);
  }

  // optional double StatusValF_15 = 25;
  if (has_statusvalf_15()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->statusvalf_15(), output);
  }

  // optional double StatusValF_16 = 26;
  if (has_statusvalf_16()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->statusvalf_16(), output);
  }

  // optional double StatusValF_17 = 27;
  if (has_statusvalf_17()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->statusvalf_17(), output);
  }

  // optional double StatusValF_18 = 28;
  if (has_statusvalf_18()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->statusvalf_18(), output);
  }

  // optional double StatusValF_19 = 29;
  if (has_statusvalf_19()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->statusvalf_19(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.FeatureMatchProcStatusPBMsg)
}

::google::protobuf::uint8* FeatureMatchProcStatusPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.FeatureMatchProcStatusPBMsg)
  // optional int32 FeatureMatchingState = 1;
  if (has_featurematchingstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->featurematchingstate(), target);
  }

  // optional int32 FeatureExtractionTypeRoutine = 2;
  if (has_featureextractiontyperoutine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->featureextractiontyperoutine(), target);
  }

  // optional int32 FeatureMatchTypeRoutine = 3;
  if (has_featurematchtyperoutine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->featurematchtyperoutine(), target);
  }

  // optional string StatusMessage = 4;
  if (has_statusmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statusmessage().data(), this->statusmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.FeatureMatchProcStatusPBMsg.StatusMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->statusmessage(), target);
  }

  // optional int32 NumberOfImagesCaptured = 5;
  if (has_numberofimagescaptured()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->numberofimagescaptured(), target);
  }

  // optional double ProcessTimer_1 = 6;
  if (has_processtimer_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->processtimer_1(), target);
  }

  // optional double ProcessTimer_2 = 7;
  if (has_processtimer_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->processtimer_2(), target);
  }

  // optional int32 StatusValI_1 = 10;
  if (has_statusvali_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->statusvali_1(), target);
  }

  // optional int32 StatusValI_2 = 11;
  if (has_statusvali_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->statusvali_2(), target);
  }

  // optional int32 StatusValI_3 = 12;
  if (has_statusvali_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->statusvali_3(), target);
  }

  // optional int32 StatusValI_4 = 13;
  if (has_statusvali_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->statusvali_4(), target);
  }

  // optional int32 StatusValI_5 = 14;
  if (has_statusvali_5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->statusvali_5(), target);
  }

  // optional int32 StatusValI_6 = 15;
  if (has_statusvali_6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->statusvali_6(), target);
  }

  // optional int32 StatusValI_7 = 16;
  if (has_statusvali_7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->statusvali_7(), target);
  }

  // optional int32 StatusValI_8 = 17;
  if (has_statusvali_8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->statusvali_8(), target);
  }

  // optional int32 StatusValI_9 = 18;
  if (has_statusvali_9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->statusvali_9(), target);
  }

  // optional double StatusValF_10 = 20;
  if (has_statusvalf_10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->statusvalf_10(), target);
  }

  // optional double StatusValF_11 = 21;
  if (has_statusvalf_11()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->statusvalf_11(), target);
  }

  // optional double StatusValF_12 = 22;
  if (has_statusvalf_12()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->statusvalf_12(), target);
  }

  // optional double StatusValF_13 = 23;
  if (has_statusvalf_13()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->statusvalf_13(), target);
  }

  // optional double StatusValF_14 = 24;
  if (has_statusvalf_14()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->statusvalf_14(), target);
  }

  // optional double StatusValF_15 = 25;
  if (has_statusvalf_15()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->statusvalf_15(), target);
  }

  // optional double StatusValF_16 = 26;
  if (has_statusvalf_16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->statusvalf_16(), target);
  }

  // optional double StatusValF_17 = 27;
  if (has_statusvalf_17()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->statusvalf_17(), target);
  }

  // optional double StatusValF_18 = 28;
  if (has_statusvalf_18()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->statusvalf_18(), target);
  }

  // optional double StatusValF_19 = 29;
  if (has_statusvalf_19()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->statusvalf_19(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.FeatureMatchProcStatusPBMsg)
  return target;
}

int FeatureMatchProcStatusPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.FeatureMatchProcStatusPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 FeatureMatchingState = 1;
    if (has_featurematchingstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->featurematchingstate());
    }

    // optional int32 FeatureExtractionTypeRoutine = 2;
    if (has_featureextractiontyperoutine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->featureextractiontyperoutine());
    }

    // optional int32 FeatureMatchTypeRoutine = 3;
    if (has_featurematchtyperoutine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->featurematchtyperoutine());
    }

    // optional string StatusMessage = 4;
    if (has_statusmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statusmessage());
    }

    // optional int32 NumberOfImagesCaptured = 5;
    if (has_numberofimagescaptured()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numberofimagescaptured());
    }

    // optional double ProcessTimer_1 = 6;
    if (has_processtimer_1()) {
      total_size += 1 + 8;
    }

    // optional double ProcessTimer_2 = 7;
    if (has_processtimer_2()) {
      total_size += 1 + 8;
    }

    // optional int32 StatusValI_1 = 10;
    if (has_statusvali_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statusvali_1());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 StatusValI_2 = 11;
    if (has_statusvali_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statusvali_2());
    }

    // optional int32 StatusValI_3 = 12;
    if (has_statusvali_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statusvali_3());
    }

    // optional int32 StatusValI_4 = 13;
    if (has_statusvali_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statusvali_4());
    }

    // optional int32 StatusValI_5 = 14;
    if (has_statusvali_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statusvali_5());
    }

    // optional int32 StatusValI_6 = 15;
    if (has_statusvali_6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statusvali_6());
    }

    // optional int32 StatusValI_7 = 16;
    if (has_statusvali_7()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statusvali_7());
    }

    // optional int32 StatusValI_8 = 17;
    if (has_statusvali_8()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statusvali_8());
    }

    // optional int32 StatusValI_9 = 18;
    if (has_statusvali_9()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statusvali_9());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double StatusValF_10 = 20;
    if (has_statusvalf_10()) {
      total_size += 2 + 8;
    }

    // optional double StatusValF_11 = 21;
    if (has_statusvalf_11()) {
      total_size += 2 + 8;
    }

    // optional double StatusValF_12 = 22;
    if (has_statusvalf_12()) {
      total_size += 2 + 8;
    }

    // optional double StatusValF_13 = 23;
    if (has_statusvalf_13()) {
      total_size += 2 + 8;
    }

    // optional double StatusValF_14 = 24;
    if (has_statusvalf_14()) {
      total_size += 2 + 8;
    }

    // optional double StatusValF_15 = 25;
    if (has_statusvalf_15()) {
      total_size += 2 + 8;
    }

    // optional double StatusValF_16 = 26;
    if (has_statusvalf_16()) {
      total_size += 2 + 8;
    }

    // optional double StatusValF_17 = 27;
    if (has_statusvalf_17()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 50331648u) {
    // optional double StatusValF_18 = 28;
    if (has_statusvalf_18()) {
      total_size += 2 + 8;
    }

    // optional double StatusValF_19 = 29;
    if (has_statusvalf_19()) {
      total_size += 2 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureMatchProcStatusPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.FeatureMatchProcStatusPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FeatureMatchProcStatusPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureMatchProcStatusPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.FeatureMatchProcStatusPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.FeatureMatchProcStatusPBMsg)
    MergeFrom(*source);
  }
}

void FeatureMatchProcStatusPBMsg::MergeFrom(const FeatureMatchProcStatusPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.FeatureMatchProcStatusPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_featurematchingstate()) {
      set_featurematchingstate(from.featurematchingstate());
    }
    if (from.has_featureextractiontyperoutine()) {
      set_featureextractiontyperoutine(from.featureextractiontyperoutine());
    }
    if (from.has_featurematchtyperoutine()) {
      set_featurematchtyperoutine(from.featurematchtyperoutine());
    }
    if (from.has_statusmessage()) {
      set_has_statusmessage();
      statusmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.statusmessage_);
    }
    if (from.has_numberofimagescaptured()) {
      set_numberofimagescaptured(from.numberofimagescaptured());
    }
    if (from.has_processtimer_1()) {
      set_processtimer_1(from.processtimer_1());
    }
    if (from.has_processtimer_2()) {
      set_processtimer_2(from.processtimer_2());
    }
    if (from.has_statusvali_1()) {
      set_statusvali_1(from.statusvali_1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_statusvali_2()) {
      set_statusvali_2(from.statusvali_2());
    }
    if (from.has_statusvali_3()) {
      set_statusvali_3(from.statusvali_3());
    }
    if (from.has_statusvali_4()) {
      set_statusvali_4(from.statusvali_4());
    }
    if (from.has_statusvali_5()) {
      set_statusvali_5(from.statusvali_5());
    }
    if (from.has_statusvali_6()) {
      set_statusvali_6(from.statusvali_6());
    }
    if (from.has_statusvali_7()) {
      set_statusvali_7(from.statusvali_7());
    }
    if (from.has_statusvali_8()) {
      set_statusvali_8(from.statusvali_8());
    }
    if (from.has_statusvali_9()) {
      set_statusvali_9(from.statusvali_9());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_statusvalf_10()) {
      set_statusvalf_10(from.statusvalf_10());
    }
    if (from.has_statusvalf_11()) {
      set_statusvalf_11(from.statusvalf_11());
    }
    if (from.has_statusvalf_12()) {
      set_statusvalf_12(from.statusvalf_12());
    }
    if (from.has_statusvalf_13()) {
      set_statusvalf_13(from.statusvalf_13());
    }
    if (from.has_statusvalf_14()) {
      set_statusvalf_14(from.statusvalf_14());
    }
    if (from.has_statusvalf_15()) {
      set_statusvalf_15(from.statusvalf_15());
    }
    if (from.has_statusvalf_16()) {
      set_statusvalf_16(from.statusvalf_16());
    }
    if (from.has_statusvalf_17()) {
      set_statusvalf_17(from.statusvalf_17());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_statusvalf_18()) {
      set_statusvalf_18(from.statusvalf_18());
    }
    if (from.has_statusvalf_19()) {
      set_statusvalf_19(from.statusvalf_19());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FeatureMatchProcStatusPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.FeatureMatchProcStatusPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureMatchProcStatusPBMsg::CopyFrom(const FeatureMatchProcStatusPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.FeatureMatchProcStatusPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureMatchProcStatusPBMsg::IsInitialized() const {

  return true;
}

void FeatureMatchProcStatusPBMsg::Swap(FeatureMatchProcStatusPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureMatchProcStatusPBMsg::InternalSwap(FeatureMatchProcStatusPBMsg* other) {
  std::swap(featurematchingstate_, other->featurematchingstate_);
  std::swap(featureextractiontyperoutine_, other->featureextractiontyperoutine_);
  std::swap(featurematchtyperoutine_, other->featurematchtyperoutine_);
  statusmessage_.Swap(&other->statusmessage_);
  std::swap(numberofimagescaptured_, other->numberofimagescaptured_);
  std::swap(processtimer_1_, other->processtimer_1_);
  std::swap(processtimer_2_, other->processtimer_2_);
  std::swap(statusvali_1_, other->statusvali_1_);
  std::swap(statusvali_2_, other->statusvali_2_);
  std::swap(statusvali_3_, other->statusvali_3_);
  std::swap(statusvali_4_, other->statusvali_4_);
  std::swap(statusvali_5_, other->statusvali_5_);
  std::swap(statusvali_6_, other->statusvali_6_);
  std::swap(statusvali_7_, other->statusvali_7_);
  std::swap(statusvali_8_, other->statusvali_8_);
  std::swap(statusvali_9_, other->statusvali_9_);
  std::swap(statusvalf_10_, other->statusvalf_10_);
  std::swap(statusvalf_11_, other->statusvalf_11_);
  std::swap(statusvalf_12_, other->statusvalf_12_);
  std::swap(statusvalf_13_, other->statusvalf_13_);
  std::swap(statusvalf_14_, other->statusvalf_14_);
  std::swap(statusvalf_15_, other->statusvalf_15_);
  std::swap(statusvalf_16_, other->statusvalf_16_);
  std::swap(statusvalf_17_, other->statusvalf_17_);
  std::swap(statusvalf_18_, other->statusvalf_18_);
  std::swap(statusvalf_19_, other->statusvalf_19_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureMatchProcStatusPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureMatchProcStatusPBMsg_descriptor_;
  metadata.reflection = FeatureMatchProcStatusPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureMatchProcStatusPBMsg

// optional int32 FeatureMatchingState = 1;
bool FeatureMatchProcStatusPBMsg::has_featurematchingstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_featurematchingstate() {
  _has_bits_[0] |= 0x00000001u;
}
void FeatureMatchProcStatusPBMsg::clear_has_featurematchingstate() {
  _has_bits_[0] &= ~0x00000001u;
}
void FeatureMatchProcStatusPBMsg::clear_featurematchingstate() {
  featurematchingstate_ = 0;
  clear_has_featurematchingstate();
}
 ::google::protobuf::int32 FeatureMatchProcStatusPBMsg::featurematchingstate() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.FeatureMatchingState)
  return featurematchingstate_;
}
 void FeatureMatchProcStatusPBMsg::set_featurematchingstate(::google::protobuf::int32 value) {
  set_has_featurematchingstate();
  featurematchingstate_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.FeatureMatchingState)
}

// optional int32 FeatureExtractionTypeRoutine = 2;
bool FeatureMatchProcStatusPBMsg::has_featureextractiontyperoutine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_featureextractiontyperoutine() {
  _has_bits_[0] |= 0x00000002u;
}
void FeatureMatchProcStatusPBMsg::clear_has_featureextractiontyperoutine() {
  _has_bits_[0] &= ~0x00000002u;
}
void FeatureMatchProcStatusPBMsg::clear_featureextractiontyperoutine() {
  featureextractiontyperoutine_ = 0;
  clear_has_featureextractiontyperoutine();
}
 ::google::protobuf::int32 FeatureMatchProcStatusPBMsg::featureextractiontyperoutine() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.FeatureExtractionTypeRoutine)
  return featureextractiontyperoutine_;
}
 void FeatureMatchProcStatusPBMsg::set_featureextractiontyperoutine(::google::protobuf::int32 value) {
  set_has_featureextractiontyperoutine();
  featureextractiontyperoutine_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.FeatureExtractionTypeRoutine)
}

// optional int32 FeatureMatchTypeRoutine = 3;
bool FeatureMatchProcStatusPBMsg::has_featurematchtyperoutine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_featurematchtyperoutine() {
  _has_bits_[0] |= 0x00000004u;
}
void FeatureMatchProcStatusPBMsg::clear_has_featurematchtyperoutine() {
  _has_bits_[0] &= ~0x00000004u;
}
void FeatureMatchProcStatusPBMsg::clear_featurematchtyperoutine() {
  featurematchtyperoutine_ = 0;
  clear_has_featurematchtyperoutine();
}
 ::google::protobuf::int32 FeatureMatchProcStatusPBMsg::featurematchtyperoutine() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.FeatureMatchTypeRoutine)
  return featurematchtyperoutine_;
}
 void FeatureMatchProcStatusPBMsg::set_featurematchtyperoutine(::google::protobuf::int32 value) {
  set_has_featurematchtyperoutine();
  featurematchtyperoutine_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.FeatureMatchTypeRoutine)
}

// optional string StatusMessage = 4;
bool FeatureMatchProcStatusPBMsg::has_statusmessage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_statusmessage() {
  _has_bits_[0] |= 0x00000008u;
}
void FeatureMatchProcStatusPBMsg::clear_has_statusmessage() {
  _has_bits_[0] &= ~0x00000008u;
}
void FeatureMatchProcStatusPBMsg::clear_statusmessage() {
  statusmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_statusmessage();
}
 const ::std::string& FeatureMatchProcStatusPBMsg::statusmessage() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.StatusMessage)
  return statusmessage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeatureMatchProcStatusPBMsg::set_statusmessage(const ::std::string& value) {
  set_has_statusmessage();
  statusmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.StatusMessage)
}
 void FeatureMatchProcStatusPBMsg::set_statusmessage(const char* value) {
  set_has_statusmessage();
  statusmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vision_messages.FeatureMatchProcStatusPBMsg.StatusMessage)
}
 void FeatureMatchProcStatusPBMsg::set_statusmessage(const char* value, size_t size) {
  set_has_statusmessage();
  statusmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vision_messages.FeatureMatchProcStatusPBMsg.StatusMessage)
}
 ::std::string* FeatureMatchProcStatusPBMsg::mutable_statusmessage() {
  set_has_statusmessage();
  // @@protoc_insertion_point(field_mutable:vision_messages.FeatureMatchProcStatusPBMsg.StatusMessage)
  return statusmessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FeatureMatchProcStatusPBMsg::release_statusmessage() {
  // @@protoc_insertion_point(field_release:vision_messages.FeatureMatchProcStatusPBMsg.StatusMessage)
  clear_has_statusmessage();
  return statusmessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeatureMatchProcStatusPBMsg::set_allocated_statusmessage(::std::string* statusmessage) {
  if (statusmessage != NULL) {
    set_has_statusmessage();
  } else {
    clear_has_statusmessage();
  }
  statusmessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), statusmessage);
  // @@protoc_insertion_point(field_set_allocated:vision_messages.FeatureMatchProcStatusPBMsg.StatusMessage)
}

// optional int32 NumberOfImagesCaptured = 5;
bool FeatureMatchProcStatusPBMsg::has_numberofimagescaptured() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_numberofimagescaptured() {
  _has_bits_[0] |= 0x00000010u;
}
void FeatureMatchProcStatusPBMsg::clear_has_numberofimagescaptured() {
  _has_bits_[0] &= ~0x00000010u;
}
void FeatureMatchProcStatusPBMsg::clear_numberofimagescaptured() {
  numberofimagescaptured_ = 0;
  clear_has_numberofimagescaptured();
}
 ::google::protobuf::int32 FeatureMatchProcStatusPBMsg::numberofimagescaptured() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.NumberOfImagesCaptured)
  return numberofimagescaptured_;
}
 void FeatureMatchProcStatusPBMsg::set_numberofimagescaptured(::google::protobuf::int32 value) {
  set_has_numberofimagescaptured();
  numberofimagescaptured_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.NumberOfImagesCaptured)
}

// optional double ProcessTimer_1 = 6;
bool FeatureMatchProcStatusPBMsg::has_processtimer_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_processtimer_1() {
  _has_bits_[0] |= 0x00000020u;
}
void FeatureMatchProcStatusPBMsg::clear_has_processtimer_1() {
  _has_bits_[0] &= ~0x00000020u;
}
void FeatureMatchProcStatusPBMsg::clear_processtimer_1() {
  processtimer_1_ = 0;
  clear_has_processtimer_1();
}
 double FeatureMatchProcStatusPBMsg::processtimer_1() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.ProcessTimer_1)
  return processtimer_1_;
}
 void FeatureMatchProcStatusPBMsg::set_processtimer_1(double value) {
  set_has_processtimer_1();
  processtimer_1_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.ProcessTimer_1)
}

// optional double ProcessTimer_2 = 7;
bool FeatureMatchProcStatusPBMsg::has_processtimer_2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_processtimer_2() {
  _has_bits_[0] |= 0x00000040u;
}
void FeatureMatchProcStatusPBMsg::clear_has_processtimer_2() {
  _has_bits_[0] &= ~0x00000040u;
}
void FeatureMatchProcStatusPBMsg::clear_processtimer_2() {
  processtimer_2_ = 0;
  clear_has_processtimer_2();
}
 double FeatureMatchProcStatusPBMsg::processtimer_2() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.ProcessTimer_2)
  return processtimer_2_;
}
 void FeatureMatchProcStatusPBMsg::set_processtimer_2(double value) {
  set_has_processtimer_2();
  processtimer_2_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.ProcessTimer_2)
}

// optional int32 StatusValI_1 = 10;
bool FeatureMatchProcStatusPBMsg::has_statusvali_1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_statusvali_1() {
  _has_bits_[0] |= 0x00000080u;
}
void FeatureMatchProcStatusPBMsg::clear_has_statusvali_1() {
  _has_bits_[0] &= ~0x00000080u;
}
void FeatureMatchProcStatusPBMsg::clear_statusvali_1() {
  statusvali_1_ = 0;
  clear_has_statusvali_1();
}
 ::google::protobuf::int32 FeatureMatchProcStatusPBMsg::statusvali_1() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.StatusValI_1)
  return statusvali_1_;
}
 void FeatureMatchProcStatusPBMsg::set_statusvali_1(::google::protobuf::int32 value) {
  set_has_statusvali_1();
  statusvali_1_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.StatusValI_1)
}

// optional int32 StatusValI_2 = 11;
bool FeatureMatchProcStatusPBMsg::has_statusvali_2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_statusvali_2() {
  _has_bits_[0] |= 0x00000100u;
}
void FeatureMatchProcStatusPBMsg::clear_has_statusvali_2() {
  _has_bits_[0] &= ~0x00000100u;
}
void FeatureMatchProcStatusPBMsg::clear_statusvali_2() {
  statusvali_2_ = 0;
  clear_has_statusvali_2();
}
 ::google::protobuf::int32 FeatureMatchProcStatusPBMsg::statusvali_2() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.StatusValI_2)
  return statusvali_2_;
}
 void FeatureMatchProcStatusPBMsg::set_statusvali_2(::google::protobuf::int32 value) {
  set_has_statusvali_2();
  statusvali_2_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.StatusValI_2)
}

// optional int32 StatusValI_3 = 12;
bool FeatureMatchProcStatusPBMsg::has_statusvali_3() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_statusvali_3() {
  _has_bits_[0] |= 0x00000200u;
}
void FeatureMatchProcStatusPBMsg::clear_has_statusvali_3() {
  _has_bits_[0] &= ~0x00000200u;
}
void FeatureMatchProcStatusPBMsg::clear_statusvali_3() {
  statusvali_3_ = 0;
  clear_has_statusvali_3();
}
 ::google::protobuf::int32 FeatureMatchProcStatusPBMsg::statusvali_3() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.StatusValI_3)
  return statusvali_3_;
}
 void FeatureMatchProcStatusPBMsg::set_statusvali_3(::google::protobuf::int32 value) {
  set_has_statusvali_3();
  statusvali_3_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.StatusValI_3)
}

// optional int32 StatusValI_4 = 13;
bool FeatureMatchProcStatusPBMsg::has_statusvali_4() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_statusvali_4() {
  _has_bits_[0] |= 0x00000400u;
}
void FeatureMatchProcStatusPBMsg::clear_has_statusvali_4() {
  _has_bits_[0] &= ~0x00000400u;
}
void FeatureMatchProcStatusPBMsg::clear_statusvali_4() {
  statusvali_4_ = 0;
  clear_has_statusvali_4();
}
 ::google::protobuf::int32 FeatureMatchProcStatusPBMsg::statusvali_4() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.StatusValI_4)
  return statusvali_4_;
}
 void FeatureMatchProcStatusPBMsg::set_statusvali_4(::google::protobuf::int32 value) {
  set_has_statusvali_4();
  statusvali_4_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.StatusValI_4)
}

// optional int32 StatusValI_5 = 14;
bool FeatureMatchProcStatusPBMsg::has_statusvali_5() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_statusvali_5() {
  _has_bits_[0] |= 0x00000800u;
}
void FeatureMatchProcStatusPBMsg::clear_has_statusvali_5() {
  _has_bits_[0] &= ~0x00000800u;
}
void FeatureMatchProcStatusPBMsg::clear_statusvali_5() {
  statusvali_5_ = 0;
  clear_has_statusvali_5();
}
 ::google::protobuf::int32 FeatureMatchProcStatusPBMsg::statusvali_5() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.StatusValI_5)
  return statusvali_5_;
}
 void FeatureMatchProcStatusPBMsg::set_statusvali_5(::google::protobuf::int32 value) {
  set_has_statusvali_5();
  statusvali_5_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.StatusValI_5)
}

// optional int32 StatusValI_6 = 15;
bool FeatureMatchProcStatusPBMsg::has_statusvali_6() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_statusvali_6() {
  _has_bits_[0] |= 0x00001000u;
}
void FeatureMatchProcStatusPBMsg::clear_has_statusvali_6() {
  _has_bits_[0] &= ~0x00001000u;
}
void FeatureMatchProcStatusPBMsg::clear_statusvali_6() {
  statusvali_6_ = 0;
  clear_has_statusvali_6();
}
 ::google::protobuf::int32 FeatureMatchProcStatusPBMsg::statusvali_6() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.StatusValI_6)
  return statusvali_6_;
}
 void FeatureMatchProcStatusPBMsg::set_statusvali_6(::google::protobuf::int32 value) {
  set_has_statusvali_6();
  statusvali_6_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.StatusValI_6)
}

// optional int32 StatusValI_7 = 16;
bool FeatureMatchProcStatusPBMsg::has_statusvali_7() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_statusvali_7() {
  _has_bits_[0] |= 0x00002000u;
}
void FeatureMatchProcStatusPBMsg::clear_has_statusvali_7() {
  _has_bits_[0] &= ~0x00002000u;
}
void FeatureMatchProcStatusPBMsg::clear_statusvali_7() {
  statusvali_7_ = 0;
  clear_has_statusvali_7();
}
 ::google::protobuf::int32 FeatureMatchProcStatusPBMsg::statusvali_7() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.StatusValI_7)
  return statusvali_7_;
}
 void FeatureMatchProcStatusPBMsg::set_statusvali_7(::google::protobuf::int32 value) {
  set_has_statusvali_7();
  statusvali_7_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.StatusValI_7)
}

// optional int32 StatusValI_8 = 17;
bool FeatureMatchProcStatusPBMsg::has_statusvali_8() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_statusvali_8() {
  _has_bits_[0] |= 0x00004000u;
}
void FeatureMatchProcStatusPBMsg::clear_has_statusvali_8() {
  _has_bits_[0] &= ~0x00004000u;
}
void FeatureMatchProcStatusPBMsg::clear_statusvali_8() {
  statusvali_8_ = 0;
  clear_has_statusvali_8();
}
 ::google::protobuf::int32 FeatureMatchProcStatusPBMsg::statusvali_8() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.StatusValI_8)
  return statusvali_8_;
}
 void FeatureMatchProcStatusPBMsg::set_statusvali_8(::google::protobuf::int32 value) {
  set_has_statusvali_8();
  statusvali_8_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.StatusValI_8)
}

// optional int32 StatusValI_9 = 18;
bool FeatureMatchProcStatusPBMsg::has_statusvali_9() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_statusvali_9() {
  _has_bits_[0] |= 0x00008000u;
}
void FeatureMatchProcStatusPBMsg::clear_has_statusvali_9() {
  _has_bits_[0] &= ~0x00008000u;
}
void FeatureMatchProcStatusPBMsg::clear_statusvali_9() {
  statusvali_9_ = 0;
  clear_has_statusvali_9();
}
 ::google::protobuf::int32 FeatureMatchProcStatusPBMsg::statusvali_9() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.StatusValI_9)
  return statusvali_9_;
}
 void FeatureMatchProcStatusPBMsg::set_statusvali_9(::google::protobuf::int32 value) {
  set_has_statusvali_9();
  statusvali_9_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.StatusValI_9)
}

// optional double StatusValF_10 = 20;
bool FeatureMatchProcStatusPBMsg::has_statusvalf_10() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_statusvalf_10() {
  _has_bits_[0] |= 0x00010000u;
}
void FeatureMatchProcStatusPBMsg::clear_has_statusvalf_10() {
  _has_bits_[0] &= ~0x00010000u;
}
void FeatureMatchProcStatusPBMsg::clear_statusvalf_10() {
  statusvalf_10_ = 0;
  clear_has_statusvalf_10();
}
 double FeatureMatchProcStatusPBMsg::statusvalf_10() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.StatusValF_10)
  return statusvalf_10_;
}
 void FeatureMatchProcStatusPBMsg::set_statusvalf_10(double value) {
  set_has_statusvalf_10();
  statusvalf_10_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.StatusValF_10)
}

// optional double StatusValF_11 = 21;
bool FeatureMatchProcStatusPBMsg::has_statusvalf_11() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_statusvalf_11() {
  _has_bits_[0] |= 0x00020000u;
}
void FeatureMatchProcStatusPBMsg::clear_has_statusvalf_11() {
  _has_bits_[0] &= ~0x00020000u;
}
void FeatureMatchProcStatusPBMsg::clear_statusvalf_11() {
  statusvalf_11_ = 0;
  clear_has_statusvalf_11();
}
 double FeatureMatchProcStatusPBMsg::statusvalf_11() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.StatusValF_11)
  return statusvalf_11_;
}
 void FeatureMatchProcStatusPBMsg::set_statusvalf_11(double value) {
  set_has_statusvalf_11();
  statusvalf_11_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.StatusValF_11)
}

// optional double StatusValF_12 = 22;
bool FeatureMatchProcStatusPBMsg::has_statusvalf_12() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_statusvalf_12() {
  _has_bits_[0] |= 0x00040000u;
}
void FeatureMatchProcStatusPBMsg::clear_has_statusvalf_12() {
  _has_bits_[0] &= ~0x00040000u;
}
void FeatureMatchProcStatusPBMsg::clear_statusvalf_12() {
  statusvalf_12_ = 0;
  clear_has_statusvalf_12();
}
 double FeatureMatchProcStatusPBMsg::statusvalf_12() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.StatusValF_12)
  return statusvalf_12_;
}
 void FeatureMatchProcStatusPBMsg::set_statusvalf_12(double value) {
  set_has_statusvalf_12();
  statusvalf_12_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.StatusValF_12)
}

// optional double StatusValF_13 = 23;
bool FeatureMatchProcStatusPBMsg::has_statusvalf_13() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_statusvalf_13() {
  _has_bits_[0] |= 0x00080000u;
}
void FeatureMatchProcStatusPBMsg::clear_has_statusvalf_13() {
  _has_bits_[0] &= ~0x00080000u;
}
void FeatureMatchProcStatusPBMsg::clear_statusvalf_13() {
  statusvalf_13_ = 0;
  clear_has_statusvalf_13();
}
 double FeatureMatchProcStatusPBMsg::statusvalf_13() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.StatusValF_13)
  return statusvalf_13_;
}
 void FeatureMatchProcStatusPBMsg::set_statusvalf_13(double value) {
  set_has_statusvalf_13();
  statusvalf_13_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.StatusValF_13)
}

// optional double StatusValF_14 = 24;
bool FeatureMatchProcStatusPBMsg::has_statusvalf_14() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_statusvalf_14() {
  _has_bits_[0] |= 0x00100000u;
}
void FeatureMatchProcStatusPBMsg::clear_has_statusvalf_14() {
  _has_bits_[0] &= ~0x00100000u;
}
void FeatureMatchProcStatusPBMsg::clear_statusvalf_14() {
  statusvalf_14_ = 0;
  clear_has_statusvalf_14();
}
 double FeatureMatchProcStatusPBMsg::statusvalf_14() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.StatusValF_14)
  return statusvalf_14_;
}
 void FeatureMatchProcStatusPBMsg::set_statusvalf_14(double value) {
  set_has_statusvalf_14();
  statusvalf_14_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.StatusValF_14)
}

// optional double StatusValF_15 = 25;
bool FeatureMatchProcStatusPBMsg::has_statusvalf_15() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_statusvalf_15() {
  _has_bits_[0] |= 0x00200000u;
}
void FeatureMatchProcStatusPBMsg::clear_has_statusvalf_15() {
  _has_bits_[0] &= ~0x00200000u;
}
void FeatureMatchProcStatusPBMsg::clear_statusvalf_15() {
  statusvalf_15_ = 0;
  clear_has_statusvalf_15();
}
 double FeatureMatchProcStatusPBMsg::statusvalf_15() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.StatusValF_15)
  return statusvalf_15_;
}
 void FeatureMatchProcStatusPBMsg::set_statusvalf_15(double value) {
  set_has_statusvalf_15();
  statusvalf_15_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.StatusValF_15)
}

// optional double StatusValF_16 = 26;
bool FeatureMatchProcStatusPBMsg::has_statusvalf_16() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_statusvalf_16() {
  _has_bits_[0] |= 0x00400000u;
}
void FeatureMatchProcStatusPBMsg::clear_has_statusvalf_16() {
  _has_bits_[0] &= ~0x00400000u;
}
void FeatureMatchProcStatusPBMsg::clear_statusvalf_16() {
  statusvalf_16_ = 0;
  clear_has_statusvalf_16();
}
 double FeatureMatchProcStatusPBMsg::statusvalf_16() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.StatusValF_16)
  return statusvalf_16_;
}
 void FeatureMatchProcStatusPBMsg::set_statusvalf_16(double value) {
  set_has_statusvalf_16();
  statusvalf_16_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.StatusValF_16)
}

// optional double StatusValF_17 = 27;
bool FeatureMatchProcStatusPBMsg::has_statusvalf_17() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_statusvalf_17() {
  _has_bits_[0] |= 0x00800000u;
}
void FeatureMatchProcStatusPBMsg::clear_has_statusvalf_17() {
  _has_bits_[0] &= ~0x00800000u;
}
void FeatureMatchProcStatusPBMsg::clear_statusvalf_17() {
  statusvalf_17_ = 0;
  clear_has_statusvalf_17();
}
 double FeatureMatchProcStatusPBMsg::statusvalf_17() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.StatusValF_17)
  return statusvalf_17_;
}
 void FeatureMatchProcStatusPBMsg::set_statusvalf_17(double value) {
  set_has_statusvalf_17();
  statusvalf_17_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.StatusValF_17)
}

// optional double StatusValF_18 = 28;
bool FeatureMatchProcStatusPBMsg::has_statusvalf_18() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_statusvalf_18() {
  _has_bits_[0] |= 0x01000000u;
}
void FeatureMatchProcStatusPBMsg::clear_has_statusvalf_18() {
  _has_bits_[0] &= ~0x01000000u;
}
void FeatureMatchProcStatusPBMsg::clear_statusvalf_18() {
  statusvalf_18_ = 0;
  clear_has_statusvalf_18();
}
 double FeatureMatchProcStatusPBMsg::statusvalf_18() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.StatusValF_18)
  return statusvalf_18_;
}
 void FeatureMatchProcStatusPBMsg::set_statusvalf_18(double value) {
  set_has_statusvalf_18();
  statusvalf_18_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.StatusValF_18)
}

// optional double StatusValF_19 = 29;
bool FeatureMatchProcStatusPBMsg::has_statusvalf_19() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void FeatureMatchProcStatusPBMsg::set_has_statusvalf_19() {
  _has_bits_[0] |= 0x02000000u;
}
void FeatureMatchProcStatusPBMsg::clear_has_statusvalf_19() {
  _has_bits_[0] &= ~0x02000000u;
}
void FeatureMatchProcStatusPBMsg::clear_statusvalf_19() {
  statusvalf_19_ = 0;
  clear_has_statusvalf_19();
}
 double FeatureMatchProcStatusPBMsg::statusvalf_19() const {
  // @@protoc_insertion_point(field_get:vision_messages.FeatureMatchProcStatusPBMsg.StatusValF_19)
  return statusvalf_19_;
}
 void FeatureMatchProcStatusPBMsg::set_statusvalf_19(double value) {
  set_has_statusvalf_19();
  statusvalf_19_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.FeatureMatchProcStatusPBMsg.StatusValF_19)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListOfManagerNamesPBMsg::kNumberOfManagersFieldNumber;
const int ListOfManagerNamesPBMsg::kListOfManagerNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListOfManagerNamesPBMsg::ListOfManagerNamesPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.ListOfManagerNamesPBMsg)
}

void ListOfManagerNamesPBMsg::InitAsDefaultInstance() {
}

ListOfManagerNamesPBMsg::ListOfManagerNamesPBMsg(const ListOfManagerNamesPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.ListOfManagerNamesPBMsg)
}

void ListOfManagerNamesPBMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  numberofmanagers_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListOfManagerNamesPBMsg::~ListOfManagerNamesPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.ListOfManagerNamesPBMsg)
  SharedDtor();
}

void ListOfManagerNamesPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListOfManagerNamesPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListOfManagerNamesPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListOfManagerNamesPBMsg_descriptor_;
}

const ListOfManagerNamesPBMsg& ListOfManagerNamesPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

ListOfManagerNamesPBMsg* ListOfManagerNamesPBMsg::default_instance_ = NULL;

ListOfManagerNamesPBMsg* ListOfManagerNamesPBMsg::New(::google::protobuf::Arena* arena) const {
  ListOfManagerNamesPBMsg* n = new ListOfManagerNamesPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListOfManagerNamesPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.ListOfManagerNamesPBMsg)
  numberofmanagers_ = 0;
  listofmanagernames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ListOfManagerNamesPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.ListOfManagerNamesPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 NumberOfManagers = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberofmanagers_)));
          set_has_numberofmanagers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ListOfManagerNames;
        break;
      }

      // repeated string ListOfManagerNames = 2;
      case 2: {
        if (tag == 18) {
         parse_ListOfManagerNames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_listofmanagernames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->listofmanagernames(this->listofmanagernames_size() - 1).data(),
            this->listofmanagernames(this->listofmanagernames_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vision_messages.ListOfManagerNamesPBMsg.ListOfManagerNames");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ListOfManagerNames;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.ListOfManagerNamesPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.ListOfManagerNamesPBMsg)
  return false;
#undef DO_
}

void ListOfManagerNamesPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.ListOfManagerNamesPBMsg)
  // optional int32 NumberOfManagers = 1;
  if (has_numberofmanagers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->numberofmanagers(), output);
  }

  // repeated string ListOfManagerNames = 2;
  for (int i = 0; i < this->listofmanagernames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->listofmanagernames(i).data(), this->listofmanagernames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.ListOfManagerNamesPBMsg.ListOfManagerNames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->listofmanagernames(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.ListOfManagerNamesPBMsg)
}

::google::protobuf::uint8* ListOfManagerNamesPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.ListOfManagerNamesPBMsg)
  // optional int32 NumberOfManagers = 1;
  if (has_numberofmanagers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->numberofmanagers(), target);
  }

  // repeated string ListOfManagerNames = 2;
  for (int i = 0; i < this->listofmanagernames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->listofmanagernames(i).data(), this->listofmanagernames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.ListOfManagerNamesPBMsg.ListOfManagerNames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->listofmanagernames(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.ListOfManagerNamesPBMsg)
  return target;
}

int ListOfManagerNamesPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.ListOfManagerNamesPBMsg)
  int total_size = 0;

  // optional int32 NumberOfManagers = 1;
  if (has_numberofmanagers()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->numberofmanagers());
  }

  // repeated string ListOfManagerNames = 2;
  total_size += 1 * this->listofmanagernames_size();
  for (int i = 0; i < this->listofmanagernames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->listofmanagernames(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListOfManagerNamesPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.ListOfManagerNamesPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ListOfManagerNamesPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListOfManagerNamesPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.ListOfManagerNamesPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.ListOfManagerNamesPBMsg)
    MergeFrom(*source);
  }
}

void ListOfManagerNamesPBMsg::MergeFrom(const ListOfManagerNamesPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.ListOfManagerNamesPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  listofmanagernames_.MergeFrom(from.listofmanagernames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numberofmanagers()) {
      set_numberofmanagers(from.numberofmanagers());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ListOfManagerNamesPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.ListOfManagerNamesPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListOfManagerNamesPBMsg::CopyFrom(const ListOfManagerNamesPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.ListOfManagerNamesPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOfManagerNamesPBMsg::IsInitialized() const {

  return true;
}

void ListOfManagerNamesPBMsg::Swap(ListOfManagerNamesPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListOfManagerNamesPBMsg::InternalSwap(ListOfManagerNamesPBMsg* other) {
  std::swap(numberofmanagers_, other->numberofmanagers_);
  listofmanagernames_.UnsafeArenaSwap(&other->listofmanagernames_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListOfManagerNamesPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListOfManagerNamesPBMsg_descriptor_;
  metadata.reflection = ListOfManagerNamesPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListOfManagerNamesPBMsg

// optional int32 NumberOfManagers = 1;
bool ListOfManagerNamesPBMsg::has_numberofmanagers() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ListOfManagerNamesPBMsg::set_has_numberofmanagers() {
  _has_bits_[0] |= 0x00000001u;
}
void ListOfManagerNamesPBMsg::clear_has_numberofmanagers() {
  _has_bits_[0] &= ~0x00000001u;
}
void ListOfManagerNamesPBMsg::clear_numberofmanagers() {
  numberofmanagers_ = 0;
  clear_has_numberofmanagers();
}
 ::google::protobuf::int32 ListOfManagerNamesPBMsg::numberofmanagers() const {
  // @@protoc_insertion_point(field_get:vision_messages.ListOfManagerNamesPBMsg.NumberOfManagers)
  return numberofmanagers_;
}
 void ListOfManagerNamesPBMsg::set_numberofmanagers(::google::protobuf::int32 value) {
  set_has_numberofmanagers();
  numberofmanagers_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.ListOfManagerNamesPBMsg.NumberOfManagers)
}

// repeated string ListOfManagerNames = 2;
int ListOfManagerNamesPBMsg::listofmanagernames_size() const {
  return listofmanagernames_.size();
}
void ListOfManagerNamesPBMsg::clear_listofmanagernames() {
  listofmanagernames_.Clear();
}
 const ::std::string& ListOfManagerNamesPBMsg::listofmanagernames(int index) const {
  // @@protoc_insertion_point(field_get:vision_messages.ListOfManagerNamesPBMsg.ListOfManagerNames)
  return listofmanagernames_.Get(index);
}
 ::std::string* ListOfManagerNamesPBMsg::mutable_listofmanagernames(int index) {
  // @@protoc_insertion_point(field_mutable:vision_messages.ListOfManagerNamesPBMsg.ListOfManagerNames)
  return listofmanagernames_.Mutable(index);
}
 void ListOfManagerNamesPBMsg::set_listofmanagernames(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:vision_messages.ListOfManagerNamesPBMsg.ListOfManagerNames)
  listofmanagernames_.Mutable(index)->assign(value);
}
 void ListOfManagerNamesPBMsg::set_listofmanagernames(int index, const char* value) {
  listofmanagernames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vision_messages.ListOfManagerNamesPBMsg.ListOfManagerNames)
}
 void ListOfManagerNamesPBMsg::set_listofmanagernames(int index, const char* value, size_t size) {
  listofmanagernames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vision_messages.ListOfManagerNamesPBMsg.ListOfManagerNames)
}
 ::std::string* ListOfManagerNamesPBMsg::add_listofmanagernames() {
  // @@protoc_insertion_point(field_add_mutable:vision_messages.ListOfManagerNamesPBMsg.ListOfManagerNames)
  return listofmanagernames_.Add();
}
 void ListOfManagerNamesPBMsg::add_listofmanagernames(const ::std::string& value) {
  listofmanagernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vision_messages.ListOfManagerNamesPBMsg.ListOfManagerNames)
}
 void ListOfManagerNamesPBMsg::add_listofmanagernames(const char* value) {
  listofmanagernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vision_messages.ListOfManagerNamesPBMsg.ListOfManagerNames)
}
 void ListOfManagerNamesPBMsg::add_listofmanagernames(const char* value, size_t size) {
  listofmanagernames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vision_messages.ListOfManagerNamesPBMsg.ListOfManagerNames)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListOfManagerNamesPBMsg::listofmanagernames() const {
  // @@protoc_insertion_point(field_list:vision_messages.ListOfManagerNamesPBMsg.ListOfManagerNames)
  return listofmanagernames_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ListOfManagerNamesPBMsg::mutable_listofmanagernames() {
  // @@protoc_insertion_point(field_mutable_list:vision_messages.ListOfManagerNamesPBMsg.ListOfManagerNames)
  return &listofmanagernames_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SteeringTorqueCtrlPBMsg::kSteeringTorquePercentFieldNumber;
const int SteeringTorqueCtrlPBMsg::kSteeringTorqueMapFieldNumber;
const int SteeringTorqueCtrlPBMsg::kSteeringControlEnabledFieldNumber;
const int SteeringTorqueCtrlPBMsg::kManualExtControlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SteeringTorqueCtrlPBMsg::SteeringTorqueCtrlPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.SteeringTorqueCtrlPBMsg)
}

void SteeringTorqueCtrlPBMsg::InitAsDefaultInstance() {
}

SteeringTorqueCtrlPBMsg::SteeringTorqueCtrlPBMsg(const SteeringTorqueCtrlPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.SteeringTorqueCtrlPBMsg)
}

void SteeringTorqueCtrlPBMsg::SharedCtor() {
  _cached_size_ = 0;
  steeringtorquepercent_ = 0;
  steeringtorquemap_ = 0u;
  steeringcontrolenabled_ = false;
  manualextcontrol_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SteeringTorqueCtrlPBMsg::~SteeringTorqueCtrlPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.SteeringTorqueCtrlPBMsg)
  SharedDtor();
}

void SteeringTorqueCtrlPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SteeringTorqueCtrlPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SteeringTorqueCtrlPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SteeringTorqueCtrlPBMsg_descriptor_;
}

const SteeringTorqueCtrlPBMsg& SteeringTorqueCtrlPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

SteeringTorqueCtrlPBMsg* SteeringTorqueCtrlPBMsg::default_instance_ = NULL;

SteeringTorqueCtrlPBMsg* SteeringTorqueCtrlPBMsg::New(::google::protobuf::Arena* arena) const {
  SteeringTorqueCtrlPBMsg* n = new SteeringTorqueCtrlPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SteeringTorqueCtrlPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.SteeringTorqueCtrlPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SteeringTorqueCtrlPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SteeringTorqueCtrlPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(steeringtorquepercent_, manualextcontrol_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SteeringTorqueCtrlPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.SteeringTorqueCtrlPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double SteeringTorquePercent = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steeringtorquepercent_)));
          set_has_steeringtorquepercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SteeringTorqueMap;
        break;
      }

      // optional uint32 SteeringTorqueMap = 2;
      case 2: {
        if (tag == 16) {
         parse_SteeringTorqueMap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steeringtorquemap_)));
          set_has_steeringtorquemap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SteeringControlEnabled;
        break;
      }

      // optional bool SteeringControlEnabled = 3;
      case 3: {
        if (tag == 24) {
         parse_SteeringControlEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steeringcontrolenabled_)));
          set_has_steeringcontrolenabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ManualExtControl;
        break;
      }

      // optional bool ManualExtControl = 4;
      case 4: {
        if (tag == 32) {
         parse_ManualExtControl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manualextcontrol_)));
          set_has_manualextcontrol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.SteeringTorqueCtrlPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.SteeringTorqueCtrlPBMsg)
  return false;
#undef DO_
}

void SteeringTorqueCtrlPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.SteeringTorqueCtrlPBMsg)
  // optional double SteeringTorquePercent = 1;
  if (has_steeringtorquepercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->steeringtorquepercent(), output);
  }

  // optional uint32 SteeringTorqueMap = 2;
  if (has_steeringtorquemap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->steeringtorquemap(), output);
  }

  // optional bool SteeringControlEnabled = 3;
  if (has_steeringcontrolenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->steeringcontrolenabled(), output);
  }

  // optional bool ManualExtControl = 4;
  if (has_manualextcontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->manualextcontrol(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.SteeringTorqueCtrlPBMsg)
}

::google::protobuf::uint8* SteeringTorqueCtrlPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.SteeringTorqueCtrlPBMsg)
  // optional double SteeringTorquePercent = 1;
  if (has_steeringtorquepercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->steeringtorquepercent(), target);
  }

  // optional uint32 SteeringTorqueMap = 2;
  if (has_steeringtorquemap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->steeringtorquemap(), target);
  }

  // optional bool SteeringControlEnabled = 3;
  if (has_steeringcontrolenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->steeringcontrolenabled(), target);
  }

  // optional bool ManualExtControl = 4;
  if (has_manualextcontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->manualextcontrol(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.SteeringTorqueCtrlPBMsg)
  return target;
}

int SteeringTorqueCtrlPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.SteeringTorqueCtrlPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional double SteeringTorquePercent = 1;
    if (has_steeringtorquepercent()) {
      total_size += 1 + 8;
    }

    // optional uint32 SteeringTorqueMap = 2;
    if (has_steeringtorquemap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steeringtorquemap());
    }

    // optional bool SteeringControlEnabled = 3;
    if (has_steeringcontrolenabled()) {
      total_size += 1 + 1;
    }

    // optional bool ManualExtControl = 4;
    if (has_manualextcontrol()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SteeringTorqueCtrlPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.SteeringTorqueCtrlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SteeringTorqueCtrlPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SteeringTorqueCtrlPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.SteeringTorqueCtrlPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.SteeringTorqueCtrlPBMsg)
    MergeFrom(*source);
  }
}

void SteeringTorqueCtrlPBMsg::MergeFrom(const SteeringTorqueCtrlPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.SteeringTorqueCtrlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steeringtorquepercent()) {
      set_steeringtorquepercent(from.steeringtorquepercent());
    }
    if (from.has_steeringtorquemap()) {
      set_steeringtorquemap(from.steeringtorquemap());
    }
    if (from.has_steeringcontrolenabled()) {
      set_steeringcontrolenabled(from.steeringcontrolenabled());
    }
    if (from.has_manualextcontrol()) {
      set_manualextcontrol(from.manualextcontrol());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SteeringTorqueCtrlPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.SteeringTorqueCtrlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SteeringTorqueCtrlPBMsg::CopyFrom(const SteeringTorqueCtrlPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.SteeringTorqueCtrlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SteeringTorqueCtrlPBMsg::IsInitialized() const {

  return true;
}

void SteeringTorqueCtrlPBMsg::Swap(SteeringTorqueCtrlPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SteeringTorqueCtrlPBMsg::InternalSwap(SteeringTorqueCtrlPBMsg* other) {
  std::swap(steeringtorquepercent_, other->steeringtorquepercent_);
  std::swap(steeringtorquemap_, other->steeringtorquemap_);
  std::swap(steeringcontrolenabled_, other->steeringcontrolenabled_);
  std::swap(manualextcontrol_, other->manualextcontrol_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SteeringTorqueCtrlPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SteeringTorqueCtrlPBMsg_descriptor_;
  metadata.reflection = SteeringTorqueCtrlPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SteeringTorqueCtrlPBMsg

// optional double SteeringTorquePercent = 1;
bool SteeringTorqueCtrlPBMsg::has_steeringtorquepercent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SteeringTorqueCtrlPBMsg::set_has_steeringtorquepercent() {
  _has_bits_[0] |= 0x00000001u;
}
void SteeringTorqueCtrlPBMsg::clear_has_steeringtorquepercent() {
  _has_bits_[0] &= ~0x00000001u;
}
void SteeringTorqueCtrlPBMsg::clear_steeringtorquepercent() {
  steeringtorquepercent_ = 0;
  clear_has_steeringtorquepercent();
}
 double SteeringTorqueCtrlPBMsg::steeringtorquepercent() const {
  // @@protoc_insertion_point(field_get:vision_messages.SteeringTorqueCtrlPBMsg.SteeringTorquePercent)
  return steeringtorquepercent_;
}
 void SteeringTorqueCtrlPBMsg::set_steeringtorquepercent(double value) {
  set_has_steeringtorquepercent();
  steeringtorquepercent_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.SteeringTorqueCtrlPBMsg.SteeringTorquePercent)
}

// optional uint32 SteeringTorqueMap = 2;
bool SteeringTorqueCtrlPBMsg::has_steeringtorquemap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SteeringTorqueCtrlPBMsg::set_has_steeringtorquemap() {
  _has_bits_[0] |= 0x00000002u;
}
void SteeringTorqueCtrlPBMsg::clear_has_steeringtorquemap() {
  _has_bits_[0] &= ~0x00000002u;
}
void SteeringTorqueCtrlPBMsg::clear_steeringtorquemap() {
  steeringtorquemap_ = 0u;
  clear_has_steeringtorquemap();
}
 ::google::protobuf::uint32 SteeringTorqueCtrlPBMsg::steeringtorquemap() const {
  // @@protoc_insertion_point(field_get:vision_messages.SteeringTorqueCtrlPBMsg.SteeringTorqueMap)
  return steeringtorquemap_;
}
 void SteeringTorqueCtrlPBMsg::set_steeringtorquemap(::google::protobuf::uint32 value) {
  set_has_steeringtorquemap();
  steeringtorquemap_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.SteeringTorqueCtrlPBMsg.SteeringTorqueMap)
}

// optional bool SteeringControlEnabled = 3;
bool SteeringTorqueCtrlPBMsg::has_steeringcontrolenabled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SteeringTorqueCtrlPBMsg::set_has_steeringcontrolenabled() {
  _has_bits_[0] |= 0x00000004u;
}
void SteeringTorqueCtrlPBMsg::clear_has_steeringcontrolenabled() {
  _has_bits_[0] &= ~0x00000004u;
}
void SteeringTorqueCtrlPBMsg::clear_steeringcontrolenabled() {
  steeringcontrolenabled_ = false;
  clear_has_steeringcontrolenabled();
}
 bool SteeringTorqueCtrlPBMsg::steeringcontrolenabled() const {
  // @@protoc_insertion_point(field_get:vision_messages.SteeringTorqueCtrlPBMsg.SteeringControlEnabled)
  return steeringcontrolenabled_;
}
 void SteeringTorqueCtrlPBMsg::set_steeringcontrolenabled(bool value) {
  set_has_steeringcontrolenabled();
  steeringcontrolenabled_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.SteeringTorqueCtrlPBMsg.SteeringControlEnabled)
}

// optional bool ManualExtControl = 4;
bool SteeringTorqueCtrlPBMsg::has_manualextcontrol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SteeringTorqueCtrlPBMsg::set_has_manualextcontrol() {
  _has_bits_[0] |= 0x00000008u;
}
void SteeringTorqueCtrlPBMsg::clear_has_manualextcontrol() {
  _has_bits_[0] &= ~0x00000008u;
}
void SteeringTorqueCtrlPBMsg::clear_manualextcontrol() {
  manualextcontrol_ = false;
  clear_has_manualextcontrol();
}
 bool SteeringTorqueCtrlPBMsg::manualextcontrol() const {
  // @@protoc_insertion_point(field_get:vision_messages.SteeringTorqueCtrlPBMsg.ManualExtControl)
  return manualextcontrol_;
}
 void SteeringTorqueCtrlPBMsg::set_manualextcontrol(bool value) {
  set_has_manualextcontrol();
  manualextcontrol_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.SteeringTorqueCtrlPBMsg.ManualExtControl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DceEPASteeringStatusPBMsg::kMotorCurrentAmpsFieldNumber;
const int DceEPASteeringStatusPBMsg::kPWMDutyCyclePercentFieldNumber;
const int DceEPASteeringStatusPBMsg::kMotorTorquePercentFieldNumber;
const int DceEPASteeringStatusPBMsg::kSupplyVoltageFieldNumber;
const int DceEPASteeringStatusPBMsg::kTempDegCFieldNumber;
const int DceEPASteeringStatusPBMsg::kSteeringAngleDegFieldNumber;
const int DceEPASteeringStatusPBMsg::kSteeringTorqueMapSettingFieldNumber;
const int DceEPASteeringStatusPBMsg::kSwitchPositionFieldNumber;
const int DceEPASteeringStatusPBMsg::kTorqueAFieldNumber;
const int DceEPASteeringStatusPBMsg::kTorqueBFieldNumber;
const int DceEPASteeringStatusPBMsg::kErrorCodeFieldNumber;
const int DceEPASteeringStatusPBMsg::kStatusFlagsFieldNumber;
const int DceEPASteeringStatusPBMsg::kLimitFlagsFieldNumber;
const int DceEPASteeringStatusPBMsg::kManualExtControlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DceEPASteeringStatusPBMsg::DceEPASteeringStatusPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.DceEPASteeringStatusPBMsg)
}

void DceEPASteeringStatusPBMsg::InitAsDefaultInstance() {
}

DceEPASteeringStatusPBMsg::DceEPASteeringStatusPBMsg(const DceEPASteeringStatusPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.DceEPASteeringStatusPBMsg)
}

void DceEPASteeringStatusPBMsg::SharedCtor() {
  _cached_size_ = 0;
  motorcurrentamps_ = 0;
  pwmdutycyclepercent_ = 0;
  motortorquepercent_ = 0;
  supplyvoltage_ = 0;
  tempdegc_ = 0;
  steeringangledeg_ = 0;
  steeringtorquemapsetting_ = 0;
  switchposition_ = 0;
  torquea_ = 0;
  torqueb_ = 0;
  errorcode_ = 0;
  statusflags_ = 0;
  limitflags_ = 0;
  manualextcontrol_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DceEPASteeringStatusPBMsg::~DceEPASteeringStatusPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.DceEPASteeringStatusPBMsg)
  SharedDtor();
}

void DceEPASteeringStatusPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DceEPASteeringStatusPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DceEPASteeringStatusPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DceEPASteeringStatusPBMsg_descriptor_;
}

const DceEPASteeringStatusPBMsg& DceEPASteeringStatusPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

DceEPASteeringStatusPBMsg* DceEPASteeringStatusPBMsg::default_instance_ = NULL;

DceEPASteeringStatusPBMsg* DceEPASteeringStatusPBMsg::New(::google::protobuf::Arena* arena) const {
  DceEPASteeringStatusPBMsg* n = new DceEPASteeringStatusPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DceEPASteeringStatusPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.DceEPASteeringStatusPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DceEPASteeringStatusPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DceEPASteeringStatusPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(motorcurrentamps_, switchposition_);
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(torquea_, manualextcontrol_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DceEPASteeringStatusPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.DceEPASteeringStatusPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double MotorCurrentAmps = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &motorcurrentamps_)));
          set_has_motorcurrentamps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_PWMDutyCyclePercent;
        break;
      }

      // optional double PWMDutyCyclePercent = 2;
      case 2: {
        if (tag == 17) {
         parse_PWMDutyCyclePercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pwmdutycyclepercent_)));
          set_has_pwmdutycyclepercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_MotorTorquePercent;
        break;
      }

      // optional double MotorTorquePercent = 3;
      case 3: {
        if (tag == 25) {
         parse_MotorTorquePercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &motortorquepercent_)));
          set_has_motortorquepercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_SupplyVoltage;
        break;
      }

      // optional double SupplyVoltage = 4;
      case 4: {
        if (tag == 33) {
         parse_SupplyVoltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &supplyvoltage_)));
          set_has_supplyvoltage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_TempDegC;
        break;
      }

      // optional double TempDegC = 5;
      case 5: {
        if (tag == 41) {
         parse_TempDegC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tempdegc_)));
          set_has_tempdegc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_SteeringAngleDeg;
        break;
      }

      // optional double SteeringAngleDeg = 6;
      case 6: {
        if (tag == 49) {
         parse_SteeringAngleDeg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steeringangledeg_)));
          set_has_steeringangledeg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_SteeringTorqueMapSetting;
        break;
      }

      // optional int32 SteeringTorqueMapSetting = 7;
      case 7: {
        if (tag == 56) {
         parse_SteeringTorqueMapSetting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &steeringtorquemapsetting_)));
          set_has_steeringtorquemapsetting();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_SwitchPosition;
        break;
      }

      // optional int32 SwitchPosition = 8;
      case 8: {
        if (tag == 64) {
         parse_SwitchPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &switchposition_)));
          set_has_switchposition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_TorqueA;
        break;
      }

      // optional int32 TorqueA = 9;
      case 9: {
        if (tag == 72) {
         parse_TorqueA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &torquea_)));
          set_has_torquea();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_TorqueB;
        break;
      }

      // optional int32 TorqueB = 10;
      case 10: {
        if (tag == 80) {
         parse_TorqueB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &torqueb_)));
          set_has_torqueb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ErrorCode;
        break;
      }

      // optional int32 ErrorCode = 11;
      case 11: {
        if (tag == 88) {
         parse_ErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_StatusFlags;
        break;
      }

      // optional int32 StatusFlags = 12;
      case 12: {
        if (tag == 96) {
         parse_StatusFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statusflags_)));
          set_has_statusflags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_LimitFlags;
        break;
      }

      // optional int32 LimitFlags = 13;
      case 13: {
        if (tag == 104) {
         parse_LimitFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limitflags_)));
          set_has_limitflags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_ManualExtControl;
        break;
      }

      // optional bool ManualExtControl = 14;
      case 14: {
        if (tag == 112) {
         parse_ManualExtControl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manualextcontrol_)));
          set_has_manualextcontrol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.DceEPASteeringStatusPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.DceEPASteeringStatusPBMsg)
  return false;
#undef DO_
}

void DceEPASteeringStatusPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.DceEPASteeringStatusPBMsg)
  // optional double MotorCurrentAmps = 1;
  if (has_motorcurrentamps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->motorcurrentamps(), output);
  }

  // optional double PWMDutyCyclePercent = 2;
  if (has_pwmdutycyclepercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pwmdutycyclepercent(), output);
  }

  // optional double MotorTorquePercent = 3;
  if (has_motortorquepercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->motortorquepercent(), output);
  }

  // optional double SupplyVoltage = 4;
  if (has_supplyvoltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->supplyvoltage(), output);
  }

  // optional double TempDegC = 5;
  if (has_tempdegc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->tempdegc(), output);
  }

  // optional double SteeringAngleDeg = 6;
  if (has_steeringangledeg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->steeringangledeg(), output);
  }

  // optional int32 SteeringTorqueMapSetting = 7;
  if (has_steeringtorquemapsetting()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->steeringtorquemapsetting(), output);
  }

  // optional int32 SwitchPosition = 8;
  if (has_switchposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->switchposition(), output);
  }

  // optional int32 TorqueA = 9;
  if (has_torquea()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->torquea(), output);
  }

  // optional int32 TorqueB = 10;
  if (has_torqueb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->torqueb(), output);
  }

  // optional int32 ErrorCode = 11;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->errorcode(), output);
  }

  // optional int32 StatusFlags = 12;
  if (has_statusflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->statusflags(), output);
  }

  // optional int32 LimitFlags = 13;
  if (has_limitflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->limitflags(), output);
  }

  // optional bool ManualExtControl = 14;
  if (has_manualextcontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->manualextcontrol(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.DceEPASteeringStatusPBMsg)
}

::google::protobuf::uint8* DceEPASteeringStatusPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.DceEPASteeringStatusPBMsg)
  // optional double MotorCurrentAmps = 1;
  if (has_motorcurrentamps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->motorcurrentamps(), target);
  }

  // optional double PWMDutyCyclePercent = 2;
  if (has_pwmdutycyclepercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pwmdutycyclepercent(), target);
  }

  // optional double MotorTorquePercent = 3;
  if (has_motortorquepercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->motortorquepercent(), target);
  }

  // optional double SupplyVoltage = 4;
  if (has_supplyvoltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->supplyvoltage(), target);
  }

  // optional double TempDegC = 5;
  if (has_tempdegc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->tempdegc(), target);
  }

  // optional double SteeringAngleDeg = 6;
  if (has_steeringangledeg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->steeringangledeg(), target);
  }

  // optional int32 SteeringTorqueMapSetting = 7;
  if (has_steeringtorquemapsetting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->steeringtorquemapsetting(), target);
  }

  // optional int32 SwitchPosition = 8;
  if (has_switchposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->switchposition(), target);
  }

  // optional int32 TorqueA = 9;
  if (has_torquea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->torquea(), target);
  }

  // optional int32 TorqueB = 10;
  if (has_torqueb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->torqueb(), target);
  }

  // optional int32 ErrorCode = 11;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->errorcode(), target);
  }

  // optional int32 StatusFlags = 12;
  if (has_statusflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->statusflags(), target);
  }

  // optional int32 LimitFlags = 13;
  if (has_limitflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->limitflags(), target);
  }

  // optional bool ManualExtControl = 14;
  if (has_manualextcontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->manualextcontrol(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.DceEPASteeringStatusPBMsg)
  return target;
}

int DceEPASteeringStatusPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.DceEPASteeringStatusPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double MotorCurrentAmps = 1;
    if (has_motorcurrentamps()) {
      total_size += 1 + 8;
    }

    // optional double PWMDutyCyclePercent = 2;
    if (has_pwmdutycyclepercent()) {
      total_size += 1 + 8;
    }

    // optional double MotorTorquePercent = 3;
    if (has_motortorquepercent()) {
      total_size += 1 + 8;
    }

    // optional double SupplyVoltage = 4;
    if (has_supplyvoltage()) {
      total_size += 1 + 8;
    }

    // optional double TempDegC = 5;
    if (has_tempdegc()) {
      total_size += 1 + 8;
    }

    // optional double SteeringAngleDeg = 6;
    if (has_steeringangledeg()) {
      total_size += 1 + 8;
    }

    // optional int32 SteeringTorqueMapSetting = 7;
    if (has_steeringtorquemapsetting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->steeringtorquemapsetting());
    }

    // optional int32 SwitchPosition = 8;
    if (has_switchposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->switchposition());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional int32 TorqueA = 9;
    if (has_torquea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->torquea());
    }

    // optional int32 TorqueB = 10;
    if (has_torqueb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->torqueb());
    }

    // optional int32 ErrorCode = 11;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional int32 StatusFlags = 12;
    if (has_statusflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statusflags());
    }

    // optional int32 LimitFlags = 13;
    if (has_limitflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limitflags());
    }

    // optional bool ManualExtControl = 14;
    if (has_manualextcontrol()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DceEPASteeringStatusPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.DceEPASteeringStatusPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DceEPASteeringStatusPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DceEPASteeringStatusPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.DceEPASteeringStatusPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.DceEPASteeringStatusPBMsg)
    MergeFrom(*source);
  }
}

void DceEPASteeringStatusPBMsg::MergeFrom(const DceEPASteeringStatusPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.DceEPASteeringStatusPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_motorcurrentamps()) {
      set_motorcurrentamps(from.motorcurrentamps());
    }
    if (from.has_pwmdutycyclepercent()) {
      set_pwmdutycyclepercent(from.pwmdutycyclepercent());
    }
    if (from.has_motortorquepercent()) {
      set_motortorquepercent(from.motortorquepercent());
    }
    if (from.has_supplyvoltage()) {
      set_supplyvoltage(from.supplyvoltage());
    }
    if (from.has_tempdegc()) {
      set_tempdegc(from.tempdegc());
    }
    if (from.has_steeringangledeg()) {
      set_steeringangledeg(from.steeringangledeg());
    }
    if (from.has_steeringtorquemapsetting()) {
      set_steeringtorquemapsetting(from.steeringtorquemapsetting());
    }
    if (from.has_switchposition()) {
      set_switchposition(from.switchposition());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_torquea()) {
      set_torquea(from.torquea());
    }
    if (from.has_torqueb()) {
      set_torqueb(from.torqueb());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_statusflags()) {
      set_statusflags(from.statusflags());
    }
    if (from.has_limitflags()) {
      set_limitflags(from.limitflags());
    }
    if (from.has_manualextcontrol()) {
      set_manualextcontrol(from.manualextcontrol());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DceEPASteeringStatusPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.DceEPASteeringStatusPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DceEPASteeringStatusPBMsg::CopyFrom(const DceEPASteeringStatusPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.DceEPASteeringStatusPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DceEPASteeringStatusPBMsg::IsInitialized() const {

  return true;
}

void DceEPASteeringStatusPBMsg::Swap(DceEPASteeringStatusPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DceEPASteeringStatusPBMsg::InternalSwap(DceEPASteeringStatusPBMsg* other) {
  std::swap(motorcurrentamps_, other->motorcurrentamps_);
  std::swap(pwmdutycyclepercent_, other->pwmdutycyclepercent_);
  std::swap(motortorquepercent_, other->motortorquepercent_);
  std::swap(supplyvoltage_, other->supplyvoltage_);
  std::swap(tempdegc_, other->tempdegc_);
  std::swap(steeringangledeg_, other->steeringangledeg_);
  std::swap(steeringtorquemapsetting_, other->steeringtorquemapsetting_);
  std::swap(switchposition_, other->switchposition_);
  std::swap(torquea_, other->torquea_);
  std::swap(torqueb_, other->torqueb_);
  std::swap(errorcode_, other->errorcode_);
  std::swap(statusflags_, other->statusflags_);
  std::swap(limitflags_, other->limitflags_);
  std::swap(manualextcontrol_, other->manualextcontrol_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DceEPASteeringStatusPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DceEPASteeringStatusPBMsg_descriptor_;
  metadata.reflection = DceEPASteeringStatusPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DceEPASteeringStatusPBMsg

// optional double MotorCurrentAmps = 1;
bool DceEPASteeringStatusPBMsg::has_motorcurrentamps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DceEPASteeringStatusPBMsg::set_has_motorcurrentamps() {
  _has_bits_[0] |= 0x00000001u;
}
void DceEPASteeringStatusPBMsg::clear_has_motorcurrentamps() {
  _has_bits_[0] &= ~0x00000001u;
}
void DceEPASteeringStatusPBMsg::clear_motorcurrentamps() {
  motorcurrentamps_ = 0;
  clear_has_motorcurrentamps();
}
 double DceEPASteeringStatusPBMsg::motorcurrentamps() const {
  // @@protoc_insertion_point(field_get:vision_messages.DceEPASteeringStatusPBMsg.MotorCurrentAmps)
  return motorcurrentamps_;
}
 void DceEPASteeringStatusPBMsg::set_motorcurrentamps(double value) {
  set_has_motorcurrentamps();
  motorcurrentamps_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.DceEPASteeringStatusPBMsg.MotorCurrentAmps)
}

// optional double PWMDutyCyclePercent = 2;
bool DceEPASteeringStatusPBMsg::has_pwmdutycyclepercent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DceEPASteeringStatusPBMsg::set_has_pwmdutycyclepercent() {
  _has_bits_[0] |= 0x00000002u;
}
void DceEPASteeringStatusPBMsg::clear_has_pwmdutycyclepercent() {
  _has_bits_[0] &= ~0x00000002u;
}
void DceEPASteeringStatusPBMsg::clear_pwmdutycyclepercent() {
  pwmdutycyclepercent_ = 0;
  clear_has_pwmdutycyclepercent();
}
 double DceEPASteeringStatusPBMsg::pwmdutycyclepercent() const {
  // @@protoc_insertion_point(field_get:vision_messages.DceEPASteeringStatusPBMsg.PWMDutyCyclePercent)
  return pwmdutycyclepercent_;
}
 void DceEPASteeringStatusPBMsg::set_pwmdutycyclepercent(double value) {
  set_has_pwmdutycyclepercent();
  pwmdutycyclepercent_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.DceEPASteeringStatusPBMsg.PWMDutyCyclePercent)
}

// optional double MotorTorquePercent = 3;
bool DceEPASteeringStatusPBMsg::has_motortorquepercent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DceEPASteeringStatusPBMsg::set_has_motortorquepercent() {
  _has_bits_[0] |= 0x00000004u;
}
void DceEPASteeringStatusPBMsg::clear_has_motortorquepercent() {
  _has_bits_[0] &= ~0x00000004u;
}
void DceEPASteeringStatusPBMsg::clear_motortorquepercent() {
  motortorquepercent_ = 0;
  clear_has_motortorquepercent();
}
 double DceEPASteeringStatusPBMsg::motortorquepercent() const {
  // @@protoc_insertion_point(field_get:vision_messages.DceEPASteeringStatusPBMsg.MotorTorquePercent)
  return motortorquepercent_;
}
 void DceEPASteeringStatusPBMsg::set_motortorquepercent(double value) {
  set_has_motortorquepercent();
  motortorquepercent_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.DceEPASteeringStatusPBMsg.MotorTorquePercent)
}

// optional double SupplyVoltage = 4;
bool DceEPASteeringStatusPBMsg::has_supplyvoltage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DceEPASteeringStatusPBMsg::set_has_supplyvoltage() {
  _has_bits_[0] |= 0x00000008u;
}
void DceEPASteeringStatusPBMsg::clear_has_supplyvoltage() {
  _has_bits_[0] &= ~0x00000008u;
}
void DceEPASteeringStatusPBMsg::clear_supplyvoltage() {
  supplyvoltage_ = 0;
  clear_has_supplyvoltage();
}
 double DceEPASteeringStatusPBMsg::supplyvoltage() const {
  // @@protoc_insertion_point(field_get:vision_messages.DceEPASteeringStatusPBMsg.SupplyVoltage)
  return supplyvoltage_;
}
 void DceEPASteeringStatusPBMsg::set_supplyvoltage(double value) {
  set_has_supplyvoltage();
  supplyvoltage_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.DceEPASteeringStatusPBMsg.SupplyVoltage)
}

// optional double TempDegC = 5;
bool DceEPASteeringStatusPBMsg::has_tempdegc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DceEPASteeringStatusPBMsg::set_has_tempdegc() {
  _has_bits_[0] |= 0x00000010u;
}
void DceEPASteeringStatusPBMsg::clear_has_tempdegc() {
  _has_bits_[0] &= ~0x00000010u;
}
void DceEPASteeringStatusPBMsg::clear_tempdegc() {
  tempdegc_ = 0;
  clear_has_tempdegc();
}
 double DceEPASteeringStatusPBMsg::tempdegc() const {
  // @@protoc_insertion_point(field_get:vision_messages.DceEPASteeringStatusPBMsg.TempDegC)
  return tempdegc_;
}
 void DceEPASteeringStatusPBMsg::set_tempdegc(double value) {
  set_has_tempdegc();
  tempdegc_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.DceEPASteeringStatusPBMsg.TempDegC)
}

// optional double SteeringAngleDeg = 6;
bool DceEPASteeringStatusPBMsg::has_steeringangledeg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DceEPASteeringStatusPBMsg::set_has_steeringangledeg() {
  _has_bits_[0] |= 0x00000020u;
}
void DceEPASteeringStatusPBMsg::clear_has_steeringangledeg() {
  _has_bits_[0] &= ~0x00000020u;
}
void DceEPASteeringStatusPBMsg::clear_steeringangledeg() {
  steeringangledeg_ = 0;
  clear_has_steeringangledeg();
}
 double DceEPASteeringStatusPBMsg::steeringangledeg() const {
  // @@protoc_insertion_point(field_get:vision_messages.DceEPASteeringStatusPBMsg.SteeringAngleDeg)
  return steeringangledeg_;
}
 void DceEPASteeringStatusPBMsg::set_steeringangledeg(double value) {
  set_has_steeringangledeg();
  steeringangledeg_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.DceEPASteeringStatusPBMsg.SteeringAngleDeg)
}

// optional int32 SteeringTorqueMapSetting = 7;
bool DceEPASteeringStatusPBMsg::has_steeringtorquemapsetting() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DceEPASteeringStatusPBMsg::set_has_steeringtorquemapsetting() {
  _has_bits_[0] |= 0x00000040u;
}
void DceEPASteeringStatusPBMsg::clear_has_steeringtorquemapsetting() {
  _has_bits_[0] &= ~0x00000040u;
}
void DceEPASteeringStatusPBMsg::clear_steeringtorquemapsetting() {
  steeringtorquemapsetting_ = 0;
  clear_has_steeringtorquemapsetting();
}
 ::google::protobuf::int32 DceEPASteeringStatusPBMsg::steeringtorquemapsetting() const {
  // @@protoc_insertion_point(field_get:vision_messages.DceEPASteeringStatusPBMsg.SteeringTorqueMapSetting)
  return steeringtorquemapsetting_;
}
 void DceEPASteeringStatusPBMsg::set_steeringtorquemapsetting(::google::protobuf::int32 value) {
  set_has_steeringtorquemapsetting();
  steeringtorquemapsetting_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.DceEPASteeringStatusPBMsg.SteeringTorqueMapSetting)
}

// optional int32 SwitchPosition = 8;
bool DceEPASteeringStatusPBMsg::has_switchposition() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DceEPASteeringStatusPBMsg::set_has_switchposition() {
  _has_bits_[0] |= 0x00000080u;
}
void DceEPASteeringStatusPBMsg::clear_has_switchposition() {
  _has_bits_[0] &= ~0x00000080u;
}
void DceEPASteeringStatusPBMsg::clear_switchposition() {
  switchposition_ = 0;
  clear_has_switchposition();
}
 ::google::protobuf::int32 DceEPASteeringStatusPBMsg::switchposition() const {
  // @@protoc_insertion_point(field_get:vision_messages.DceEPASteeringStatusPBMsg.SwitchPosition)
  return switchposition_;
}
 void DceEPASteeringStatusPBMsg::set_switchposition(::google::protobuf::int32 value) {
  set_has_switchposition();
  switchposition_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.DceEPASteeringStatusPBMsg.SwitchPosition)
}

// optional int32 TorqueA = 9;
bool DceEPASteeringStatusPBMsg::has_torquea() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DceEPASteeringStatusPBMsg::set_has_torquea() {
  _has_bits_[0] |= 0x00000100u;
}
void DceEPASteeringStatusPBMsg::clear_has_torquea() {
  _has_bits_[0] &= ~0x00000100u;
}
void DceEPASteeringStatusPBMsg::clear_torquea() {
  torquea_ = 0;
  clear_has_torquea();
}
 ::google::protobuf::int32 DceEPASteeringStatusPBMsg::torquea() const {
  // @@protoc_insertion_point(field_get:vision_messages.DceEPASteeringStatusPBMsg.TorqueA)
  return torquea_;
}
 void DceEPASteeringStatusPBMsg::set_torquea(::google::protobuf::int32 value) {
  set_has_torquea();
  torquea_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.DceEPASteeringStatusPBMsg.TorqueA)
}

// optional int32 TorqueB = 10;
bool DceEPASteeringStatusPBMsg::has_torqueb() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DceEPASteeringStatusPBMsg::set_has_torqueb() {
  _has_bits_[0] |= 0x00000200u;
}
void DceEPASteeringStatusPBMsg::clear_has_torqueb() {
  _has_bits_[0] &= ~0x00000200u;
}
void DceEPASteeringStatusPBMsg::clear_torqueb() {
  torqueb_ = 0;
  clear_has_torqueb();
}
 ::google::protobuf::int32 DceEPASteeringStatusPBMsg::torqueb() const {
  // @@protoc_insertion_point(field_get:vision_messages.DceEPASteeringStatusPBMsg.TorqueB)
  return torqueb_;
}
 void DceEPASteeringStatusPBMsg::set_torqueb(::google::protobuf::int32 value) {
  set_has_torqueb();
  torqueb_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.DceEPASteeringStatusPBMsg.TorqueB)
}

// optional int32 ErrorCode = 11;
bool DceEPASteeringStatusPBMsg::has_errorcode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DceEPASteeringStatusPBMsg::set_has_errorcode() {
  _has_bits_[0] |= 0x00000400u;
}
void DceEPASteeringStatusPBMsg::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000400u;
}
void DceEPASteeringStatusPBMsg::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
 ::google::protobuf::int32 DceEPASteeringStatusPBMsg::errorcode() const {
  // @@protoc_insertion_point(field_get:vision_messages.DceEPASteeringStatusPBMsg.ErrorCode)
  return errorcode_;
}
 void DceEPASteeringStatusPBMsg::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.DceEPASteeringStatusPBMsg.ErrorCode)
}

// optional int32 StatusFlags = 12;
bool DceEPASteeringStatusPBMsg::has_statusflags() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DceEPASteeringStatusPBMsg::set_has_statusflags() {
  _has_bits_[0] |= 0x00000800u;
}
void DceEPASteeringStatusPBMsg::clear_has_statusflags() {
  _has_bits_[0] &= ~0x00000800u;
}
void DceEPASteeringStatusPBMsg::clear_statusflags() {
  statusflags_ = 0;
  clear_has_statusflags();
}
 ::google::protobuf::int32 DceEPASteeringStatusPBMsg::statusflags() const {
  // @@protoc_insertion_point(field_get:vision_messages.DceEPASteeringStatusPBMsg.StatusFlags)
  return statusflags_;
}
 void DceEPASteeringStatusPBMsg::set_statusflags(::google::protobuf::int32 value) {
  set_has_statusflags();
  statusflags_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.DceEPASteeringStatusPBMsg.StatusFlags)
}

// optional int32 LimitFlags = 13;
bool DceEPASteeringStatusPBMsg::has_limitflags() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void DceEPASteeringStatusPBMsg::set_has_limitflags() {
  _has_bits_[0] |= 0x00001000u;
}
void DceEPASteeringStatusPBMsg::clear_has_limitflags() {
  _has_bits_[0] &= ~0x00001000u;
}
void DceEPASteeringStatusPBMsg::clear_limitflags() {
  limitflags_ = 0;
  clear_has_limitflags();
}
 ::google::protobuf::int32 DceEPASteeringStatusPBMsg::limitflags() const {
  // @@protoc_insertion_point(field_get:vision_messages.DceEPASteeringStatusPBMsg.LimitFlags)
  return limitflags_;
}
 void DceEPASteeringStatusPBMsg::set_limitflags(::google::protobuf::int32 value) {
  set_has_limitflags();
  limitflags_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.DceEPASteeringStatusPBMsg.LimitFlags)
}

// optional bool ManualExtControl = 14;
bool DceEPASteeringStatusPBMsg::has_manualextcontrol() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void DceEPASteeringStatusPBMsg::set_has_manualextcontrol() {
  _has_bits_[0] |= 0x00002000u;
}
void DceEPASteeringStatusPBMsg::clear_has_manualextcontrol() {
  _has_bits_[0] &= ~0x00002000u;
}
void DceEPASteeringStatusPBMsg::clear_manualextcontrol() {
  manualextcontrol_ = false;
  clear_has_manualextcontrol();
}
 bool DceEPASteeringStatusPBMsg::manualextcontrol() const {
  // @@protoc_insertion_point(field_get:vision_messages.DceEPASteeringStatusPBMsg.ManualExtControl)
  return manualextcontrol_;
}
 void DceEPASteeringStatusPBMsg::set_manualextcontrol(bool value) {
  set_has_manualextcontrol();
  manualextcontrol_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.DceEPASteeringStatusPBMsg.ManualExtControl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinearActuatorPositionCtrlPBMsg::kPositionPercentFieldNumber;
const int LinearActuatorPositionCtrlPBMsg::kClutchEnableFieldNumber;
const int LinearActuatorPositionCtrlPBMsg::kMotorEnableFieldNumber;
const int LinearActuatorPositionCtrlPBMsg::kManualExtControlFieldNumber;
const int LinearActuatorPositionCtrlPBMsg::kMotorCurrentAmpsFieldNumber;
const int LinearActuatorPositionCtrlPBMsg::kTempDegCFieldNumber;
const int LinearActuatorPositionCtrlPBMsg::kErrorFlagsFieldNumber;
const int LinearActuatorPositionCtrlPBMsg::kActuatorSetupModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinearActuatorPositionCtrlPBMsg::LinearActuatorPositionCtrlPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.LinearActuatorPositionCtrlPBMsg)
}

void LinearActuatorPositionCtrlPBMsg::InitAsDefaultInstance() {
}

LinearActuatorPositionCtrlPBMsg::LinearActuatorPositionCtrlPBMsg(const LinearActuatorPositionCtrlPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.LinearActuatorPositionCtrlPBMsg)
}

void LinearActuatorPositionCtrlPBMsg::SharedCtor() {
  _cached_size_ = 0;
  positionpercent_ = 0;
  clutchenable_ = false;
  motorenable_ = false;
  manualextcontrol_ = false;
  motorcurrentamps_ = 0;
  tempdegc_ = 0;
  errorflags_ = 0;
  actuatorsetupmode_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinearActuatorPositionCtrlPBMsg::~LinearActuatorPositionCtrlPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.LinearActuatorPositionCtrlPBMsg)
  SharedDtor();
}

void LinearActuatorPositionCtrlPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LinearActuatorPositionCtrlPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinearActuatorPositionCtrlPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinearActuatorPositionCtrlPBMsg_descriptor_;
}

const LinearActuatorPositionCtrlPBMsg& LinearActuatorPositionCtrlPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

LinearActuatorPositionCtrlPBMsg* LinearActuatorPositionCtrlPBMsg::default_instance_ = NULL;

LinearActuatorPositionCtrlPBMsg* LinearActuatorPositionCtrlPBMsg::New(::google::protobuf::Arena* arena) const {
  LinearActuatorPositionCtrlPBMsg* n = new LinearActuatorPositionCtrlPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinearActuatorPositionCtrlPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.LinearActuatorPositionCtrlPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LinearActuatorPositionCtrlPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LinearActuatorPositionCtrlPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(positionpercent_, tempdegc_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LinearActuatorPositionCtrlPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.LinearActuatorPositionCtrlPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double PositionPercent = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positionpercent_)));
          set_has_positionpercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ClutchEnable;
        break;
      }

      // optional bool ClutchEnable = 2;
      case 2: {
        if (tag == 16) {
         parse_ClutchEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clutchenable_)));
          set_has_clutchenable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MotorEnable;
        break;
      }

      // optional bool MotorEnable = 3;
      case 3: {
        if (tag == 24) {
         parse_MotorEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &motorenable_)));
          set_has_motorenable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ManualExtControl;
        break;
      }

      // optional bool ManualExtControl = 4;
      case 4: {
        if (tag == 32) {
         parse_ManualExtControl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manualextcontrol_)));
          set_has_manualextcontrol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_MotorCurrentAmps;
        break;
      }

      // optional double MotorCurrentAmps = 5;
      case 5: {
        if (tag == 41) {
         parse_MotorCurrentAmps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &motorcurrentamps_)));
          set_has_motorcurrentamps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_TempDegC;
        break;
      }

      // optional double TempDegC = 6;
      case 6: {
        if (tag == 49) {
         parse_TempDegC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tempdegc_)));
          set_has_tempdegc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ErrorFlags;
        break;
      }

      // optional int32 ErrorFlags = 7;
      case 7: {
        if (tag == 56) {
         parse_ErrorFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorflags_)));
          set_has_errorflags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ActuatorSetupMode;
        break;
      }

      // optional bool ActuatorSetupMode = 8;
      case 8: {
        if (tag == 64) {
         parse_ActuatorSetupMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &actuatorsetupmode_)));
          set_has_actuatorsetupmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.LinearActuatorPositionCtrlPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.LinearActuatorPositionCtrlPBMsg)
  return false;
#undef DO_
}

void LinearActuatorPositionCtrlPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.LinearActuatorPositionCtrlPBMsg)
  // optional double PositionPercent = 1;
  if (has_positionpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->positionpercent(), output);
  }

  // optional bool ClutchEnable = 2;
  if (has_clutchenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->clutchenable(), output);
  }

  // optional bool MotorEnable = 3;
  if (has_motorenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->motorenable(), output);
  }

  // optional bool ManualExtControl = 4;
  if (has_manualextcontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->manualextcontrol(), output);
  }

  // optional double MotorCurrentAmps = 5;
  if (has_motorcurrentamps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->motorcurrentamps(), output);
  }

  // optional double TempDegC = 6;
  if (has_tempdegc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->tempdegc(), output);
  }

  // optional int32 ErrorFlags = 7;
  if (has_errorflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->errorflags(), output);
  }

  // optional bool ActuatorSetupMode = 8;
  if (has_actuatorsetupmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->actuatorsetupmode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.LinearActuatorPositionCtrlPBMsg)
}

::google::protobuf::uint8* LinearActuatorPositionCtrlPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.LinearActuatorPositionCtrlPBMsg)
  // optional double PositionPercent = 1;
  if (has_positionpercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->positionpercent(), target);
  }

  // optional bool ClutchEnable = 2;
  if (has_clutchenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->clutchenable(), target);
  }

  // optional bool MotorEnable = 3;
  if (has_motorenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->motorenable(), target);
  }

  // optional bool ManualExtControl = 4;
  if (has_manualextcontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->manualextcontrol(), target);
  }

  // optional double MotorCurrentAmps = 5;
  if (has_motorcurrentamps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->motorcurrentamps(), target);
  }

  // optional double TempDegC = 6;
  if (has_tempdegc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->tempdegc(), target);
  }

  // optional int32 ErrorFlags = 7;
  if (has_errorflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->errorflags(), target);
  }

  // optional bool ActuatorSetupMode = 8;
  if (has_actuatorsetupmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->actuatorsetupmode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.LinearActuatorPositionCtrlPBMsg)
  return target;
}

int LinearActuatorPositionCtrlPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.LinearActuatorPositionCtrlPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double PositionPercent = 1;
    if (has_positionpercent()) {
      total_size += 1 + 8;
    }

    // optional bool ClutchEnable = 2;
    if (has_clutchenable()) {
      total_size += 1 + 1;
    }

    // optional bool MotorEnable = 3;
    if (has_motorenable()) {
      total_size += 1 + 1;
    }

    // optional bool ManualExtControl = 4;
    if (has_manualextcontrol()) {
      total_size += 1 + 1;
    }

    // optional double MotorCurrentAmps = 5;
    if (has_motorcurrentamps()) {
      total_size += 1 + 8;
    }

    // optional double TempDegC = 6;
    if (has_tempdegc()) {
      total_size += 1 + 8;
    }

    // optional int32 ErrorFlags = 7;
    if (has_errorflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorflags());
    }

    // optional bool ActuatorSetupMode = 8;
    if (has_actuatorsetupmode()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinearActuatorPositionCtrlPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.LinearActuatorPositionCtrlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LinearActuatorPositionCtrlPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LinearActuatorPositionCtrlPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.LinearActuatorPositionCtrlPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.LinearActuatorPositionCtrlPBMsg)
    MergeFrom(*source);
  }
}

void LinearActuatorPositionCtrlPBMsg::MergeFrom(const LinearActuatorPositionCtrlPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.LinearActuatorPositionCtrlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_positionpercent()) {
      set_positionpercent(from.positionpercent());
    }
    if (from.has_clutchenable()) {
      set_clutchenable(from.clutchenable());
    }
    if (from.has_motorenable()) {
      set_motorenable(from.motorenable());
    }
    if (from.has_manualextcontrol()) {
      set_manualextcontrol(from.manualextcontrol());
    }
    if (from.has_motorcurrentamps()) {
      set_motorcurrentamps(from.motorcurrentamps());
    }
    if (from.has_tempdegc()) {
      set_tempdegc(from.tempdegc());
    }
    if (from.has_errorflags()) {
      set_errorflags(from.errorflags());
    }
    if (from.has_actuatorsetupmode()) {
      set_actuatorsetupmode(from.actuatorsetupmode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LinearActuatorPositionCtrlPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.LinearActuatorPositionCtrlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearActuatorPositionCtrlPBMsg::CopyFrom(const LinearActuatorPositionCtrlPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.LinearActuatorPositionCtrlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearActuatorPositionCtrlPBMsg::IsInitialized() const {

  return true;
}

void LinearActuatorPositionCtrlPBMsg::Swap(LinearActuatorPositionCtrlPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinearActuatorPositionCtrlPBMsg::InternalSwap(LinearActuatorPositionCtrlPBMsg* other) {
  std::swap(positionpercent_, other->positionpercent_);
  std::swap(clutchenable_, other->clutchenable_);
  std::swap(motorenable_, other->motorenable_);
  std::swap(manualextcontrol_, other->manualextcontrol_);
  std::swap(motorcurrentamps_, other->motorcurrentamps_);
  std::swap(tempdegc_, other->tempdegc_);
  std::swap(errorflags_, other->errorflags_);
  std::swap(actuatorsetupmode_, other->actuatorsetupmode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinearActuatorPositionCtrlPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinearActuatorPositionCtrlPBMsg_descriptor_;
  metadata.reflection = LinearActuatorPositionCtrlPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinearActuatorPositionCtrlPBMsg

// optional double PositionPercent = 1;
bool LinearActuatorPositionCtrlPBMsg::has_positionpercent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LinearActuatorPositionCtrlPBMsg::set_has_positionpercent() {
  _has_bits_[0] |= 0x00000001u;
}
void LinearActuatorPositionCtrlPBMsg::clear_has_positionpercent() {
  _has_bits_[0] &= ~0x00000001u;
}
void LinearActuatorPositionCtrlPBMsg::clear_positionpercent() {
  positionpercent_ = 0;
  clear_has_positionpercent();
}
 double LinearActuatorPositionCtrlPBMsg::positionpercent() const {
  // @@protoc_insertion_point(field_get:vision_messages.LinearActuatorPositionCtrlPBMsg.PositionPercent)
  return positionpercent_;
}
 void LinearActuatorPositionCtrlPBMsg::set_positionpercent(double value) {
  set_has_positionpercent();
  positionpercent_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.LinearActuatorPositionCtrlPBMsg.PositionPercent)
}

// optional bool ClutchEnable = 2;
bool LinearActuatorPositionCtrlPBMsg::has_clutchenable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LinearActuatorPositionCtrlPBMsg::set_has_clutchenable() {
  _has_bits_[0] |= 0x00000002u;
}
void LinearActuatorPositionCtrlPBMsg::clear_has_clutchenable() {
  _has_bits_[0] &= ~0x00000002u;
}
void LinearActuatorPositionCtrlPBMsg::clear_clutchenable() {
  clutchenable_ = false;
  clear_has_clutchenable();
}
 bool LinearActuatorPositionCtrlPBMsg::clutchenable() const {
  // @@protoc_insertion_point(field_get:vision_messages.LinearActuatorPositionCtrlPBMsg.ClutchEnable)
  return clutchenable_;
}
 void LinearActuatorPositionCtrlPBMsg::set_clutchenable(bool value) {
  set_has_clutchenable();
  clutchenable_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.LinearActuatorPositionCtrlPBMsg.ClutchEnable)
}

// optional bool MotorEnable = 3;
bool LinearActuatorPositionCtrlPBMsg::has_motorenable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LinearActuatorPositionCtrlPBMsg::set_has_motorenable() {
  _has_bits_[0] |= 0x00000004u;
}
void LinearActuatorPositionCtrlPBMsg::clear_has_motorenable() {
  _has_bits_[0] &= ~0x00000004u;
}
void LinearActuatorPositionCtrlPBMsg::clear_motorenable() {
  motorenable_ = false;
  clear_has_motorenable();
}
 bool LinearActuatorPositionCtrlPBMsg::motorenable() const {
  // @@protoc_insertion_point(field_get:vision_messages.LinearActuatorPositionCtrlPBMsg.MotorEnable)
  return motorenable_;
}
 void LinearActuatorPositionCtrlPBMsg::set_motorenable(bool value) {
  set_has_motorenable();
  motorenable_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.LinearActuatorPositionCtrlPBMsg.MotorEnable)
}

// optional bool ManualExtControl = 4;
bool LinearActuatorPositionCtrlPBMsg::has_manualextcontrol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LinearActuatorPositionCtrlPBMsg::set_has_manualextcontrol() {
  _has_bits_[0] |= 0x00000008u;
}
void LinearActuatorPositionCtrlPBMsg::clear_has_manualextcontrol() {
  _has_bits_[0] &= ~0x00000008u;
}
void LinearActuatorPositionCtrlPBMsg::clear_manualextcontrol() {
  manualextcontrol_ = false;
  clear_has_manualextcontrol();
}
 bool LinearActuatorPositionCtrlPBMsg::manualextcontrol() const {
  // @@protoc_insertion_point(field_get:vision_messages.LinearActuatorPositionCtrlPBMsg.ManualExtControl)
  return manualextcontrol_;
}
 void LinearActuatorPositionCtrlPBMsg::set_manualextcontrol(bool value) {
  set_has_manualextcontrol();
  manualextcontrol_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.LinearActuatorPositionCtrlPBMsg.ManualExtControl)
}

// optional double MotorCurrentAmps = 5;
bool LinearActuatorPositionCtrlPBMsg::has_motorcurrentamps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LinearActuatorPositionCtrlPBMsg::set_has_motorcurrentamps() {
  _has_bits_[0] |= 0x00000010u;
}
void LinearActuatorPositionCtrlPBMsg::clear_has_motorcurrentamps() {
  _has_bits_[0] &= ~0x00000010u;
}
void LinearActuatorPositionCtrlPBMsg::clear_motorcurrentamps() {
  motorcurrentamps_ = 0;
  clear_has_motorcurrentamps();
}
 double LinearActuatorPositionCtrlPBMsg::motorcurrentamps() const {
  // @@protoc_insertion_point(field_get:vision_messages.LinearActuatorPositionCtrlPBMsg.MotorCurrentAmps)
  return motorcurrentamps_;
}
 void LinearActuatorPositionCtrlPBMsg::set_motorcurrentamps(double value) {
  set_has_motorcurrentamps();
  motorcurrentamps_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.LinearActuatorPositionCtrlPBMsg.MotorCurrentAmps)
}

// optional double TempDegC = 6;
bool LinearActuatorPositionCtrlPBMsg::has_tempdegc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LinearActuatorPositionCtrlPBMsg::set_has_tempdegc() {
  _has_bits_[0] |= 0x00000020u;
}
void LinearActuatorPositionCtrlPBMsg::clear_has_tempdegc() {
  _has_bits_[0] &= ~0x00000020u;
}
void LinearActuatorPositionCtrlPBMsg::clear_tempdegc() {
  tempdegc_ = 0;
  clear_has_tempdegc();
}
 double LinearActuatorPositionCtrlPBMsg::tempdegc() const {
  // @@protoc_insertion_point(field_get:vision_messages.LinearActuatorPositionCtrlPBMsg.TempDegC)
  return tempdegc_;
}
 void LinearActuatorPositionCtrlPBMsg::set_tempdegc(double value) {
  set_has_tempdegc();
  tempdegc_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.LinearActuatorPositionCtrlPBMsg.TempDegC)
}

// optional int32 ErrorFlags = 7;
bool LinearActuatorPositionCtrlPBMsg::has_errorflags() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LinearActuatorPositionCtrlPBMsg::set_has_errorflags() {
  _has_bits_[0] |= 0x00000040u;
}
void LinearActuatorPositionCtrlPBMsg::clear_has_errorflags() {
  _has_bits_[0] &= ~0x00000040u;
}
void LinearActuatorPositionCtrlPBMsg::clear_errorflags() {
  errorflags_ = 0;
  clear_has_errorflags();
}
 ::google::protobuf::int32 LinearActuatorPositionCtrlPBMsg::errorflags() const {
  // @@protoc_insertion_point(field_get:vision_messages.LinearActuatorPositionCtrlPBMsg.ErrorFlags)
  return errorflags_;
}
 void LinearActuatorPositionCtrlPBMsg::set_errorflags(::google::protobuf::int32 value) {
  set_has_errorflags();
  errorflags_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.LinearActuatorPositionCtrlPBMsg.ErrorFlags)
}

// optional bool ActuatorSetupMode = 8;
bool LinearActuatorPositionCtrlPBMsg::has_actuatorsetupmode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LinearActuatorPositionCtrlPBMsg::set_has_actuatorsetupmode() {
  _has_bits_[0] |= 0x00000080u;
}
void LinearActuatorPositionCtrlPBMsg::clear_has_actuatorsetupmode() {
  _has_bits_[0] &= ~0x00000080u;
}
void LinearActuatorPositionCtrlPBMsg::clear_actuatorsetupmode() {
  actuatorsetupmode_ = false;
  clear_has_actuatorsetupmode();
}
 bool LinearActuatorPositionCtrlPBMsg::actuatorsetupmode() const {
  // @@protoc_insertion_point(field_get:vision_messages.LinearActuatorPositionCtrlPBMsg.ActuatorSetupMode)
  return actuatorsetupmode_;
}
 void LinearActuatorPositionCtrlPBMsg::set_actuatorsetupmode(bool value) {
  set_has_actuatorsetupmode();
  actuatorsetupmode_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.LinearActuatorPositionCtrlPBMsg.ActuatorSetupMode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KarTechLinearActuatorParamsPBMsg::kMinPositionInchesFieldNumber;
const int KarTechLinearActuatorParamsPBMsg::kMaxPositionInchesFieldNumber;
const int KarTechLinearActuatorParamsPBMsg::kMotorMaxCurrentLimitAmpsFieldNumber;
const int KarTechLinearActuatorParamsPBMsg::kFeedbackCtrlErrDeadbandIncesFieldNumber;
const int KarTechLinearActuatorParamsPBMsg::kFeedbackCtrlKPFieldNumber;
const int KarTechLinearActuatorParamsPBMsg::kFeedbackCtrlKIFieldNumber;
const int KarTechLinearActuatorParamsPBMsg::kFeedbackCtrlKDFieldNumber;
const int KarTechLinearActuatorParamsPBMsg::kFeedbackCtrlCLFreqFieldNumber;
const int KarTechLinearActuatorParamsPBMsg::kMotorMinPWMFieldNumber;
const int KarTechLinearActuatorParamsPBMsg::kMotorMaxPWMFieldNumber;
const int KarTechLinearActuatorParamsPBMsg::kMotorPwmFreqFieldNumber;
const int KarTechLinearActuatorParamsPBMsg::kPositionReachedErrorTimeMSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KarTechLinearActuatorParamsPBMsg::KarTechLinearActuatorParamsPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.KarTechLinearActuatorParamsPBMsg)
}

void KarTechLinearActuatorParamsPBMsg::InitAsDefaultInstance() {
}

KarTechLinearActuatorParamsPBMsg::KarTechLinearActuatorParamsPBMsg(const KarTechLinearActuatorParamsPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.KarTechLinearActuatorParamsPBMsg)
}

void KarTechLinearActuatorParamsPBMsg::SharedCtor() {
  _cached_size_ = 0;
  minpositioninches_ = 0;
  maxpositioninches_ = 0;
  motormaxcurrentlimitamps_ = 0;
  feedbackctrl_errdeadbandinces_ = 0;
  feedbackctrl_kp_ = 0u;
  feedbackctrl_ki_ = 0u;
  feedbackctrl_kd_ = 0u;
  feedbackctrl_clfreq_ = 0u;
  motor_minpwm_ = 0u;
  motor_maxpwm_ = 0u;
  motor_pwmfreq_ = 0u;
  positionreachederrortimemsec_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KarTechLinearActuatorParamsPBMsg::~KarTechLinearActuatorParamsPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.KarTechLinearActuatorParamsPBMsg)
  SharedDtor();
}

void KarTechLinearActuatorParamsPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KarTechLinearActuatorParamsPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KarTechLinearActuatorParamsPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KarTechLinearActuatorParamsPBMsg_descriptor_;
}

const KarTechLinearActuatorParamsPBMsg& KarTechLinearActuatorParamsPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

KarTechLinearActuatorParamsPBMsg* KarTechLinearActuatorParamsPBMsg::default_instance_ = NULL;

KarTechLinearActuatorParamsPBMsg* KarTechLinearActuatorParamsPBMsg::New(::google::protobuf::Arena* arena) const {
  KarTechLinearActuatorParamsPBMsg* n = new KarTechLinearActuatorParamsPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KarTechLinearActuatorParamsPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.KarTechLinearActuatorParamsPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(KarTechLinearActuatorParamsPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KarTechLinearActuatorParamsPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(minpositioninches_, feedbackctrl_clfreq_);
  }
  ZR_(motor_minpwm_, positionreachederrortimemsec_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KarTechLinearActuatorParamsPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.KarTechLinearActuatorParamsPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double MinPositionInches = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minpositioninches_)));
          set_has_minpositioninches();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_MaxPositionInches;
        break;
      }

      // optional double MaxPositionInches = 2;
      case 2: {
        if (tag == 17) {
         parse_MaxPositionInches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxpositioninches_)));
          set_has_maxpositioninches();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_MotorMaxCurrentLimitAmps;
        break;
      }

      // optional double MotorMaxCurrentLimitAmps = 3;
      case 3: {
        if (tag == 25) {
         parse_MotorMaxCurrentLimitAmps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &motormaxcurrentlimitamps_)));
          set_has_motormaxcurrentlimitamps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_FeedbackCtrl_ErrDeadbandInces;
        break;
      }

      // optional double FeedbackCtrl_ErrDeadbandInces = 4;
      case 4: {
        if (tag == 33) {
         parse_FeedbackCtrl_ErrDeadbandInces:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &feedbackctrl_errdeadbandinces_)));
          set_has_feedbackctrl_errdeadbandinces();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_FeedbackCtrl_KP;
        break;
      }

      // optional uint32 FeedbackCtrl_KP = 5;
      case 5: {
        if (tag == 40) {
         parse_FeedbackCtrl_KP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feedbackctrl_kp_)));
          set_has_feedbackctrl_kp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_FeedbackCtrl_KI;
        break;
      }

      // optional uint32 FeedbackCtrl_KI = 6;
      case 6: {
        if (tag == 48) {
         parse_FeedbackCtrl_KI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feedbackctrl_ki_)));
          set_has_feedbackctrl_ki();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_FeedbackCtrl_KD;
        break;
      }

      // optional uint32 FeedbackCtrl_KD = 7;
      case 7: {
        if (tag == 56) {
         parse_FeedbackCtrl_KD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feedbackctrl_kd_)));
          set_has_feedbackctrl_kd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_FeedbackCtrl_CLFreq;
        break;
      }

      // optional uint32 FeedbackCtrl_CLFreq = 8;
      case 8: {
        if (tag == 64) {
         parse_FeedbackCtrl_CLFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feedbackctrl_clfreq_)));
          set_has_feedbackctrl_clfreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_Motor_MinPWM;
        break;
      }

      // optional uint32 Motor_MinPWM = 9;
      case 9: {
        if (tag == 72) {
         parse_Motor_MinPWM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motor_minpwm_)));
          set_has_motor_minpwm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Motor_MaxPWM;
        break;
      }

      // optional uint32 Motor_MaxPWM = 10;
      case 10: {
        if (tag == 80) {
         parse_Motor_MaxPWM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motor_maxpwm_)));
          set_has_motor_maxpwm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_Motor_pwmFreq;
        break;
      }

      // optional uint32 Motor_pwmFreq = 11;
      case 11: {
        if (tag == 88) {
         parse_Motor_pwmFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motor_pwmfreq_)));
          set_has_motor_pwmfreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_PositionReachedErrorTimeMSec;
        break;
      }

      // optional uint32 PositionReachedErrorTimeMSec = 12;
      case 12: {
        if (tag == 96) {
         parse_PositionReachedErrorTimeMSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &positionreachederrortimemsec_)));
          set_has_positionreachederrortimemsec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.KarTechLinearActuatorParamsPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.KarTechLinearActuatorParamsPBMsg)
  return false;
#undef DO_
}

void KarTechLinearActuatorParamsPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.KarTechLinearActuatorParamsPBMsg)
  // optional double MinPositionInches = 1;
  if (has_minpositioninches()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->minpositioninches(), output);
  }

  // optional double MaxPositionInches = 2;
  if (has_maxpositioninches()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->maxpositioninches(), output);
  }

  // optional double MotorMaxCurrentLimitAmps = 3;
  if (has_motormaxcurrentlimitamps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->motormaxcurrentlimitamps(), output);
  }

  // optional double FeedbackCtrl_ErrDeadbandInces = 4;
  if (has_feedbackctrl_errdeadbandinces()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->feedbackctrl_errdeadbandinces(), output);
  }

  // optional uint32 FeedbackCtrl_KP = 5;
  if (has_feedbackctrl_kp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->feedbackctrl_kp(), output);
  }

  // optional uint32 FeedbackCtrl_KI = 6;
  if (has_feedbackctrl_ki()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->feedbackctrl_ki(), output);
  }

  // optional uint32 FeedbackCtrl_KD = 7;
  if (has_feedbackctrl_kd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->feedbackctrl_kd(), output);
  }

  // optional uint32 FeedbackCtrl_CLFreq = 8;
  if (has_feedbackctrl_clfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->feedbackctrl_clfreq(), output);
  }

  // optional uint32 Motor_MinPWM = 9;
  if (has_motor_minpwm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->motor_minpwm(), output);
  }

  // optional uint32 Motor_MaxPWM = 10;
  if (has_motor_maxpwm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->motor_maxpwm(), output);
  }

  // optional uint32 Motor_pwmFreq = 11;
  if (has_motor_pwmfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->motor_pwmfreq(), output);
  }

  // optional uint32 PositionReachedErrorTimeMSec = 12;
  if (has_positionreachederrortimemsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->positionreachederrortimemsec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.KarTechLinearActuatorParamsPBMsg)
}

::google::protobuf::uint8* KarTechLinearActuatorParamsPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.KarTechLinearActuatorParamsPBMsg)
  // optional double MinPositionInches = 1;
  if (has_minpositioninches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->minpositioninches(), target);
  }

  // optional double MaxPositionInches = 2;
  if (has_maxpositioninches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->maxpositioninches(), target);
  }

  // optional double MotorMaxCurrentLimitAmps = 3;
  if (has_motormaxcurrentlimitamps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->motormaxcurrentlimitamps(), target);
  }

  // optional double FeedbackCtrl_ErrDeadbandInces = 4;
  if (has_feedbackctrl_errdeadbandinces()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->feedbackctrl_errdeadbandinces(), target);
  }

  // optional uint32 FeedbackCtrl_KP = 5;
  if (has_feedbackctrl_kp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->feedbackctrl_kp(), target);
  }

  // optional uint32 FeedbackCtrl_KI = 6;
  if (has_feedbackctrl_ki()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->feedbackctrl_ki(), target);
  }

  // optional uint32 FeedbackCtrl_KD = 7;
  if (has_feedbackctrl_kd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->feedbackctrl_kd(), target);
  }

  // optional uint32 FeedbackCtrl_CLFreq = 8;
  if (has_feedbackctrl_clfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->feedbackctrl_clfreq(), target);
  }

  // optional uint32 Motor_MinPWM = 9;
  if (has_motor_minpwm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->motor_minpwm(), target);
  }

  // optional uint32 Motor_MaxPWM = 10;
  if (has_motor_maxpwm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->motor_maxpwm(), target);
  }

  // optional uint32 Motor_pwmFreq = 11;
  if (has_motor_pwmfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->motor_pwmfreq(), target);
  }

  // optional uint32 PositionReachedErrorTimeMSec = 12;
  if (has_positionreachederrortimemsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->positionreachederrortimemsec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.KarTechLinearActuatorParamsPBMsg)
  return target;
}

int KarTechLinearActuatorParamsPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.KarTechLinearActuatorParamsPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double MinPositionInches = 1;
    if (has_minpositioninches()) {
      total_size += 1 + 8;
    }

    // optional double MaxPositionInches = 2;
    if (has_maxpositioninches()) {
      total_size += 1 + 8;
    }

    // optional double MotorMaxCurrentLimitAmps = 3;
    if (has_motormaxcurrentlimitamps()) {
      total_size += 1 + 8;
    }

    // optional double FeedbackCtrl_ErrDeadbandInces = 4;
    if (has_feedbackctrl_errdeadbandinces()) {
      total_size += 1 + 8;
    }

    // optional uint32 FeedbackCtrl_KP = 5;
    if (has_feedbackctrl_kp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feedbackctrl_kp());
    }

    // optional uint32 FeedbackCtrl_KI = 6;
    if (has_feedbackctrl_ki()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feedbackctrl_ki());
    }

    // optional uint32 FeedbackCtrl_KD = 7;
    if (has_feedbackctrl_kd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feedbackctrl_kd());
    }

    // optional uint32 FeedbackCtrl_CLFreq = 8;
    if (has_feedbackctrl_clfreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feedbackctrl_clfreq());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 Motor_MinPWM = 9;
    if (has_motor_minpwm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->motor_minpwm());
    }

    // optional uint32 Motor_MaxPWM = 10;
    if (has_motor_maxpwm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->motor_maxpwm());
    }

    // optional uint32 Motor_pwmFreq = 11;
    if (has_motor_pwmfreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->motor_pwmfreq());
    }

    // optional uint32 PositionReachedErrorTimeMSec = 12;
    if (has_positionreachederrortimemsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->positionreachederrortimemsec());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KarTechLinearActuatorParamsPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.KarTechLinearActuatorParamsPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KarTechLinearActuatorParamsPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KarTechLinearActuatorParamsPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.KarTechLinearActuatorParamsPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.KarTechLinearActuatorParamsPBMsg)
    MergeFrom(*source);
  }
}

void KarTechLinearActuatorParamsPBMsg::MergeFrom(const KarTechLinearActuatorParamsPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.KarTechLinearActuatorParamsPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minpositioninches()) {
      set_minpositioninches(from.minpositioninches());
    }
    if (from.has_maxpositioninches()) {
      set_maxpositioninches(from.maxpositioninches());
    }
    if (from.has_motormaxcurrentlimitamps()) {
      set_motormaxcurrentlimitamps(from.motormaxcurrentlimitamps());
    }
    if (from.has_feedbackctrl_errdeadbandinces()) {
      set_feedbackctrl_errdeadbandinces(from.feedbackctrl_errdeadbandinces());
    }
    if (from.has_feedbackctrl_kp()) {
      set_feedbackctrl_kp(from.feedbackctrl_kp());
    }
    if (from.has_feedbackctrl_ki()) {
      set_feedbackctrl_ki(from.feedbackctrl_ki());
    }
    if (from.has_feedbackctrl_kd()) {
      set_feedbackctrl_kd(from.feedbackctrl_kd());
    }
    if (from.has_feedbackctrl_clfreq()) {
      set_feedbackctrl_clfreq(from.feedbackctrl_clfreq());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_motor_minpwm()) {
      set_motor_minpwm(from.motor_minpwm());
    }
    if (from.has_motor_maxpwm()) {
      set_motor_maxpwm(from.motor_maxpwm());
    }
    if (from.has_motor_pwmfreq()) {
      set_motor_pwmfreq(from.motor_pwmfreq());
    }
    if (from.has_positionreachederrortimemsec()) {
      set_positionreachederrortimemsec(from.positionreachederrortimemsec());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void KarTechLinearActuatorParamsPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.KarTechLinearActuatorParamsPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KarTechLinearActuatorParamsPBMsg::CopyFrom(const KarTechLinearActuatorParamsPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.KarTechLinearActuatorParamsPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KarTechLinearActuatorParamsPBMsg::IsInitialized() const {

  return true;
}

void KarTechLinearActuatorParamsPBMsg::Swap(KarTechLinearActuatorParamsPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KarTechLinearActuatorParamsPBMsg::InternalSwap(KarTechLinearActuatorParamsPBMsg* other) {
  std::swap(minpositioninches_, other->minpositioninches_);
  std::swap(maxpositioninches_, other->maxpositioninches_);
  std::swap(motormaxcurrentlimitamps_, other->motormaxcurrentlimitamps_);
  std::swap(feedbackctrl_errdeadbandinces_, other->feedbackctrl_errdeadbandinces_);
  std::swap(feedbackctrl_kp_, other->feedbackctrl_kp_);
  std::swap(feedbackctrl_ki_, other->feedbackctrl_ki_);
  std::swap(feedbackctrl_kd_, other->feedbackctrl_kd_);
  std::swap(feedbackctrl_clfreq_, other->feedbackctrl_clfreq_);
  std::swap(motor_minpwm_, other->motor_minpwm_);
  std::swap(motor_maxpwm_, other->motor_maxpwm_);
  std::swap(motor_pwmfreq_, other->motor_pwmfreq_);
  std::swap(positionreachederrortimemsec_, other->positionreachederrortimemsec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KarTechLinearActuatorParamsPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KarTechLinearActuatorParamsPBMsg_descriptor_;
  metadata.reflection = KarTechLinearActuatorParamsPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KarTechLinearActuatorParamsPBMsg

// optional double MinPositionInches = 1;
bool KarTechLinearActuatorParamsPBMsg::has_minpositioninches() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KarTechLinearActuatorParamsPBMsg::set_has_minpositioninches() {
  _has_bits_[0] |= 0x00000001u;
}
void KarTechLinearActuatorParamsPBMsg::clear_has_minpositioninches() {
  _has_bits_[0] &= ~0x00000001u;
}
void KarTechLinearActuatorParamsPBMsg::clear_minpositioninches() {
  minpositioninches_ = 0;
  clear_has_minpositioninches();
}
 double KarTechLinearActuatorParamsPBMsg::minpositioninches() const {
  // @@protoc_insertion_point(field_get:vision_messages.KarTechLinearActuatorParamsPBMsg.MinPositionInches)
  return minpositioninches_;
}
 void KarTechLinearActuatorParamsPBMsg::set_minpositioninches(double value) {
  set_has_minpositioninches();
  minpositioninches_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.KarTechLinearActuatorParamsPBMsg.MinPositionInches)
}

// optional double MaxPositionInches = 2;
bool KarTechLinearActuatorParamsPBMsg::has_maxpositioninches() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KarTechLinearActuatorParamsPBMsg::set_has_maxpositioninches() {
  _has_bits_[0] |= 0x00000002u;
}
void KarTechLinearActuatorParamsPBMsg::clear_has_maxpositioninches() {
  _has_bits_[0] &= ~0x00000002u;
}
void KarTechLinearActuatorParamsPBMsg::clear_maxpositioninches() {
  maxpositioninches_ = 0;
  clear_has_maxpositioninches();
}
 double KarTechLinearActuatorParamsPBMsg::maxpositioninches() const {
  // @@protoc_insertion_point(field_get:vision_messages.KarTechLinearActuatorParamsPBMsg.MaxPositionInches)
  return maxpositioninches_;
}
 void KarTechLinearActuatorParamsPBMsg::set_maxpositioninches(double value) {
  set_has_maxpositioninches();
  maxpositioninches_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.KarTechLinearActuatorParamsPBMsg.MaxPositionInches)
}

// optional double MotorMaxCurrentLimitAmps = 3;
bool KarTechLinearActuatorParamsPBMsg::has_motormaxcurrentlimitamps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KarTechLinearActuatorParamsPBMsg::set_has_motormaxcurrentlimitamps() {
  _has_bits_[0] |= 0x00000004u;
}
void KarTechLinearActuatorParamsPBMsg::clear_has_motormaxcurrentlimitamps() {
  _has_bits_[0] &= ~0x00000004u;
}
void KarTechLinearActuatorParamsPBMsg::clear_motormaxcurrentlimitamps() {
  motormaxcurrentlimitamps_ = 0;
  clear_has_motormaxcurrentlimitamps();
}
 double KarTechLinearActuatorParamsPBMsg::motormaxcurrentlimitamps() const {
  // @@protoc_insertion_point(field_get:vision_messages.KarTechLinearActuatorParamsPBMsg.MotorMaxCurrentLimitAmps)
  return motormaxcurrentlimitamps_;
}
 void KarTechLinearActuatorParamsPBMsg::set_motormaxcurrentlimitamps(double value) {
  set_has_motormaxcurrentlimitamps();
  motormaxcurrentlimitamps_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.KarTechLinearActuatorParamsPBMsg.MotorMaxCurrentLimitAmps)
}

// optional double FeedbackCtrl_ErrDeadbandInces = 4;
bool KarTechLinearActuatorParamsPBMsg::has_feedbackctrl_errdeadbandinces() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void KarTechLinearActuatorParamsPBMsg::set_has_feedbackctrl_errdeadbandinces() {
  _has_bits_[0] |= 0x00000008u;
}
void KarTechLinearActuatorParamsPBMsg::clear_has_feedbackctrl_errdeadbandinces() {
  _has_bits_[0] &= ~0x00000008u;
}
void KarTechLinearActuatorParamsPBMsg::clear_feedbackctrl_errdeadbandinces() {
  feedbackctrl_errdeadbandinces_ = 0;
  clear_has_feedbackctrl_errdeadbandinces();
}
 double KarTechLinearActuatorParamsPBMsg::feedbackctrl_errdeadbandinces() const {
  // @@protoc_insertion_point(field_get:vision_messages.KarTechLinearActuatorParamsPBMsg.FeedbackCtrl_ErrDeadbandInces)
  return feedbackctrl_errdeadbandinces_;
}
 void KarTechLinearActuatorParamsPBMsg::set_feedbackctrl_errdeadbandinces(double value) {
  set_has_feedbackctrl_errdeadbandinces();
  feedbackctrl_errdeadbandinces_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.KarTechLinearActuatorParamsPBMsg.FeedbackCtrl_ErrDeadbandInces)
}

// optional uint32 FeedbackCtrl_KP = 5;
bool KarTechLinearActuatorParamsPBMsg::has_feedbackctrl_kp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void KarTechLinearActuatorParamsPBMsg::set_has_feedbackctrl_kp() {
  _has_bits_[0] |= 0x00000010u;
}
void KarTechLinearActuatorParamsPBMsg::clear_has_feedbackctrl_kp() {
  _has_bits_[0] &= ~0x00000010u;
}
void KarTechLinearActuatorParamsPBMsg::clear_feedbackctrl_kp() {
  feedbackctrl_kp_ = 0u;
  clear_has_feedbackctrl_kp();
}
 ::google::protobuf::uint32 KarTechLinearActuatorParamsPBMsg::feedbackctrl_kp() const {
  // @@protoc_insertion_point(field_get:vision_messages.KarTechLinearActuatorParamsPBMsg.FeedbackCtrl_KP)
  return feedbackctrl_kp_;
}
 void KarTechLinearActuatorParamsPBMsg::set_feedbackctrl_kp(::google::protobuf::uint32 value) {
  set_has_feedbackctrl_kp();
  feedbackctrl_kp_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.KarTechLinearActuatorParamsPBMsg.FeedbackCtrl_KP)
}

// optional uint32 FeedbackCtrl_KI = 6;
bool KarTechLinearActuatorParamsPBMsg::has_feedbackctrl_ki() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void KarTechLinearActuatorParamsPBMsg::set_has_feedbackctrl_ki() {
  _has_bits_[0] |= 0x00000020u;
}
void KarTechLinearActuatorParamsPBMsg::clear_has_feedbackctrl_ki() {
  _has_bits_[0] &= ~0x00000020u;
}
void KarTechLinearActuatorParamsPBMsg::clear_feedbackctrl_ki() {
  feedbackctrl_ki_ = 0u;
  clear_has_feedbackctrl_ki();
}
 ::google::protobuf::uint32 KarTechLinearActuatorParamsPBMsg::feedbackctrl_ki() const {
  // @@protoc_insertion_point(field_get:vision_messages.KarTechLinearActuatorParamsPBMsg.FeedbackCtrl_KI)
  return feedbackctrl_ki_;
}
 void KarTechLinearActuatorParamsPBMsg::set_feedbackctrl_ki(::google::protobuf::uint32 value) {
  set_has_feedbackctrl_ki();
  feedbackctrl_ki_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.KarTechLinearActuatorParamsPBMsg.FeedbackCtrl_KI)
}

// optional uint32 FeedbackCtrl_KD = 7;
bool KarTechLinearActuatorParamsPBMsg::has_feedbackctrl_kd() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void KarTechLinearActuatorParamsPBMsg::set_has_feedbackctrl_kd() {
  _has_bits_[0] |= 0x00000040u;
}
void KarTechLinearActuatorParamsPBMsg::clear_has_feedbackctrl_kd() {
  _has_bits_[0] &= ~0x00000040u;
}
void KarTechLinearActuatorParamsPBMsg::clear_feedbackctrl_kd() {
  feedbackctrl_kd_ = 0u;
  clear_has_feedbackctrl_kd();
}
 ::google::protobuf::uint32 KarTechLinearActuatorParamsPBMsg::feedbackctrl_kd() const {
  // @@protoc_insertion_point(field_get:vision_messages.KarTechLinearActuatorParamsPBMsg.FeedbackCtrl_KD)
  return feedbackctrl_kd_;
}
 void KarTechLinearActuatorParamsPBMsg::set_feedbackctrl_kd(::google::protobuf::uint32 value) {
  set_has_feedbackctrl_kd();
  feedbackctrl_kd_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.KarTechLinearActuatorParamsPBMsg.FeedbackCtrl_KD)
}

// optional uint32 FeedbackCtrl_CLFreq = 8;
bool KarTechLinearActuatorParamsPBMsg::has_feedbackctrl_clfreq() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void KarTechLinearActuatorParamsPBMsg::set_has_feedbackctrl_clfreq() {
  _has_bits_[0] |= 0x00000080u;
}
void KarTechLinearActuatorParamsPBMsg::clear_has_feedbackctrl_clfreq() {
  _has_bits_[0] &= ~0x00000080u;
}
void KarTechLinearActuatorParamsPBMsg::clear_feedbackctrl_clfreq() {
  feedbackctrl_clfreq_ = 0u;
  clear_has_feedbackctrl_clfreq();
}
 ::google::protobuf::uint32 KarTechLinearActuatorParamsPBMsg::feedbackctrl_clfreq() const {
  // @@protoc_insertion_point(field_get:vision_messages.KarTechLinearActuatorParamsPBMsg.FeedbackCtrl_CLFreq)
  return feedbackctrl_clfreq_;
}
 void KarTechLinearActuatorParamsPBMsg::set_feedbackctrl_clfreq(::google::protobuf::uint32 value) {
  set_has_feedbackctrl_clfreq();
  feedbackctrl_clfreq_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.KarTechLinearActuatorParamsPBMsg.FeedbackCtrl_CLFreq)
}

// optional uint32 Motor_MinPWM = 9;
bool KarTechLinearActuatorParamsPBMsg::has_motor_minpwm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void KarTechLinearActuatorParamsPBMsg::set_has_motor_minpwm() {
  _has_bits_[0] |= 0x00000100u;
}
void KarTechLinearActuatorParamsPBMsg::clear_has_motor_minpwm() {
  _has_bits_[0] &= ~0x00000100u;
}
void KarTechLinearActuatorParamsPBMsg::clear_motor_minpwm() {
  motor_minpwm_ = 0u;
  clear_has_motor_minpwm();
}
 ::google::protobuf::uint32 KarTechLinearActuatorParamsPBMsg::motor_minpwm() const {
  // @@protoc_insertion_point(field_get:vision_messages.KarTechLinearActuatorParamsPBMsg.Motor_MinPWM)
  return motor_minpwm_;
}
 void KarTechLinearActuatorParamsPBMsg::set_motor_minpwm(::google::protobuf::uint32 value) {
  set_has_motor_minpwm();
  motor_minpwm_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.KarTechLinearActuatorParamsPBMsg.Motor_MinPWM)
}

// optional uint32 Motor_MaxPWM = 10;
bool KarTechLinearActuatorParamsPBMsg::has_motor_maxpwm() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void KarTechLinearActuatorParamsPBMsg::set_has_motor_maxpwm() {
  _has_bits_[0] |= 0x00000200u;
}
void KarTechLinearActuatorParamsPBMsg::clear_has_motor_maxpwm() {
  _has_bits_[0] &= ~0x00000200u;
}
void KarTechLinearActuatorParamsPBMsg::clear_motor_maxpwm() {
  motor_maxpwm_ = 0u;
  clear_has_motor_maxpwm();
}
 ::google::protobuf::uint32 KarTechLinearActuatorParamsPBMsg::motor_maxpwm() const {
  // @@protoc_insertion_point(field_get:vision_messages.KarTechLinearActuatorParamsPBMsg.Motor_MaxPWM)
  return motor_maxpwm_;
}
 void KarTechLinearActuatorParamsPBMsg::set_motor_maxpwm(::google::protobuf::uint32 value) {
  set_has_motor_maxpwm();
  motor_maxpwm_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.KarTechLinearActuatorParamsPBMsg.Motor_MaxPWM)
}

// optional uint32 Motor_pwmFreq = 11;
bool KarTechLinearActuatorParamsPBMsg::has_motor_pwmfreq() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void KarTechLinearActuatorParamsPBMsg::set_has_motor_pwmfreq() {
  _has_bits_[0] |= 0x00000400u;
}
void KarTechLinearActuatorParamsPBMsg::clear_has_motor_pwmfreq() {
  _has_bits_[0] &= ~0x00000400u;
}
void KarTechLinearActuatorParamsPBMsg::clear_motor_pwmfreq() {
  motor_pwmfreq_ = 0u;
  clear_has_motor_pwmfreq();
}
 ::google::protobuf::uint32 KarTechLinearActuatorParamsPBMsg::motor_pwmfreq() const {
  // @@protoc_insertion_point(field_get:vision_messages.KarTechLinearActuatorParamsPBMsg.Motor_pwmFreq)
  return motor_pwmfreq_;
}
 void KarTechLinearActuatorParamsPBMsg::set_motor_pwmfreq(::google::protobuf::uint32 value) {
  set_has_motor_pwmfreq();
  motor_pwmfreq_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.KarTechLinearActuatorParamsPBMsg.Motor_pwmFreq)
}

// optional uint32 PositionReachedErrorTimeMSec = 12;
bool KarTechLinearActuatorParamsPBMsg::has_positionreachederrortimemsec() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void KarTechLinearActuatorParamsPBMsg::set_has_positionreachederrortimemsec() {
  _has_bits_[0] |= 0x00000800u;
}
void KarTechLinearActuatorParamsPBMsg::clear_has_positionreachederrortimemsec() {
  _has_bits_[0] &= ~0x00000800u;
}
void KarTechLinearActuatorParamsPBMsg::clear_positionreachederrortimemsec() {
  positionreachederrortimemsec_ = 0u;
  clear_has_positionreachederrortimemsec();
}
 ::google::protobuf::uint32 KarTechLinearActuatorParamsPBMsg::positionreachederrortimemsec() const {
  // @@protoc_insertion_point(field_get:vision_messages.KarTechLinearActuatorParamsPBMsg.PositionReachedErrorTimeMSec)
  return positionreachederrortimemsec_;
}
 void KarTechLinearActuatorParamsPBMsg::set_positionreachederrortimemsec(::google::protobuf::uint32 value) {
  set_has_positionreachederrortimemsec();
  positionreachederrortimemsec_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.KarTechLinearActuatorParamsPBMsg.PositionReachedErrorTimeMSec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KarTechLinearActuatorSetupPBMsg::kResetOutputsFieldNumber;
const int KarTechLinearActuatorSetupPBMsg::kResetHardwareCfgsFieldNumber;
const int KarTechLinearActuatorSetupPBMsg::kResetUserCfgsFieldNumber;
const int KarTechLinearActuatorSetupPBMsg::kResetAllFieldNumber;
const int KarTechLinearActuatorSetupPBMsg::kAutoZeroCalFieldNumber;
const int KarTechLinearActuatorSetupPBMsg::kSetCanCommandResponsIDsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KarTechLinearActuatorSetupPBMsg::KarTechLinearActuatorSetupPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.KarTechLinearActuatorSetupPBMsg)
}

void KarTechLinearActuatorSetupPBMsg::InitAsDefaultInstance() {
}

KarTechLinearActuatorSetupPBMsg::KarTechLinearActuatorSetupPBMsg(const KarTechLinearActuatorSetupPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.KarTechLinearActuatorSetupPBMsg)
}

void KarTechLinearActuatorSetupPBMsg::SharedCtor() {
  _cached_size_ = 0;
  resetoutputs_ = false;
  resethardwarecfgs_ = false;
  resetusercfgs_ = false;
  resetall_ = false;
  autozerocal_ = false;
  setcancommandresponsids_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KarTechLinearActuatorSetupPBMsg::~KarTechLinearActuatorSetupPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.KarTechLinearActuatorSetupPBMsg)
  SharedDtor();
}

void KarTechLinearActuatorSetupPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KarTechLinearActuatorSetupPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KarTechLinearActuatorSetupPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KarTechLinearActuatorSetupPBMsg_descriptor_;
}

const KarTechLinearActuatorSetupPBMsg& KarTechLinearActuatorSetupPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

KarTechLinearActuatorSetupPBMsg* KarTechLinearActuatorSetupPBMsg::default_instance_ = NULL;

KarTechLinearActuatorSetupPBMsg* KarTechLinearActuatorSetupPBMsg::New(::google::protobuf::Arena* arena) const {
  KarTechLinearActuatorSetupPBMsg* n = new KarTechLinearActuatorSetupPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KarTechLinearActuatorSetupPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.KarTechLinearActuatorSetupPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(KarTechLinearActuatorSetupPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KarTechLinearActuatorSetupPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(resetoutputs_, setcancommandresponsids_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KarTechLinearActuatorSetupPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.KarTechLinearActuatorSetupPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ResetOutputs = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resetoutputs_)));
          set_has_resetoutputs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ResetHardwareCfgs;
        break;
      }

      // optional bool ResetHardwareCfgs = 2;
      case 2: {
        if (tag == 16) {
         parse_ResetHardwareCfgs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resethardwarecfgs_)));
          set_has_resethardwarecfgs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ResetUserCfgs;
        break;
      }

      // optional bool ResetUserCfgs = 3;
      case 3: {
        if (tag == 24) {
         parse_ResetUserCfgs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resetusercfgs_)));
          set_has_resetusercfgs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ResetAll;
        break;
      }

      // optional bool ResetAll = 4;
      case 4: {
        if (tag == 32) {
         parse_ResetAll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resetall_)));
          set_has_resetall();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AutoZeroCal;
        break;
      }

      // optional bool AutoZeroCal = 5;
      case 5: {
        if (tag == 40) {
         parse_AutoZeroCal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autozerocal_)));
          set_has_autozerocal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_SetCanCommandResponsIDs;
        break;
      }

      // optional bool SetCanCommandResponsIDs = 6;
      case 6: {
        if (tag == 48) {
         parse_SetCanCommandResponsIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setcancommandresponsids_)));
          set_has_setcancommandresponsids();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.KarTechLinearActuatorSetupPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.KarTechLinearActuatorSetupPBMsg)
  return false;
#undef DO_
}

void KarTechLinearActuatorSetupPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.KarTechLinearActuatorSetupPBMsg)
  // optional bool ResetOutputs = 1;
  if (has_resetoutputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->resetoutputs(), output);
  }

  // optional bool ResetHardwareCfgs = 2;
  if (has_resethardwarecfgs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->resethardwarecfgs(), output);
  }

  // optional bool ResetUserCfgs = 3;
  if (has_resetusercfgs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->resetusercfgs(), output);
  }

  // optional bool ResetAll = 4;
  if (has_resetall()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->resetall(), output);
  }

  // optional bool AutoZeroCal = 5;
  if (has_autozerocal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->autozerocal(), output);
  }

  // optional bool SetCanCommandResponsIDs = 6;
  if (has_setcancommandresponsids()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->setcancommandresponsids(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.KarTechLinearActuatorSetupPBMsg)
}

::google::protobuf::uint8* KarTechLinearActuatorSetupPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.KarTechLinearActuatorSetupPBMsg)
  // optional bool ResetOutputs = 1;
  if (has_resetoutputs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->resetoutputs(), target);
  }

  // optional bool ResetHardwareCfgs = 2;
  if (has_resethardwarecfgs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->resethardwarecfgs(), target);
  }

  // optional bool ResetUserCfgs = 3;
  if (has_resetusercfgs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->resetusercfgs(), target);
  }

  // optional bool ResetAll = 4;
  if (has_resetall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->resetall(), target);
  }

  // optional bool AutoZeroCal = 5;
  if (has_autozerocal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->autozerocal(), target);
  }

  // optional bool SetCanCommandResponsIDs = 6;
  if (has_setcancommandresponsids()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->setcancommandresponsids(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.KarTechLinearActuatorSetupPBMsg)
  return target;
}

int KarTechLinearActuatorSetupPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.KarTechLinearActuatorSetupPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional bool ResetOutputs = 1;
    if (has_resetoutputs()) {
      total_size += 1 + 1;
    }

    // optional bool ResetHardwareCfgs = 2;
    if (has_resethardwarecfgs()) {
      total_size += 1 + 1;
    }

    // optional bool ResetUserCfgs = 3;
    if (has_resetusercfgs()) {
      total_size += 1 + 1;
    }

    // optional bool ResetAll = 4;
    if (has_resetall()) {
      total_size += 1 + 1;
    }

    // optional bool AutoZeroCal = 5;
    if (has_autozerocal()) {
      total_size += 1 + 1;
    }

    // optional bool SetCanCommandResponsIDs = 6;
    if (has_setcancommandresponsids()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KarTechLinearActuatorSetupPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.KarTechLinearActuatorSetupPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KarTechLinearActuatorSetupPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KarTechLinearActuatorSetupPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.KarTechLinearActuatorSetupPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.KarTechLinearActuatorSetupPBMsg)
    MergeFrom(*source);
  }
}

void KarTechLinearActuatorSetupPBMsg::MergeFrom(const KarTechLinearActuatorSetupPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.KarTechLinearActuatorSetupPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resetoutputs()) {
      set_resetoutputs(from.resetoutputs());
    }
    if (from.has_resethardwarecfgs()) {
      set_resethardwarecfgs(from.resethardwarecfgs());
    }
    if (from.has_resetusercfgs()) {
      set_resetusercfgs(from.resetusercfgs());
    }
    if (from.has_resetall()) {
      set_resetall(from.resetall());
    }
    if (from.has_autozerocal()) {
      set_autozerocal(from.autozerocal());
    }
    if (from.has_setcancommandresponsids()) {
      set_setcancommandresponsids(from.setcancommandresponsids());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void KarTechLinearActuatorSetupPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.KarTechLinearActuatorSetupPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KarTechLinearActuatorSetupPBMsg::CopyFrom(const KarTechLinearActuatorSetupPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.KarTechLinearActuatorSetupPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KarTechLinearActuatorSetupPBMsg::IsInitialized() const {

  return true;
}

void KarTechLinearActuatorSetupPBMsg::Swap(KarTechLinearActuatorSetupPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KarTechLinearActuatorSetupPBMsg::InternalSwap(KarTechLinearActuatorSetupPBMsg* other) {
  std::swap(resetoutputs_, other->resetoutputs_);
  std::swap(resethardwarecfgs_, other->resethardwarecfgs_);
  std::swap(resetusercfgs_, other->resetusercfgs_);
  std::swap(resetall_, other->resetall_);
  std::swap(autozerocal_, other->autozerocal_);
  std::swap(setcancommandresponsids_, other->setcancommandresponsids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KarTechLinearActuatorSetupPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KarTechLinearActuatorSetupPBMsg_descriptor_;
  metadata.reflection = KarTechLinearActuatorSetupPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KarTechLinearActuatorSetupPBMsg

// optional bool ResetOutputs = 1;
bool KarTechLinearActuatorSetupPBMsg::has_resetoutputs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KarTechLinearActuatorSetupPBMsg::set_has_resetoutputs() {
  _has_bits_[0] |= 0x00000001u;
}
void KarTechLinearActuatorSetupPBMsg::clear_has_resetoutputs() {
  _has_bits_[0] &= ~0x00000001u;
}
void KarTechLinearActuatorSetupPBMsg::clear_resetoutputs() {
  resetoutputs_ = false;
  clear_has_resetoutputs();
}
 bool KarTechLinearActuatorSetupPBMsg::resetoutputs() const {
  // @@protoc_insertion_point(field_get:vision_messages.KarTechLinearActuatorSetupPBMsg.ResetOutputs)
  return resetoutputs_;
}
 void KarTechLinearActuatorSetupPBMsg::set_resetoutputs(bool value) {
  set_has_resetoutputs();
  resetoutputs_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.KarTechLinearActuatorSetupPBMsg.ResetOutputs)
}

// optional bool ResetHardwareCfgs = 2;
bool KarTechLinearActuatorSetupPBMsg::has_resethardwarecfgs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KarTechLinearActuatorSetupPBMsg::set_has_resethardwarecfgs() {
  _has_bits_[0] |= 0x00000002u;
}
void KarTechLinearActuatorSetupPBMsg::clear_has_resethardwarecfgs() {
  _has_bits_[0] &= ~0x00000002u;
}
void KarTechLinearActuatorSetupPBMsg::clear_resethardwarecfgs() {
  resethardwarecfgs_ = false;
  clear_has_resethardwarecfgs();
}
 bool KarTechLinearActuatorSetupPBMsg::resethardwarecfgs() const {
  // @@protoc_insertion_point(field_get:vision_messages.KarTechLinearActuatorSetupPBMsg.ResetHardwareCfgs)
  return resethardwarecfgs_;
}
 void KarTechLinearActuatorSetupPBMsg::set_resethardwarecfgs(bool value) {
  set_has_resethardwarecfgs();
  resethardwarecfgs_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.KarTechLinearActuatorSetupPBMsg.ResetHardwareCfgs)
}

// optional bool ResetUserCfgs = 3;
bool KarTechLinearActuatorSetupPBMsg::has_resetusercfgs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KarTechLinearActuatorSetupPBMsg::set_has_resetusercfgs() {
  _has_bits_[0] |= 0x00000004u;
}
void KarTechLinearActuatorSetupPBMsg::clear_has_resetusercfgs() {
  _has_bits_[0] &= ~0x00000004u;
}
void KarTechLinearActuatorSetupPBMsg::clear_resetusercfgs() {
  resetusercfgs_ = false;
  clear_has_resetusercfgs();
}
 bool KarTechLinearActuatorSetupPBMsg::resetusercfgs() const {
  // @@protoc_insertion_point(field_get:vision_messages.KarTechLinearActuatorSetupPBMsg.ResetUserCfgs)
  return resetusercfgs_;
}
 void KarTechLinearActuatorSetupPBMsg::set_resetusercfgs(bool value) {
  set_has_resetusercfgs();
  resetusercfgs_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.KarTechLinearActuatorSetupPBMsg.ResetUserCfgs)
}

// optional bool ResetAll = 4;
bool KarTechLinearActuatorSetupPBMsg::has_resetall() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void KarTechLinearActuatorSetupPBMsg::set_has_resetall() {
  _has_bits_[0] |= 0x00000008u;
}
void KarTechLinearActuatorSetupPBMsg::clear_has_resetall() {
  _has_bits_[0] &= ~0x00000008u;
}
void KarTechLinearActuatorSetupPBMsg::clear_resetall() {
  resetall_ = false;
  clear_has_resetall();
}
 bool KarTechLinearActuatorSetupPBMsg::resetall() const {
  // @@protoc_insertion_point(field_get:vision_messages.KarTechLinearActuatorSetupPBMsg.ResetAll)
  return resetall_;
}
 void KarTechLinearActuatorSetupPBMsg::set_resetall(bool value) {
  set_has_resetall();
  resetall_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.KarTechLinearActuatorSetupPBMsg.ResetAll)
}

// optional bool AutoZeroCal = 5;
bool KarTechLinearActuatorSetupPBMsg::has_autozerocal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void KarTechLinearActuatorSetupPBMsg::set_has_autozerocal() {
  _has_bits_[0] |= 0x00000010u;
}
void KarTechLinearActuatorSetupPBMsg::clear_has_autozerocal() {
  _has_bits_[0] &= ~0x00000010u;
}
void KarTechLinearActuatorSetupPBMsg::clear_autozerocal() {
  autozerocal_ = false;
  clear_has_autozerocal();
}
 bool KarTechLinearActuatorSetupPBMsg::autozerocal() const {
  // @@protoc_insertion_point(field_get:vision_messages.KarTechLinearActuatorSetupPBMsg.AutoZeroCal)
  return autozerocal_;
}
 void KarTechLinearActuatorSetupPBMsg::set_autozerocal(bool value) {
  set_has_autozerocal();
  autozerocal_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.KarTechLinearActuatorSetupPBMsg.AutoZeroCal)
}

// optional bool SetCanCommandResponsIDs = 6;
bool KarTechLinearActuatorSetupPBMsg::has_setcancommandresponsids() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void KarTechLinearActuatorSetupPBMsg::set_has_setcancommandresponsids() {
  _has_bits_[0] |= 0x00000020u;
}
void KarTechLinearActuatorSetupPBMsg::clear_has_setcancommandresponsids() {
  _has_bits_[0] &= ~0x00000020u;
}
void KarTechLinearActuatorSetupPBMsg::clear_setcancommandresponsids() {
  setcancommandresponsids_ = false;
  clear_has_setcancommandresponsids();
}
 bool KarTechLinearActuatorSetupPBMsg::setcancommandresponsids() const {
  // @@protoc_insertion_point(field_get:vision_messages.KarTechLinearActuatorSetupPBMsg.SetCanCommandResponsIDs)
  return setcancommandresponsids_;
}
 void KarTechLinearActuatorSetupPBMsg::set_setcancommandresponsids(bool value) {
  set_has_setcancommandresponsids();
  setcancommandresponsids_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.KarTechLinearActuatorSetupPBMsg.SetCanCommandResponsIDs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeadOrientationPBMsg::kHeadRollDegreesFieldNumber;
const int HeadOrientationPBMsg::kHeadPitchDegreesFieldNumber;
const int HeadOrientationPBMsg::kHeadYawDegreesFieldNumber;
const int HeadOrientationPBMsg::kCovarianceNormFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeadOrientationPBMsg::HeadOrientationPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.HeadOrientationPBMsg)
}

void HeadOrientationPBMsg::InitAsDefaultInstance() {
}

HeadOrientationPBMsg::HeadOrientationPBMsg(const HeadOrientationPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.HeadOrientationPBMsg)
}

void HeadOrientationPBMsg::SharedCtor() {
  _cached_size_ = 0;
  headrolldegrees_ = 0;
  headpitchdegrees_ = 0;
  headyawdegrees_ = 0;
  covariancenorm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeadOrientationPBMsg::~HeadOrientationPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.HeadOrientationPBMsg)
  SharedDtor();
}

void HeadOrientationPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeadOrientationPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeadOrientationPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeadOrientationPBMsg_descriptor_;
}

const HeadOrientationPBMsg& HeadOrientationPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

HeadOrientationPBMsg* HeadOrientationPBMsg::default_instance_ = NULL;

HeadOrientationPBMsg* HeadOrientationPBMsg::New(::google::protobuf::Arena* arena) const {
  HeadOrientationPBMsg* n = new HeadOrientationPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeadOrientationPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.HeadOrientationPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HeadOrientationPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HeadOrientationPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(headrolldegrees_, covariancenorm_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HeadOrientationPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.HeadOrientationPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double HeadRollDegrees = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &headrolldegrees_)));
          set_has_headrolldegrees();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_HeadPitchDegrees;
        break;
      }

      // optional double HeadPitchDegrees = 2;
      case 2: {
        if (tag == 17) {
         parse_HeadPitchDegrees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &headpitchdegrees_)));
          set_has_headpitchdegrees();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_HeadYawDegrees;
        break;
      }

      // optional double HeadYawDegrees = 3;
      case 3: {
        if (tag == 25) {
         parse_HeadYawDegrees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &headyawdegrees_)));
          set_has_headyawdegrees();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_CovarianceNorm;
        break;
      }

      // optional double CovarianceNorm = 4;
      case 4: {
        if (tag == 33) {
         parse_CovarianceNorm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &covariancenorm_)));
          set_has_covariancenorm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.HeadOrientationPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.HeadOrientationPBMsg)
  return false;
#undef DO_
}

void HeadOrientationPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.HeadOrientationPBMsg)
  // optional double HeadRollDegrees = 1;
  if (has_headrolldegrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->headrolldegrees(), output);
  }

  // optional double HeadPitchDegrees = 2;
  if (has_headpitchdegrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->headpitchdegrees(), output);
  }

  // optional double HeadYawDegrees = 3;
  if (has_headyawdegrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->headyawdegrees(), output);
  }

  // optional double CovarianceNorm = 4;
  if (has_covariancenorm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->covariancenorm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.HeadOrientationPBMsg)
}

::google::protobuf::uint8* HeadOrientationPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.HeadOrientationPBMsg)
  // optional double HeadRollDegrees = 1;
  if (has_headrolldegrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->headrolldegrees(), target);
  }

  // optional double HeadPitchDegrees = 2;
  if (has_headpitchdegrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->headpitchdegrees(), target);
  }

  // optional double HeadYawDegrees = 3;
  if (has_headyawdegrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->headyawdegrees(), target);
  }

  // optional double CovarianceNorm = 4;
  if (has_covariancenorm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->covariancenorm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.HeadOrientationPBMsg)
  return target;
}

int HeadOrientationPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.HeadOrientationPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional double HeadRollDegrees = 1;
    if (has_headrolldegrees()) {
      total_size += 1 + 8;
    }

    // optional double HeadPitchDegrees = 2;
    if (has_headpitchdegrees()) {
      total_size += 1 + 8;
    }

    // optional double HeadYawDegrees = 3;
    if (has_headyawdegrees()) {
      total_size += 1 + 8;
    }

    // optional double CovarianceNorm = 4;
    if (has_covariancenorm()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeadOrientationPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.HeadOrientationPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HeadOrientationPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HeadOrientationPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.HeadOrientationPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.HeadOrientationPBMsg)
    MergeFrom(*source);
  }
}

void HeadOrientationPBMsg::MergeFrom(const HeadOrientationPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.HeadOrientationPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_headrolldegrees()) {
      set_headrolldegrees(from.headrolldegrees());
    }
    if (from.has_headpitchdegrees()) {
      set_headpitchdegrees(from.headpitchdegrees());
    }
    if (from.has_headyawdegrees()) {
      set_headyawdegrees(from.headyawdegrees());
    }
    if (from.has_covariancenorm()) {
      set_covariancenorm(from.covariancenorm());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HeadOrientationPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.HeadOrientationPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeadOrientationPBMsg::CopyFrom(const HeadOrientationPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.HeadOrientationPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadOrientationPBMsg::IsInitialized() const {

  return true;
}

void HeadOrientationPBMsg::Swap(HeadOrientationPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeadOrientationPBMsg::InternalSwap(HeadOrientationPBMsg* other) {
  std::swap(headrolldegrees_, other->headrolldegrees_);
  std::swap(headpitchdegrees_, other->headpitchdegrees_);
  std::swap(headyawdegrees_, other->headyawdegrees_);
  std::swap(covariancenorm_, other->covariancenorm_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeadOrientationPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeadOrientationPBMsg_descriptor_;
  metadata.reflection = HeadOrientationPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeadOrientationPBMsg

// optional double HeadRollDegrees = 1;
bool HeadOrientationPBMsg::has_headrolldegrees() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HeadOrientationPBMsg::set_has_headrolldegrees() {
  _has_bits_[0] |= 0x00000001u;
}
void HeadOrientationPBMsg::clear_has_headrolldegrees() {
  _has_bits_[0] &= ~0x00000001u;
}
void HeadOrientationPBMsg::clear_headrolldegrees() {
  headrolldegrees_ = 0;
  clear_has_headrolldegrees();
}
 double HeadOrientationPBMsg::headrolldegrees() const {
  // @@protoc_insertion_point(field_get:vision_messages.HeadOrientationPBMsg.HeadRollDegrees)
  return headrolldegrees_;
}
 void HeadOrientationPBMsg::set_headrolldegrees(double value) {
  set_has_headrolldegrees();
  headrolldegrees_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.HeadOrientationPBMsg.HeadRollDegrees)
}

// optional double HeadPitchDegrees = 2;
bool HeadOrientationPBMsg::has_headpitchdegrees() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HeadOrientationPBMsg::set_has_headpitchdegrees() {
  _has_bits_[0] |= 0x00000002u;
}
void HeadOrientationPBMsg::clear_has_headpitchdegrees() {
  _has_bits_[0] &= ~0x00000002u;
}
void HeadOrientationPBMsg::clear_headpitchdegrees() {
  headpitchdegrees_ = 0;
  clear_has_headpitchdegrees();
}
 double HeadOrientationPBMsg::headpitchdegrees() const {
  // @@protoc_insertion_point(field_get:vision_messages.HeadOrientationPBMsg.HeadPitchDegrees)
  return headpitchdegrees_;
}
 void HeadOrientationPBMsg::set_headpitchdegrees(double value) {
  set_has_headpitchdegrees();
  headpitchdegrees_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.HeadOrientationPBMsg.HeadPitchDegrees)
}

// optional double HeadYawDegrees = 3;
bool HeadOrientationPBMsg::has_headyawdegrees() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HeadOrientationPBMsg::set_has_headyawdegrees() {
  _has_bits_[0] |= 0x00000004u;
}
void HeadOrientationPBMsg::clear_has_headyawdegrees() {
  _has_bits_[0] &= ~0x00000004u;
}
void HeadOrientationPBMsg::clear_headyawdegrees() {
  headyawdegrees_ = 0;
  clear_has_headyawdegrees();
}
 double HeadOrientationPBMsg::headyawdegrees() const {
  // @@protoc_insertion_point(field_get:vision_messages.HeadOrientationPBMsg.HeadYawDegrees)
  return headyawdegrees_;
}
 void HeadOrientationPBMsg::set_headyawdegrees(double value) {
  set_has_headyawdegrees();
  headyawdegrees_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.HeadOrientationPBMsg.HeadYawDegrees)
}

// optional double CovarianceNorm = 4;
bool HeadOrientationPBMsg::has_covariancenorm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HeadOrientationPBMsg::set_has_covariancenorm() {
  _has_bits_[0] |= 0x00000008u;
}
void HeadOrientationPBMsg::clear_has_covariancenorm() {
  _has_bits_[0] &= ~0x00000008u;
}
void HeadOrientationPBMsg::clear_covariancenorm() {
  covariancenorm_ = 0;
  clear_has_covariancenorm();
}
 double HeadOrientationPBMsg::covariancenorm() const {
  // @@protoc_insertion_point(field_get:vision_messages.HeadOrientationPBMsg.CovarianceNorm)
  return covariancenorm_;
}
 void HeadOrientationPBMsg::set_covariancenorm(double value) {
  set_has_covariancenorm();
  covariancenorm_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.HeadOrientationPBMsg.CovarianceNorm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SipAndPuffPBMsg::kSipAndPuffPecentFieldNumber;
const int SipAndPuffPBMsg::kSipAndPuffIntegralPercentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SipAndPuffPBMsg::SipAndPuffPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.SipAndPuffPBMsg)
}

void SipAndPuffPBMsg::InitAsDefaultInstance() {
}

SipAndPuffPBMsg::SipAndPuffPBMsg(const SipAndPuffPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.SipAndPuffPBMsg)
}

void SipAndPuffPBMsg::SharedCtor() {
  _cached_size_ = 0;
  sipandpuffpecent_ = 0;
  sipandpuffintegralpercent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SipAndPuffPBMsg::~SipAndPuffPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.SipAndPuffPBMsg)
  SharedDtor();
}

void SipAndPuffPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SipAndPuffPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SipAndPuffPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SipAndPuffPBMsg_descriptor_;
}

const SipAndPuffPBMsg& SipAndPuffPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

SipAndPuffPBMsg* SipAndPuffPBMsg::default_instance_ = NULL;

SipAndPuffPBMsg* SipAndPuffPBMsg::New(::google::protobuf::Arena* arena) const {
  SipAndPuffPBMsg* n = new SipAndPuffPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SipAndPuffPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.SipAndPuffPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SipAndPuffPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SipAndPuffPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sipandpuffpecent_, sipandpuffintegralpercent_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SipAndPuffPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.SipAndPuffPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double SipAndPuffPecent = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sipandpuffpecent_)));
          set_has_sipandpuffpecent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_SipAndPuffIntegralPercent;
        break;
      }

      // optional double SipAndPuffIntegralPercent = 2;
      case 2: {
        if (tag == 17) {
         parse_SipAndPuffIntegralPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sipandpuffintegralpercent_)));
          set_has_sipandpuffintegralpercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.SipAndPuffPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.SipAndPuffPBMsg)
  return false;
#undef DO_
}

void SipAndPuffPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.SipAndPuffPBMsg)
  // optional double SipAndPuffPecent = 1;
  if (has_sipandpuffpecent()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->sipandpuffpecent(), output);
  }

  // optional double SipAndPuffIntegralPercent = 2;
  if (has_sipandpuffintegralpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sipandpuffintegralpercent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.SipAndPuffPBMsg)
}

::google::protobuf::uint8* SipAndPuffPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.SipAndPuffPBMsg)
  // optional double SipAndPuffPecent = 1;
  if (has_sipandpuffpecent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->sipandpuffpecent(), target);
  }

  // optional double SipAndPuffIntegralPercent = 2;
  if (has_sipandpuffintegralpercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sipandpuffintegralpercent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.SipAndPuffPBMsg)
  return target;
}

int SipAndPuffPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.SipAndPuffPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double SipAndPuffPecent = 1;
    if (has_sipandpuffpecent()) {
      total_size += 1 + 8;
    }

    // optional double SipAndPuffIntegralPercent = 2;
    if (has_sipandpuffintegralpercent()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SipAndPuffPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.SipAndPuffPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SipAndPuffPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SipAndPuffPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.SipAndPuffPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.SipAndPuffPBMsg)
    MergeFrom(*source);
  }
}

void SipAndPuffPBMsg::MergeFrom(const SipAndPuffPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.SipAndPuffPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sipandpuffpecent()) {
      set_sipandpuffpecent(from.sipandpuffpecent());
    }
    if (from.has_sipandpuffintegralpercent()) {
      set_sipandpuffintegralpercent(from.sipandpuffintegralpercent());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SipAndPuffPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.SipAndPuffPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SipAndPuffPBMsg::CopyFrom(const SipAndPuffPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.SipAndPuffPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SipAndPuffPBMsg::IsInitialized() const {

  return true;
}

void SipAndPuffPBMsg::Swap(SipAndPuffPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SipAndPuffPBMsg::InternalSwap(SipAndPuffPBMsg* other) {
  std::swap(sipandpuffpecent_, other->sipandpuffpecent_);
  std::swap(sipandpuffintegralpercent_, other->sipandpuffintegralpercent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SipAndPuffPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SipAndPuffPBMsg_descriptor_;
  metadata.reflection = SipAndPuffPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SipAndPuffPBMsg

// optional double SipAndPuffPecent = 1;
bool SipAndPuffPBMsg::has_sipandpuffpecent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SipAndPuffPBMsg::set_has_sipandpuffpecent() {
  _has_bits_[0] |= 0x00000001u;
}
void SipAndPuffPBMsg::clear_has_sipandpuffpecent() {
  _has_bits_[0] &= ~0x00000001u;
}
void SipAndPuffPBMsg::clear_sipandpuffpecent() {
  sipandpuffpecent_ = 0;
  clear_has_sipandpuffpecent();
}
 double SipAndPuffPBMsg::sipandpuffpecent() const {
  // @@protoc_insertion_point(field_get:vision_messages.SipAndPuffPBMsg.SipAndPuffPecent)
  return sipandpuffpecent_;
}
 void SipAndPuffPBMsg::set_sipandpuffpecent(double value) {
  set_has_sipandpuffpecent();
  sipandpuffpecent_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.SipAndPuffPBMsg.SipAndPuffPecent)
}

// optional double SipAndPuffIntegralPercent = 2;
bool SipAndPuffPBMsg::has_sipandpuffintegralpercent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SipAndPuffPBMsg::set_has_sipandpuffintegralpercent() {
  _has_bits_[0] |= 0x00000002u;
}
void SipAndPuffPBMsg::clear_has_sipandpuffintegralpercent() {
  _has_bits_[0] &= ~0x00000002u;
}
void SipAndPuffPBMsg::clear_sipandpuffintegralpercent() {
  sipandpuffintegralpercent_ = 0;
  clear_has_sipandpuffintegralpercent();
}
 double SipAndPuffPBMsg::sipandpuffintegralpercent() const {
  // @@protoc_insertion_point(field_get:vision_messages.SipAndPuffPBMsg.SipAndPuffIntegralPercent)
  return sipandpuffintegralpercent_;
}
 void SipAndPuffPBMsg::set_sipandpuffintegralpercent(double value) {
  set_has_sipandpuffintegralpercent();
  sipandpuffintegralpercent_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.SipAndPuffPBMsg.SipAndPuffIntegralPercent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUCommandResponsePBMsg::kIMURemoteCtrlEnableFieldNumber;
const int IMUCommandResponsePBMsg::kCmdRspMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUCommandResponsePBMsg::IMUCommandResponsePBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.IMUCommandResponsePBMsg)
}

void IMUCommandResponsePBMsg::InitAsDefaultInstance() {
}

IMUCommandResponsePBMsg::IMUCommandResponsePBMsg(const IMUCommandResponsePBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.IMUCommandResponsePBMsg)
}

void IMUCommandResponsePBMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  imuremotectrlenable_ = false;
  cmdrspmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUCommandResponsePBMsg::~IMUCommandResponsePBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.IMUCommandResponsePBMsg)
  SharedDtor();
}

void IMUCommandResponsePBMsg::SharedDtor() {
  cmdrspmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void IMUCommandResponsePBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMUCommandResponsePBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMUCommandResponsePBMsg_descriptor_;
}

const IMUCommandResponsePBMsg& IMUCommandResponsePBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

IMUCommandResponsePBMsg* IMUCommandResponsePBMsg::default_instance_ = NULL;

IMUCommandResponsePBMsg* IMUCommandResponsePBMsg::New(::google::protobuf::Arena* arena) const {
  IMUCommandResponsePBMsg* n = new IMUCommandResponsePBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMUCommandResponsePBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.IMUCommandResponsePBMsg)
  if (_has_bits_[0 / 32] & 3u) {
    imuremotectrlenable_ = false;
    if (has_cmdrspmsg()) {
      cmdrspmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IMUCommandResponsePBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.IMUCommandResponsePBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IMURemoteCtrlEnable = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &imuremotectrlenable_)));
          set_has_imuremotectrlenable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CmdRspMsg;
        break;
      }

      // optional string CmdRspMsg = 2;
      case 2: {
        if (tag == 18) {
         parse_CmdRspMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmdrspmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmdrspmsg().data(), this->cmdrspmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vision_messages.IMUCommandResponsePBMsg.CmdRspMsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.IMUCommandResponsePBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.IMUCommandResponsePBMsg)
  return false;
#undef DO_
}

void IMUCommandResponsePBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.IMUCommandResponsePBMsg)
  // optional bool IMURemoteCtrlEnable = 1;
  if (has_imuremotectrlenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->imuremotectrlenable(), output);
  }

  // optional string CmdRspMsg = 2;
  if (has_cmdrspmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdrspmsg().data(), this->cmdrspmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.IMUCommandResponsePBMsg.CmdRspMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cmdrspmsg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.IMUCommandResponsePBMsg)
}

::google::protobuf::uint8* IMUCommandResponsePBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.IMUCommandResponsePBMsg)
  // optional bool IMURemoteCtrlEnable = 1;
  if (has_imuremotectrlenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->imuremotectrlenable(), target);
  }

  // optional string CmdRspMsg = 2;
  if (has_cmdrspmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdrspmsg().data(), this->cmdrspmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.IMUCommandResponsePBMsg.CmdRspMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cmdrspmsg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.IMUCommandResponsePBMsg)
  return target;
}

int IMUCommandResponsePBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.IMUCommandResponsePBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool IMURemoteCtrlEnable = 1;
    if (has_imuremotectrlenable()) {
      total_size += 1 + 1;
    }

    // optional string CmdRspMsg = 2;
    if (has_cmdrspmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmdrspmsg());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUCommandResponsePBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.IMUCommandResponsePBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IMUCommandResponsePBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IMUCommandResponsePBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.IMUCommandResponsePBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.IMUCommandResponsePBMsg)
    MergeFrom(*source);
  }
}

void IMUCommandResponsePBMsg::MergeFrom(const IMUCommandResponsePBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.IMUCommandResponsePBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imuremotectrlenable()) {
      set_imuremotectrlenable(from.imuremotectrlenable());
    }
    if (from.has_cmdrspmsg()) {
      set_has_cmdrspmsg();
      cmdrspmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmdrspmsg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IMUCommandResponsePBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.IMUCommandResponsePBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUCommandResponsePBMsg::CopyFrom(const IMUCommandResponsePBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.IMUCommandResponsePBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUCommandResponsePBMsg::IsInitialized() const {

  return true;
}

void IMUCommandResponsePBMsg::Swap(IMUCommandResponsePBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUCommandResponsePBMsg::InternalSwap(IMUCommandResponsePBMsg* other) {
  std::swap(imuremotectrlenable_, other->imuremotectrlenable_);
  cmdrspmsg_.Swap(&other->cmdrspmsg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMUCommandResponsePBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMUCommandResponsePBMsg_descriptor_;
  metadata.reflection = IMUCommandResponsePBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMUCommandResponsePBMsg

// optional bool IMURemoteCtrlEnable = 1;
bool IMUCommandResponsePBMsg::has_imuremotectrlenable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMUCommandResponsePBMsg::set_has_imuremotectrlenable() {
  _has_bits_[0] |= 0x00000001u;
}
void IMUCommandResponsePBMsg::clear_has_imuremotectrlenable() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMUCommandResponsePBMsg::clear_imuremotectrlenable() {
  imuremotectrlenable_ = false;
  clear_has_imuremotectrlenable();
}
 bool IMUCommandResponsePBMsg::imuremotectrlenable() const {
  // @@protoc_insertion_point(field_get:vision_messages.IMUCommandResponsePBMsg.IMURemoteCtrlEnable)
  return imuremotectrlenable_;
}
 void IMUCommandResponsePBMsg::set_imuremotectrlenable(bool value) {
  set_has_imuremotectrlenable();
  imuremotectrlenable_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.IMUCommandResponsePBMsg.IMURemoteCtrlEnable)
}

// optional string CmdRspMsg = 2;
bool IMUCommandResponsePBMsg::has_cmdrspmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMUCommandResponsePBMsg::set_has_cmdrspmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void IMUCommandResponsePBMsg::clear_has_cmdrspmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMUCommandResponsePBMsg::clear_cmdrspmsg() {
  cmdrspmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmdrspmsg();
}
 const ::std::string& IMUCommandResponsePBMsg::cmdrspmsg() const {
  // @@protoc_insertion_point(field_get:vision_messages.IMUCommandResponsePBMsg.CmdRspMsg)
  return cmdrspmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMUCommandResponsePBMsg::set_cmdrspmsg(const ::std::string& value) {
  set_has_cmdrspmsg();
  cmdrspmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vision_messages.IMUCommandResponsePBMsg.CmdRspMsg)
}
 void IMUCommandResponsePBMsg::set_cmdrspmsg(const char* value) {
  set_has_cmdrspmsg();
  cmdrspmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vision_messages.IMUCommandResponsePBMsg.CmdRspMsg)
}
 void IMUCommandResponsePBMsg::set_cmdrspmsg(const char* value, size_t size) {
  set_has_cmdrspmsg();
  cmdrspmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vision_messages.IMUCommandResponsePBMsg.CmdRspMsg)
}
 ::std::string* IMUCommandResponsePBMsg::mutable_cmdrspmsg() {
  set_has_cmdrspmsg();
  // @@protoc_insertion_point(field_mutable:vision_messages.IMUCommandResponsePBMsg.CmdRspMsg)
  return cmdrspmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMUCommandResponsePBMsg::release_cmdrspmsg() {
  // @@protoc_insertion_point(field_release:vision_messages.IMUCommandResponsePBMsg.CmdRspMsg)
  clear_has_cmdrspmsg();
  return cmdrspmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMUCommandResponsePBMsg::set_allocated_cmdrspmsg(::std::string* cmdrspmsg) {
  if (cmdrspmsg != NULL) {
    set_has_cmdrspmsg();
  } else {
    clear_has_cmdrspmsg();
  }
  cmdrspmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmdrspmsg);
  // @@protoc_insertion_point(field_set_allocated:vision_messages.IMUCommandResponsePBMsg.CmdRspMsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaybackControlPBMsg::kDataLogDirectoryFieldNumber;
const int PlaybackControlPBMsg::kEnablePlaybackFieldNumber;
const int PlaybackControlPBMsg::kLoopBackToStartOfDataRecordsFieldNumber;
const int PlaybackControlPBMsg::kStartPlaybackFieldNumber;
const int PlaybackControlPBMsg::kTimeSyncPlaybackFieldNumber;
const int PlaybackControlPBMsg::kResetPlaybackFieldNumber;
const int PlaybackControlPBMsg::kPlayForTimeSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaybackControlPBMsg::PlaybackControlPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.PlaybackControlPBMsg)
}

void PlaybackControlPBMsg::InitAsDefaultInstance() {
}

PlaybackControlPBMsg::PlaybackControlPBMsg(const PlaybackControlPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.PlaybackControlPBMsg)
}

void PlaybackControlPBMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  datalogdirectory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enableplayback_ = false;
  loopbacktostartofdatarecords_ = false;
  startplayback_ = false;
  timesyncplayback_ = false;
  resetplayback_ = false;
  playfortimeseconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaybackControlPBMsg::~PlaybackControlPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.PlaybackControlPBMsg)
  SharedDtor();
}

void PlaybackControlPBMsg::SharedDtor() {
  datalogdirectory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PlaybackControlPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaybackControlPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaybackControlPBMsg_descriptor_;
}

const PlaybackControlPBMsg& PlaybackControlPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

PlaybackControlPBMsg* PlaybackControlPBMsg::default_instance_ = NULL;

PlaybackControlPBMsg* PlaybackControlPBMsg::New(::google::protobuf::Arena* arena) const {
  PlaybackControlPBMsg* n = new PlaybackControlPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlaybackControlPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.PlaybackControlPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlaybackControlPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlaybackControlPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(enableplayback_, playfortimeseconds_);
    if (has_datalogdirectory()) {
      datalogdirectory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlaybackControlPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.PlaybackControlPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string DataLogDirectory = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datalogdirectory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->datalogdirectory().data(), this->datalogdirectory().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vision_messages.PlaybackControlPBMsg.DataLogDirectory");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EnablePlayback;
        break;
      }

      // optional bool EnablePlayback = 2;
      case 2: {
        if (tag == 16) {
         parse_EnablePlayback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enableplayback_)));
          set_has_enableplayback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LoopBackToStartOfDataRecords;
        break;
      }

      // optional bool LoopBackToStartOfDataRecords = 3;
      case 3: {
        if (tag == 24) {
         parse_LoopBackToStartOfDataRecords:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loopbacktostartofdatarecords_)));
          set_has_loopbacktostartofdatarecords();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_StartPlayback;
        break;
      }

      // optional bool StartPlayback = 4;
      case 4: {
        if (tag == 32) {
         parse_StartPlayback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &startplayback_)));
          set_has_startplayback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_TimeSyncPlayback;
        break;
      }

      // optional bool TimeSyncPlayback = 5;
      case 5: {
        if (tag == 40) {
         parse_TimeSyncPlayback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &timesyncplayback_)));
          set_has_timesyncplayback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ResetPlayback;
        break;
      }

      // optional bool ResetPlayback = 6;
      case 6: {
        if (tag == 48) {
         parse_ResetPlayback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resetplayback_)));
          set_has_resetplayback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_PlayForTimeSeconds;
        break;
      }

      // optional double PlayForTimeSeconds = 7;
      case 7: {
        if (tag == 57) {
         parse_PlayForTimeSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &playfortimeseconds_)));
          set_has_playfortimeseconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.PlaybackControlPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.PlaybackControlPBMsg)
  return false;
#undef DO_
}

void PlaybackControlPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.PlaybackControlPBMsg)
  // optional string DataLogDirectory = 1;
  if (has_datalogdirectory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->datalogdirectory().data(), this->datalogdirectory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.PlaybackControlPBMsg.DataLogDirectory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->datalogdirectory(), output);
  }

  // optional bool EnablePlayback = 2;
  if (has_enableplayback()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enableplayback(), output);
  }

  // optional bool LoopBackToStartOfDataRecords = 3;
  if (has_loopbacktostartofdatarecords()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->loopbacktostartofdatarecords(), output);
  }

  // optional bool StartPlayback = 4;
  if (has_startplayback()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->startplayback(), output);
  }

  // optional bool TimeSyncPlayback = 5;
  if (has_timesyncplayback()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->timesyncplayback(), output);
  }

  // optional bool ResetPlayback = 6;
  if (has_resetplayback()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->resetplayback(), output);
  }

  // optional double PlayForTimeSeconds = 7;
  if (has_playfortimeseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->playfortimeseconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.PlaybackControlPBMsg)
}

::google::protobuf::uint8* PlaybackControlPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.PlaybackControlPBMsg)
  // optional string DataLogDirectory = 1;
  if (has_datalogdirectory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->datalogdirectory().data(), this->datalogdirectory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vision_messages.PlaybackControlPBMsg.DataLogDirectory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->datalogdirectory(), target);
  }

  // optional bool EnablePlayback = 2;
  if (has_enableplayback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enableplayback(), target);
  }

  // optional bool LoopBackToStartOfDataRecords = 3;
  if (has_loopbacktostartofdatarecords()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->loopbacktostartofdatarecords(), target);
  }

  // optional bool StartPlayback = 4;
  if (has_startplayback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->startplayback(), target);
  }

  // optional bool TimeSyncPlayback = 5;
  if (has_timesyncplayback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->timesyncplayback(), target);
  }

  // optional bool ResetPlayback = 6;
  if (has_resetplayback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->resetplayback(), target);
  }

  // optional double PlayForTimeSeconds = 7;
  if (has_playfortimeseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->playfortimeseconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.PlaybackControlPBMsg)
  return target;
}

int PlaybackControlPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.PlaybackControlPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional string DataLogDirectory = 1;
    if (has_datalogdirectory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datalogdirectory());
    }

    // optional bool EnablePlayback = 2;
    if (has_enableplayback()) {
      total_size += 1 + 1;
    }

    // optional bool LoopBackToStartOfDataRecords = 3;
    if (has_loopbacktostartofdatarecords()) {
      total_size += 1 + 1;
    }

    // optional bool StartPlayback = 4;
    if (has_startplayback()) {
      total_size += 1 + 1;
    }

    // optional bool TimeSyncPlayback = 5;
    if (has_timesyncplayback()) {
      total_size += 1 + 1;
    }

    // optional bool ResetPlayback = 6;
    if (has_resetplayback()) {
      total_size += 1 + 1;
    }

    // optional double PlayForTimeSeconds = 7;
    if (has_playfortimeseconds()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaybackControlPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.PlaybackControlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlaybackControlPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlaybackControlPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.PlaybackControlPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.PlaybackControlPBMsg)
    MergeFrom(*source);
  }
}

void PlaybackControlPBMsg::MergeFrom(const PlaybackControlPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.PlaybackControlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datalogdirectory()) {
      set_has_datalogdirectory();
      datalogdirectory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datalogdirectory_);
    }
    if (from.has_enableplayback()) {
      set_enableplayback(from.enableplayback());
    }
    if (from.has_loopbacktostartofdatarecords()) {
      set_loopbacktostartofdatarecords(from.loopbacktostartofdatarecords());
    }
    if (from.has_startplayback()) {
      set_startplayback(from.startplayback());
    }
    if (from.has_timesyncplayback()) {
      set_timesyncplayback(from.timesyncplayback());
    }
    if (from.has_resetplayback()) {
      set_resetplayback(from.resetplayback());
    }
    if (from.has_playfortimeseconds()) {
      set_playfortimeseconds(from.playfortimeseconds());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlaybackControlPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.PlaybackControlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaybackControlPBMsg::CopyFrom(const PlaybackControlPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.PlaybackControlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackControlPBMsg::IsInitialized() const {

  return true;
}

void PlaybackControlPBMsg::Swap(PlaybackControlPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaybackControlPBMsg::InternalSwap(PlaybackControlPBMsg* other) {
  datalogdirectory_.Swap(&other->datalogdirectory_);
  std::swap(enableplayback_, other->enableplayback_);
  std::swap(loopbacktostartofdatarecords_, other->loopbacktostartofdatarecords_);
  std::swap(startplayback_, other->startplayback_);
  std::swap(timesyncplayback_, other->timesyncplayback_);
  std::swap(resetplayback_, other->resetplayback_);
  std::swap(playfortimeseconds_, other->playfortimeseconds_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlaybackControlPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaybackControlPBMsg_descriptor_;
  metadata.reflection = PlaybackControlPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlaybackControlPBMsg

// optional string DataLogDirectory = 1;
bool PlaybackControlPBMsg::has_datalogdirectory() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlaybackControlPBMsg::set_has_datalogdirectory() {
  _has_bits_[0] |= 0x00000001u;
}
void PlaybackControlPBMsg::clear_has_datalogdirectory() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlaybackControlPBMsg::clear_datalogdirectory() {
  datalogdirectory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_datalogdirectory();
}
 const ::std::string& PlaybackControlPBMsg::datalogdirectory() const {
  // @@protoc_insertion_point(field_get:vision_messages.PlaybackControlPBMsg.DataLogDirectory)
  return datalogdirectory_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlaybackControlPBMsg::set_datalogdirectory(const ::std::string& value) {
  set_has_datalogdirectory();
  datalogdirectory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vision_messages.PlaybackControlPBMsg.DataLogDirectory)
}
 void PlaybackControlPBMsg::set_datalogdirectory(const char* value) {
  set_has_datalogdirectory();
  datalogdirectory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vision_messages.PlaybackControlPBMsg.DataLogDirectory)
}
 void PlaybackControlPBMsg::set_datalogdirectory(const char* value, size_t size) {
  set_has_datalogdirectory();
  datalogdirectory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vision_messages.PlaybackControlPBMsg.DataLogDirectory)
}
 ::std::string* PlaybackControlPBMsg::mutable_datalogdirectory() {
  set_has_datalogdirectory();
  // @@protoc_insertion_point(field_mutable:vision_messages.PlaybackControlPBMsg.DataLogDirectory)
  return datalogdirectory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlaybackControlPBMsg::release_datalogdirectory() {
  // @@protoc_insertion_point(field_release:vision_messages.PlaybackControlPBMsg.DataLogDirectory)
  clear_has_datalogdirectory();
  return datalogdirectory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlaybackControlPBMsg::set_allocated_datalogdirectory(::std::string* datalogdirectory) {
  if (datalogdirectory != NULL) {
    set_has_datalogdirectory();
  } else {
    clear_has_datalogdirectory();
  }
  datalogdirectory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datalogdirectory);
  // @@protoc_insertion_point(field_set_allocated:vision_messages.PlaybackControlPBMsg.DataLogDirectory)
}

// optional bool EnablePlayback = 2;
bool PlaybackControlPBMsg::has_enableplayback() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlaybackControlPBMsg::set_has_enableplayback() {
  _has_bits_[0] |= 0x00000002u;
}
void PlaybackControlPBMsg::clear_has_enableplayback() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlaybackControlPBMsg::clear_enableplayback() {
  enableplayback_ = false;
  clear_has_enableplayback();
}
 bool PlaybackControlPBMsg::enableplayback() const {
  // @@protoc_insertion_point(field_get:vision_messages.PlaybackControlPBMsg.EnablePlayback)
  return enableplayback_;
}
 void PlaybackControlPBMsg::set_enableplayback(bool value) {
  set_has_enableplayback();
  enableplayback_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.PlaybackControlPBMsg.EnablePlayback)
}

// optional bool LoopBackToStartOfDataRecords = 3;
bool PlaybackControlPBMsg::has_loopbacktostartofdatarecords() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlaybackControlPBMsg::set_has_loopbacktostartofdatarecords() {
  _has_bits_[0] |= 0x00000004u;
}
void PlaybackControlPBMsg::clear_has_loopbacktostartofdatarecords() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlaybackControlPBMsg::clear_loopbacktostartofdatarecords() {
  loopbacktostartofdatarecords_ = false;
  clear_has_loopbacktostartofdatarecords();
}
 bool PlaybackControlPBMsg::loopbacktostartofdatarecords() const {
  // @@protoc_insertion_point(field_get:vision_messages.PlaybackControlPBMsg.LoopBackToStartOfDataRecords)
  return loopbacktostartofdatarecords_;
}
 void PlaybackControlPBMsg::set_loopbacktostartofdatarecords(bool value) {
  set_has_loopbacktostartofdatarecords();
  loopbacktostartofdatarecords_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.PlaybackControlPBMsg.LoopBackToStartOfDataRecords)
}

// optional bool StartPlayback = 4;
bool PlaybackControlPBMsg::has_startplayback() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlaybackControlPBMsg::set_has_startplayback() {
  _has_bits_[0] |= 0x00000008u;
}
void PlaybackControlPBMsg::clear_has_startplayback() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlaybackControlPBMsg::clear_startplayback() {
  startplayback_ = false;
  clear_has_startplayback();
}
 bool PlaybackControlPBMsg::startplayback() const {
  // @@protoc_insertion_point(field_get:vision_messages.PlaybackControlPBMsg.StartPlayback)
  return startplayback_;
}
 void PlaybackControlPBMsg::set_startplayback(bool value) {
  set_has_startplayback();
  startplayback_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.PlaybackControlPBMsg.StartPlayback)
}

// optional bool TimeSyncPlayback = 5;
bool PlaybackControlPBMsg::has_timesyncplayback() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PlaybackControlPBMsg::set_has_timesyncplayback() {
  _has_bits_[0] |= 0x00000010u;
}
void PlaybackControlPBMsg::clear_has_timesyncplayback() {
  _has_bits_[0] &= ~0x00000010u;
}
void PlaybackControlPBMsg::clear_timesyncplayback() {
  timesyncplayback_ = false;
  clear_has_timesyncplayback();
}
 bool PlaybackControlPBMsg::timesyncplayback() const {
  // @@protoc_insertion_point(field_get:vision_messages.PlaybackControlPBMsg.TimeSyncPlayback)
  return timesyncplayback_;
}
 void PlaybackControlPBMsg::set_timesyncplayback(bool value) {
  set_has_timesyncplayback();
  timesyncplayback_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.PlaybackControlPBMsg.TimeSyncPlayback)
}

// optional bool ResetPlayback = 6;
bool PlaybackControlPBMsg::has_resetplayback() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PlaybackControlPBMsg::set_has_resetplayback() {
  _has_bits_[0] |= 0x00000020u;
}
void PlaybackControlPBMsg::clear_has_resetplayback() {
  _has_bits_[0] &= ~0x00000020u;
}
void PlaybackControlPBMsg::clear_resetplayback() {
  resetplayback_ = false;
  clear_has_resetplayback();
}
 bool PlaybackControlPBMsg::resetplayback() const {
  // @@protoc_insertion_point(field_get:vision_messages.PlaybackControlPBMsg.ResetPlayback)
  return resetplayback_;
}
 void PlaybackControlPBMsg::set_resetplayback(bool value) {
  set_has_resetplayback();
  resetplayback_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.PlaybackControlPBMsg.ResetPlayback)
}

// optional double PlayForTimeSeconds = 7;
bool PlaybackControlPBMsg::has_playfortimeseconds() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PlaybackControlPBMsg::set_has_playfortimeseconds() {
  _has_bits_[0] |= 0x00000040u;
}
void PlaybackControlPBMsg::clear_has_playfortimeseconds() {
  _has_bits_[0] &= ~0x00000040u;
}
void PlaybackControlPBMsg::clear_playfortimeseconds() {
  playfortimeseconds_ = 0;
  clear_has_playfortimeseconds();
}
 double PlaybackControlPBMsg::playfortimeseconds() const {
  // @@protoc_insertion_point(field_get:vision_messages.PlaybackControlPBMsg.PlayForTimeSeconds)
  return playfortimeseconds_;
}
 void PlaybackControlPBMsg::set_playfortimeseconds(double value) {
  set_has_playfortimeseconds();
  playfortimeseconds_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.PlaybackControlPBMsg.PlayForTimeSeconds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeadTrackingControlPBMsg::kCannyLowFieldNumber;
const int HeadTrackingControlPBMsg::kCannyHighFieldNumber;
const int HeadTrackingControlPBMsg::kGlyphAreaPixelsMinFieldNumber;
const int HeadTrackingControlPBMsg::kGlyphAreaPixelsMaxFieldNumber;
const int HeadTrackingControlPBMsg::kNumberOfIterationsFieldNumber;
const int HeadTrackingControlPBMsg::kReprojectionErrorDistanceFieldNumber;
const int HeadTrackingControlPBMsg::kConfidencePercentFieldNumber;
const int HeadTrackingControlPBMsg::kHeadTrackingImageDisplayTypeFieldNumber;
const int HeadTrackingControlPBMsg::kGlyphModelIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeadTrackingControlPBMsg::HeadTrackingControlPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.HeadTrackingControlPBMsg)
}

void HeadTrackingControlPBMsg::InitAsDefaultInstance() {
}

HeadTrackingControlPBMsg::HeadTrackingControlPBMsg(const HeadTrackingControlPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.HeadTrackingControlPBMsg)
}

void HeadTrackingControlPBMsg::SharedCtor() {
  _cached_size_ = 0;
  canny_low_ = 0;
  canny_high_ = 0;
  glyphareapixels_min_ = 0;
  glyphareapixels_max_ = 0;
  numberofiterations_ = 0;
  reprojectionerrordistance_ = 0;
  confidencepercent_ = 0;
  headtrackingimagedisplaytype_ = 0u;
  glyphmodelindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeadTrackingControlPBMsg::~HeadTrackingControlPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.HeadTrackingControlPBMsg)
  SharedDtor();
}

void HeadTrackingControlPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeadTrackingControlPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeadTrackingControlPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeadTrackingControlPBMsg_descriptor_;
}

const HeadTrackingControlPBMsg& HeadTrackingControlPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

HeadTrackingControlPBMsg* HeadTrackingControlPBMsg::default_instance_ = NULL;

HeadTrackingControlPBMsg* HeadTrackingControlPBMsg::New(::google::protobuf::Arena* arena) const {
  HeadTrackingControlPBMsg* n = new HeadTrackingControlPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeadTrackingControlPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.HeadTrackingControlPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HeadTrackingControlPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HeadTrackingControlPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(canny_low_, confidencepercent_);
  }
  glyphmodelindex_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HeadTrackingControlPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.HeadTrackingControlPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Canny_low = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canny_low_)));
          set_has_canny_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Canny_high;
        break;
      }

      // optional int32 Canny_high = 2;
      case 2: {
        if (tag == 16) {
         parse_Canny_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canny_high_)));
          set_has_canny_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_GlyphAreaPixels_min;
        break;
      }

      // optional int32 GlyphAreaPixels_min = 3;
      case 3: {
        if (tag == 24) {
         parse_GlyphAreaPixels_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &glyphareapixels_min_)));
          set_has_glyphareapixels_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_GlyphAreaPixels_max;
        break;
      }

      // optional int32 GlyphAreaPixels_max = 4;
      case 4: {
        if (tag == 32) {
         parse_GlyphAreaPixels_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &glyphareapixels_max_)));
          set_has_glyphareapixels_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_NumberOfIterations;
        break;
      }

      // optional int32 NumberOfIterations = 5;
      case 5: {
        if (tag == 40) {
         parse_NumberOfIterations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberofiterations_)));
          set_has_numberofiterations();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_ReprojectionErrorDistance;
        break;
      }

      // optional double ReprojectionErrorDistance = 6;
      case 6: {
        if (tag == 49) {
         parse_ReprojectionErrorDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reprojectionerrordistance_)));
          set_has_reprojectionerrordistance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_ConfidencePercent;
        break;
      }

      // optional double ConfidencePercent = 7;
      case 7: {
        if (tag == 57) {
         parse_ConfidencePercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidencepercent_)));
          set_has_confidencepercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_HeadTrackingImageDisplayType;
        break;
      }

      // optional uint32 HeadTrackingImageDisplayType = 8;
      case 8: {
        if (tag == 64) {
         parse_HeadTrackingImageDisplayType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headtrackingimagedisplaytype_)));
          set_has_headtrackingimagedisplaytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_GlyphModelIndex;
        break;
      }

      // optional uint32 GlyphModelIndex = 9;
      case 9: {
        if (tag == 72) {
         parse_GlyphModelIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &glyphmodelindex_)));
          set_has_glyphmodelindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.HeadTrackingControlPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.HeadTrackingControlPBMsg)
  return false;
#undef DO_
}

void HeadTrackingControlPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.HeadTrackingControlPBMsg)
  // optional int32 Canny_low = 1;
  if (has_canny_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->canny_low(), output);
  }

  // optional int32 Canny_high = 2;
  if (has_canny_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->canny_high(), output);
  }

  // optional int32 GlyphAreaPixels_min = 3;
  if (has_glyphareapixels_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->glyphareapixels_min(), output);
  }

  // optional int32 GlyphAreaPixels_max = 4;
  if (has_glyphareapixels_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->glyphareapixels_max(), output);
  }

  // optional int32 NumberOfIterations = 5;
  if (has_numberofiterations()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->numberofiterations(), output);
  }

  // optional double ReprojectionErrorDistance = 6;
  if (has_reprojectionerrordistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->reprojectionerrordistance(), output);
  }

  // optional double ConfidencePercent = 7;
  if (has_confidencepercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->confidencepercent(), output);
  }

  // optional uint32 HeadTrackingImageDisplayType = 8;
  if (has_headtrackingimagedisplaytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->headtrackingimagedisplaytype(), output);
  }

  // optional uint32 GlyphModelIndex = 9;
  if (has_glyphmodelindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->glyphmodelindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.HeadTrackingControlPBMsg)
}

::google::protobuf::uint8* HeadTrackingControlPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.HeadTrackingControlPBMsg)
  // optional int32 Canny_low = 1;
  if (has_canny_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->canny_low(), target);
  }

  // optional int32 Canny_high = 2;
  if (has_canny_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->canny_high(), target);
  }

  // optional int32 GlyphAreaPixels_min = 3;
  if (has_glyphareapixels_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->glyphareapixels_min(), target);
  }

  // optional int32 GlyphAreaPixels_max = 4;
  if (has_glyphareapixels_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->glyphareapixels_max(), target);
  }

  // optional int32 NumberOfIterations = 5;
  if (has_numberofiterations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->numberofiterations(), target);
  }

  // optional double ReprojectionErrorDistance = 6;
  if (has_reprojectionerrordistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->reprojectionerrordistance(), target);
  }

  // optional double ConfidencePercent = 7;
  if (has_confidencepercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->confidencepercent(), target);
  }

  // optional uint32 HeadTrackingImageDisplayType = 8;
  if (has_headtrackingimagedisplaytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->headtrackingimagedisplaytype(), target);
  }

  // optional uint32 GlyphModelIndex = 9;
  if (has_glyphmodelindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->glyphmodelindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.HeadTrackingControlPBMsg)
  return target;
}

int HeadTrackingControlPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.HeadTrackingControlPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 Canny_low = 1;
    if (has_canny_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canny_low());
    }

    // optional int32 Canny_high = 2;
    if (has_canny_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canny_high());
    }

    // optional int32 GlyphAreaPixels_min = 3;
    if (has_glyphareapixels_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->glyphareapixels_min());
    }

    // optional int32 GlyphAreaPixels_max = 4;
    if (has_glyphareapixels_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->glyphareapixels_max());
    }

    // optional int32 NumberOfIterations = 5;
    if (has_numberofiterations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numberofiterations());
    }

    // optional double ReprojectionErrorDistance = 6;
    if (has_reprojectionerrordistance()) {
      total_size += 1 + 8;
    }

    // optional double ConfidencePercent = 7;
    if (has_confidencepercent()) {
      total_size += 1 + 8;
    }

    // optional uint32 HeadTrackingImageDisplayType = 8;
    if (has_headtrackingimagedisplaytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headtrackingimagedisplaytype());
    }

  }
  // optional uint32 GlyphModelIndex = 9;
  if (has_glyphmodelindex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->glyphmodelindex());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeadTrackingControlPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.HeadTrackingControlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HeadTrackingControlPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HeadTrackingControlPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.HeadTrackingControlPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.HeadTrackingControlPBMsg)
    MergeFrom(*source);
  }
}

void HeadTrackingControlPBMsg::MergeFrom(const HeadTrackingControlPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.HeadTrackingControlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_canny_low()) {
      set_canny_low(from.canny_low());
    }
    if (from.has_canny_high()) {
      set_canny_high(from.canny_high());
    }
    if (from.has_glyphareapixels_min()) {
      set_glyphareapixels_min(from.glyphareapixels_min());
    }
    if (from.has_glyphareapixels_max()) {
      set_glyphareapixels_max(from.glyphareapixels_max());
    }
    if (from.has_numberofiterations()) {
      set_numberofiterations(from.numberofiterations());
    }
    if (from.has_reprojectionerrordistance()) {
      set_reprojectionerrordistance(from.reprojectionerrordistance());
    }
    if (from.has_confidencepercent()) {
      set_confidencepercent(from.confidencepercent());
    }
    if (from.has_headtrackingimagedisplaytype()) {
      set_headtrackingimagedisplaytype(from.headtrackingimagedisplaytype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_glyphmodelindex()) {
      set_glyphmodelindex(from.glyphmodelindex());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HeadTrackingControlPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.HeadTrackingControlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeadTrackingControlPBMsg::CopyFrom(const HeadTrackingControlPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.HeadTrackingControlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadTrackingControlPBMsg::IsInitialized() const {

  return true;
}

void HeadTrackingControlPBMsg::Swap(HeadTrackingControlPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeadTrackingControlPBMsg::InternalSwap(HeadTrackingControlPBMsg* other) {
  std::swap(canny_low_, other->canny_low_);
  std::swap(canny_high_, other->canny_high_);
  std::swap(glyphareapixels_min_, other->glyphareapixels_min_);
  std::swap(glyphareapixels_max_, other->glyphareapixels_max_);
  std::swap(numberofiterations_, other->numberofiterations_);
  std::swap(reprojectionerrordistance_, other->reprojectionerrordistance_);
  std::swap(confidencepercent_, other->confidencepercent_);
  std::swap(headtrackingimagedisplaytype_, other->headtrackingimagedisplaytype_);
  std::swap(glyphmodelindex_, other->glyphmodelindex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeadTrackingControlPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeadTrackingControlPBMsg_descriptor_;
  metadata.reflection = HeadTrackingControlPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeadTrackingControlPBMsg

// optional int32 Canny_low = 1;
bool HeadTrackingControlPBMsg::has_canny_low() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HeadTrackingControlPBMsg::set_has_canny_low() {
  _has_bits_[0] |= 0x00000001u;
}
void HeadTrackingControlPBMsg::clear_has_canny_low() {
  _has_bits_[0] &= ~0x00000001u;
}
void HeadTrackingControlPBMsg::clear_canny_low() {
  canny_low_ = 0;
  clear_has_canny_low();
}
 ::google::protobuf::int32 HeadTrackingControlPBMsg::canny_low() const {
  // @@protoc_insertion_point(field_get:vision_messages.HeadTrackingControlPBMsg.Canny_low)
  return canny_low_;
}
 void HeadTrackingControlPBMsg::set_canny_low(::google::protobuf::int32 value) {
  set_has_canny_low();
  canny_low_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.HeadTrackingControlPBMsg.Canny_low)
}

// optional int32 Canny_high = 2;
bool HeadTrackingControlPBMsg::has_canny_high() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HeadTrackingControlPBMsg::set_has_canny_high() {
  _has_bits_[0] |= 0x00000002u;
}
void HeadTrackingControlPBMsg::clear_has_canny_high() {
  _has_bits_[0] &= ~0x00000002u;
}
void HeadTrackingControlPBMsg::clear_canny_high() {
  canny_high_ = 0;
  clear_has_canny_high();
}
 ::google::protobuf::int32 HeadTrackingControlPBMsg::canny_high() const {
  // @@protoc_insertion_point(field_get:vision_messages.HeadTrackingControlPBMsg.Canny_high)
  return canny_high_;
}
 void HeadTrackingControlPBMsg::set_canny_high(::google::protobuf::int32 value) {
  set_has_canny_high();
  canny_high_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.HeadTrackingControlPBMsg.Canny_high)
}

// optional int32 GlyphAreaPixels_min = 3;
bool HeadTrackingControlPBMsg::has_glyphareapixels_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HeadTrackingControlPBMsg::set_has_glyphareapixels_min() {
  _has_bits_[0] |= 0x00000004u;
}
void HeadTrackingControlPBMsg::clear_has_glyphareapixels_min() {
  _has_bits_[0] &= ~0x00000004u;
}
void HeadTrackingControlPBMsg::clear_glyphareapixels_min() {
  glyphareapixels_min_ = 0;
  clear_has_glyphareapixels_min();
}
 ::google::protobuf::int32 HeadTrackingControlPBMsg::glyphareapixels_min() const {
  // @@protoc_insertion_point(field_get:vision_messages.HeadTrackingControlPBMsg.GlyphAreaPixels_min)
  return glyphareapixels_min_;
}
 void HeadTrackingControlPBMsg::set_glyphareapixels_min(::google::protobuf::int32 value) {
  set_has_glyphareapixels_min();
  glyphareapixels_min_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.HeadTrackingControlPBMsg.GlyphAreaPixels_min)
}

// optional int32 GlyphAreaPixels_max = 4;
bool HeadTrackingControlPBMsg::has_glyphareapixels_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HeadTrackingControlPBMsg::set_has_glyphareapixels_max() {
  _has_bits_[0] |= 0x00000008u;
}
void HeadTrackingControlPBMsg::clear_has_glyphareapixels_max() {
  _has_bits_[0] &= ~0x00000008u;
}
void HeadTrackingControlPBMsg::clear_glyphareapixels_max() {
  glyphareapixels_max_ = 0;
  clear_has_glyphareapixels_max();
}
 ::google::protobuf::int32 HeadTrackingControlPBMsg::glyphareapixels_max() const {
  // @@protoc_insertion_point(field_get:vision_messages.HeadTrackingControlPBMsg.GlyphAreaPixels_max)
  return glyphareapixels_max_;
}
 void HeadTrackingControlPBMsg::set_glyphareapixels_max(::google::protobuf::int32 value) {
  set_has_glyphareapixels_max();
  glyphareapixels_max_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.HeadTrackingControlPBMsg.GlyphAreaPixels_max)
}

// optional int32 NumberOfIterations = 5;
bool HeadTrackingControlPBMsg::has_numberofiterations() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void HeadTrackingControlPBMsg::set_has_numberofiterations() {
  _has_bits_[0] |= 0x00000010u;
}
void HeadTrackingControlPBMsg::clear_has_numberofiterations() {
  _has_bits_[0] &= ~0x00000010u;
}
void HeadTrackingControlPBMsg::clear_numberofiterations() {
  numberofiterations_ = 0;
  clear_has_numberofiterations();
}
 ::google::protobuf::int32 HeadTrackingControlPBMsg::numberofiterations() const {
  // @@protoc_insertion_point(field_get:vision_messages.HeadTrackingControlPBMsg.NumberOfIterations)
  return numberofiterations_;
}
 void HeadTrackingControlPBMsg::set_numberofiterations(::google::protobuf::int32 value) {
  set_has_numberofiterations();
  numberofiterations_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.HeadTrackingControlPBMsg.NumberOfIterations)
}

// optional double ReprojectionErrorDistance = 6;
bool HeadTrackingControlPBMsg::has_reprojectionerrordistance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void HeadTrackingControlPBMsg::set_has_reprojectionerrordistance() {
  _has_bits_[0] |= 0x00000020u;
}
void HeadTrackingControlPBMsg::clear_has_reprojectionerrordistance() {
  _has_bits_[0] &= ~0x00000020u;
}
void HeadTrackingControlPBMsg::clear_reprojectionerrordistance() {
  reprojectionerrordistance_ = 0;
  clear_has_reprojectionerrordistance();
}
 double HeadTrackingControlPBMsg::reprojectionerrordistance() const {
  // @@protoc_insertion_point(field_get:vision_messages.HeadTrackingControlPBMsg.ReprojectionErrorDistance)
  return reprojectionerrordistance_;
}
 void HeadTrackingControlPBMsg::set_reprojectionerrordistance(double value) {
  set_has_reprojectionerrordistance();
  reprojectionerrordistance_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.HeadTrackingControlPBMsg.ReprojectionErrorDistance)
}

// optional double ConfidencePercent = 7;
bool HeadTrackingControlPBMsg::has_confidencepercent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void HeadTrackingControlPBMsg::set_has_confidencepercent() {
  _has_bits_[0] |= 0x00000040u;
}
void HeadTrackingControlPBMsg::clear_has_confidencepercent() {
  _has_bits_[0] &= ~0x00000040u;
}
void HeadTrackingControlPBMsg::clear_confidencepercent() {
  confidencepercent_ = 0;
  clear_has_confidencepercent();
}
 double HeadTrackingControlPBMsg::confidencepercent() const {
  // @@protoc_insertion_point(field_get:vision_messages.HeadTrackingControlPBMsg.ConfidencePercent)
  return confidencepercent_;
}
 void HeadTrackingControlPBMsg::set_confidencepercent(double value) {
  set_has_confidencepercent();
  confidencepercent_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.HeadTrackingControlPBMsg.ConfidencePercent)
}

// optional uint32 HeadTrackingImageDisplayType = 8;
bool HeadTrackingControlPBMsg::has_headtrackingimagedisplaytype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void HeadTrackingControlPBMsg::set_has_headtrackingimagedisplaytype() {
  _has_bits_[0] |= 0x00000080u;
}
void HeadTrackingControlPBMsg::clear_has_headtrackingimagedisplaytype() {
  _has_bits_[0] &= ~0x00000080u;
}
void HeadTrackingControlPBMsg::clear_headtrackingimagedisplaytype() {
  headtrackingimagedisplaytype_ = 0u;
  clear_has_headtrackingimagedisplaytype();
}
 ::google::protobuf::uint32 HeadTrackingControlPBMsg::headtrackingimagedisplaytype() const {
  // @@protoc_insertion_point(field_get:vision_messages.HeadTrackingControlPBMsg.HeadTrackingImageDisplayType)
  return headtrackingimagedisplaytype_;
}
 void HeadTrackingControlPBMsg::set_headtrackingimagedisplaytype(::google::protobuf::uint32 value) {
  set_has_headtrackingimagedisplaytype();
  headtrackingimagedisplaytype_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.HeadTrackingControlPBMsg.HeadTrackingImageDisplayType)
}

// optional uint32 GlyphModelIndex = 9;
bool HeadTrackingControlPBMsg::has_glyphmodelindex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void HeadTrackingControlPBMsg::set_has_glyphmodelindex() {
  _has_bits_[0] |= 0x00000100u;
}
void HeadTrackingControlPBMsg::clear_has_glyphmodelindex() {
  _has_bits_[0] &= ~0x00000100u;
}
void HeadTrackingControlPBMsg::clear_glyphmodelindex() {
  glyphmodelindex_ = 0u;
  clear_has_glyphmodelindex();
}
 ::google::protobuf::uint32 HeadTrackingControlPBMsg::glyphmodelindex() const {
  // @@protoc_insertion_point(field_get:vision_messages.HeadTrackingControlPBMsg.GlyphModelIndex)
  return glyphmodelindex_;
}
 void HeadTrackingControlPBMsg::set_glyphmodelindex(::google::protobuf::uint32 value) {
  set_has_glyphmodelindex();
  glyphmodelindex_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.HeadTrackingControlPBMsg.GlyphModelIndex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackHeadOrientationPBMsg::kHeadOrientationQuaternionWFieldNumber;
const int TrackHeadOrientationPBMsg::kHeadOrientationQuaternionXFieldNumber;
const int TrackHeadOrientationPBMsg::kHeadOrientationQuaternionYFieldNumber;
const int TrackHeadOrientationPBMsg::kHeadOrientationQuaternionZFieldNumber;
const int TrackHeadOrientationPBMsg::kHeadTranslationVecXFieldNumber;
const int TrackHeadOrientationPBMsg::kHeadTranslationVecYFieldNumber;
const int TrackHeadOrientationPBMsg::kHeadTranslationVecZFieldNumber;
const int TrackHeadOrientationPBMsg::kIsDataValidFieldNumber;
const int TrackHeadOrientationPBMsg::kImageNumberFieldNumber;
const int TrackHeadOrientationPBMsg::kImageCaptureTimeStampSecFieldNumber;
const int TrackHeadOrientationPBMsg::kVidereTimeStampSecFieldNumber;
const int TrackHeadOrientationPBMsg::kCovarianceNormFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackHeadOrientationPBMsg::TrackHeadOrientationPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.TrackHeadOrientationPBMsg)
}

void TrackHeadOrientationPBMsg::InitAsDefaultInstance() {
}

TrackHeadOrientationPBMsg::TrackHeadOrientationPBMsg(const TrackHeadOrientationPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.TrackHeadOrientationPBMsg)
}

void TrackHeadOrientationPBMsg::SharedCtor() {
  _cached_size_ = 0;
  headorientationquaternion_w_ = 0;
  headorientationquaternion_x_ = 0;
  headorientationquaternion_y_ = 0;
  headorientationquaternion_z_ = 0;
  headtranslationvec_x_ = 0;
  headtranslationvec_y_ = 0;
  headtranslationvec_z_ = 0;
  isdatavalid_ = false;
  imagenumber_ = 0u;
  imagecapturetimestampsec_ = 0;
  videretimestampsec_ = 0;
  covariancenorm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackHeadOrientationPBMsg::~TrackHeadOrientationPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.TrackHeadOrientationPBMsg)
  SharedDtor();
}

void TrackHeadOrientationPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrackHeadOrientationPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackHeadOrientationPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackHeadOrientationPBMsg_descriptor_;
}

const TrackHeadOrientationPBMsg& TrackHeadOrientationPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

TrackHeadOrientationPBMsg* TrackHeadOrientationPBMsg::default_instance_ = NULL;

TrackHeadOrientationPBMsg* TrackHeadOrientationPBMsg::New(::google::protobuf::Arena* arena) const {
  TrackHeadOrientationPBMsg* n = new TrackHeadOrientationPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrackHeadOrientationPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.TrackHeadOrientationPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TrackHeadOrientationPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrackHeadOrientationPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(headorientationquaternion_w_, isdatavalid_);
  }
  ZR_(imagenumber_, covariancenorm_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrackHeadOrientationPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.TrackHeadOrientationPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double HeadOrientationQuaternion_W = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &headorientationquaternion_w_)));
          set_has_headorientationquaternion_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_HeadOrientationQuaternion_X;
        break;
      }

      // optional double HeadOrientationQuaternion_X = 2;
      case 2: {
        if (tag == 17) {
         parse_HeadOrientationQuaternion_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &headorientationquaternion_x_)));
          set_has_headorientationquaternion_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_HeadOrientationQuaternion_Y;
        break;
      }

      // optional double HeadOrientationQuaternion_Y = 3;
      case 3: {
        if (tag == 25) {
         parse_HeadOrientationQuaternion_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &headorientationquaternion_y_)));
          set_has_headorientationquaternion_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_HeadOrientationQuaternion_Z;
        break;
      }

      // optional double HeadOrientationQuaternion_Z = 4;
      case 4: {
        if (tag == 33) {
         parse_HeadOrientationQuaternion_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &headorientationquaternion_z_)));
          set_has_headorientationquaternion_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_HeadTranslationVec_X;
        break;
      }

      // optional double HeadTranslationVec_X = 5;
      case 5: {
        if (tag == 41) {
         parse_HeadTranslationVec_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &headtranslationvec_x_)));
          set_has_headtranslationvec_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_HeadTranslationVec_Y;
        break;
      }

      // optional double HeadTranslationVec_Y = 6;
      case 6: {
        if (tag == 49) {
         parse_HeadTranslationVec_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &headtranslationvec_y_)));
          set_has_headtranslationvec_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_HeadTranslationVec_Z;
        break;
      }

      // optional double HeadTranslationVec_Z = 7;
      case 7: {
        if (tag == 57) {
         parse_HeadTranslationVec_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &headtranslationvec_z_)));
          set_has_headtranslationvec_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_IsDataValid;
        break;
      }

      // optional bool IsDataValid = 8;
      case 8: {
        if (tag == 64) {
         parse_IsDataValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdatavalid_)));
          set_has_isdatavalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ImageNumber;
        break;
      }

      // optional uint32 ImageNumber = 9;
      case 9: {
        if (tag == 72) {
         parse_ImageNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imagenumber_)));
          set_has_imagenumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_ImageCaptureTimeStampSec;
        break;
      }

      // optional double ImageCaptureTimeStampSec = 10;
      case 10: {
        if (tag == 81) {
         parse_ImageCaptureTimeStampSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &imagecapturetimestampsec_)));
          set_has_imagecapturetimestampsec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_VidereTimeStampSec;
        break;
      }

      // optional double VidereTimeStampSec = 11;
      case 11: {
        if (tag == 89) {
         parse_VidereTimeStampSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &videretimestampsec_)));
          set_has_videretimestampsec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_CovarianceNorm;
        break;
      }

      // optional double CovarianceNorm = 12;
      case 12: {
        if (tag == 97) {
         parse_CovarianceNorm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &covariancenorm_)));
          set_has_covariancenorm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.TrackHeadOrientationPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.TrackHeadOrientationPBMsg)
  return false;
#undef DO_
}

void TrackHeadOrientationPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.TrackHeadOrientationPBMsg)
  // optional double HeadOrientationQuaternion_W = 1;
  if (has_headorientationquaternion_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->headorientationquaternion_w(), output);
  }

  // optional double HeadOrientationQuaternion_X = 2;
  if (has_headorientationquaternion_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->headorientationquaternion_x(), output);
  }

  // optional double HeadOrientationQuaternion_Y = 3;
  if (has_headorientationquaternion_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->headorientationquaternion_y(), output);
  }

  // optional double HeadOrientationQuaternion_Z = 4;
  if (has_headorientationquaternion_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->headorientationquaternion_z(), output);
  }

  // optional double HeadTranslationVec_X = 5;
  if (has_headtranslationvec_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->headtranslationvec_x(), output);
  }

  // optional double HeadTranslationVec_Y = 6;
  if (has_headtranslationvec_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->headtranslationvec_y(), output);
  }

  // optional double HeadTranslationVec_Z = 7;
  if (has_headtranslationvec_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->headtranslationvec_z(), output);
  }

  // optional bool IsDataValid = 8;
  if (has_isdatavalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isdatavalid(), output);
  }

  // optional uint32 ImageNumber = 9;
  if (has_imagenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->imagenumber(), output);
  }

  // optional double ImageCaptureTimeStampSec = 10;
  if (has_imagecapturetimestampsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->imagecapturetimestampsec(), output);
  }

  // optional double VidereTimeStampSec = 11;
  if (has_videretimestampsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->videretimestampsec(), output);
  }

  // optional double CovarianceNorm = 12;
  if (has_covariancenorm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->covariancenorm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.TrackHeadOrientationPBMsg)
}

::google::protobuf::uint8* TrackHeadOrientationPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.TrackHeadOrientationPBMsg)
  // optional double HeadOrientationQuaternion_W = 1;
  if (has_headorientationquaternion_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->headorientationquaternion_w(), target);
  }

  // optional double HeadOrientationQuaternion_X = 2;
  if (has_headorientationquaternion_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->headorientationquaternion_x(), target);
  }

  // optional double HeadOrientationQuaternion_Y = 3;
  if (has_headorientationquaternion_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->headorientationquaternion_y(), target);
  }

  // optional double HeadOrientationQuaternion_Z = 4;
  if (has_headorientationquaternion_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->headorientationquaternion_z(), target);
  }

  // optional double HeadTranslationVec_X = 5;
  if (has_headtranslationvec_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->headtranslationvec_x(), target);
  }

  // optional double HeadTranslationVec_Y = 6;
  if (has_headtranslationvec_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->headtranslationvec_y(), target);
  }

  // optional double HeadTranslationVec_Z = 7;
  if (has_headtranslationvec_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->headtranslationvec_z(), target);
  }

  // optional bool IsDataValid = 8;
  if (has_isdatavalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isdatavalid(), target);
  }

  // optional uint32 ImageNumber = 9;
  if (has_imagenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->imagenumber(), target);
  }

  // optional double ImageCaptureTimeStampSec = 10;
  if (has_imagecapturetimestampsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->imagecapturetimestampsec(), target);
  }

  // optional double VidereTimeStampSec = 11;
  if (has_videretimestampsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->videretimestampsec(), target);
  }

  // optional double CovarianceNorm = 12;
  if (has_covariancenorm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->covariancenorm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.TrackHeadOrientationPBMsg)
  return target;
}

int TrackHeadOrientationPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.TrackHeadOrientationPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double HeadOrientationQuaternion_W = 1;
    if (has_headorientationquaternion_w()) {
      total_size += 1 + 8;
    }

    // optional double HeadOrientationQuaternion_X = 2;
    if (has_headorientationquaternion_x()) {
      total_size += 1 + 8;
    }

    // optional double HeadOrientationQuaternion_Y = 3;
    if (has_headorientationquaternion_y()) {
      total_size += 1 + 8;
    }

    // optional double HeadOrientationQuaternion_Z = 4;
    if (has_headorientationquaternion_z()) {
      total_size += 1 + 8;
    }

    // optional double HeadTranslationVec_X = 5;
    if (has_headtranslationvec_x()) {
      total_size += 1 + 8;
    }

    // optional double HeadTranslationVec_Y = 6;
    if (has_headtranslationvec_y()) {
      total_size += 1 + 8;
    }

    // optional double HeadTranslationVec_Z = 7;
    if (has_headtranslationvec_z()) {
      total_size += 1 + 8;
    }

    // optional bool IsDataValid = 8;
    if (has_isdatavalid()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 ImageNumber = 9;
    if (has_imagenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imagenumber());
    }

    // optional double ImageCaptureTimeStampSec = 10;
    if (has_imagecapturetimestampsec()) {
      total_size += 1 + 8;
    }

    // optional double VidereTimeStampSec = 11;
    if (has_videretimestampsec()) {
      total_size += 1 + 8;
    }

    // optional double CovarianceNorm = 12;
    if (has_covariancenorm()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackHeadOrientationPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.TrackHeadOrientationPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrackHeadOrientationPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackHeadOrientationPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.TrackHeadOrientationPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.TrackHeadOrientationPBMsg)
    MergeFrom(*source);
  }
}

void TrackHeadOrientationPBMsg::MergeFrom(const TrackHeadOrientationPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.TrackHeadOrientationPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_headorientationquaternion_w()) {
      set_headorientationquaternion_w(from.headorientationquaternion_w());
    }
    if (from.has_headorientationquaternion_x()) {
      set_headorientationquaternion_x(from.headorientationquaternion_x());
    }
    if (from.has_headorientationquaternion_y()) {
      set_headorientationquaternion_y(from.headorientationquaternion_y());
    }
    if (from.has_headorientationquaternion_z()) {
      set_headorientationquaternion_z(from.headorientationquaternion_z());
    }
    if (from.has_headtranslationvec_x()) {
      set_headtranslationvec_x(from.headtranslationvec_x());
    }
    if (from.has_headtranslationvec_y()) {
      set_headtranslationvec_y(from.headtranslationvec_y());
    }
    if (from.has_headtranslationvec_z()) {
      set_headtranslationvec_z(from.headtranslationvec_z());
    }
    if (from.has_isdatavalid()) {
      set_isdatavalid(from.isdatavalid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_imagenumber()) {
      set_imagenumber(from.imagenumber());
    }
    if (from.has_imagecapturetimestampsec()) {
      set_imagecapturetimestampsec(from.imagecapturetimestampsec());
    }
    if (from.has_videretimestampsec()) {
      set_videretimestampsec(from.videretimestampsec());
    }
    if (from.has_covariancenorm()) {
      set_covariancenorm(from.covariancenorm());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrackHeadOrientationPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.TrackHeadOrientationPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackHeadOrientationPBMsg::CopyFrom(const TrackHeadOrientationPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.TrackHeadOrientationPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackHeadOrientationPBMsg::IsInitialized() const {

  return true;
}

void TrackHeadOrientationPBMsg::Swap(TrackHeadOrientationPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackHeadOrientationPBMsg::InternalSwap(TrackHeadOrientationPBMsg* other) {
  std::swap(headorientationquaternion_w_, other->headorientationquaternion_w_);
  std::swap(headorientationquaternion_x_, other->headorientationquaternion_x_);
  std::swap(headorientationquaternion_y_, other->headorientationquaternion_y_);
  std::swap(headorientationquaternion_z_, other->headorientationquaternion_z_);
  std::swap(headtranslationvec_x_, other->headtranslationvec_x_);
  std::swap(headtranslationvec_y_, other->headtranslationvec_y_);
  std::swap(headtranslationvec_z_, other->headtranslationvec_z_);
  std::swap(isdatavalid_, other->isdatavalid_);
  std::swap(imagenumber_, other->imagenumber_);
  std::swap(imagecapturetimestampsec_, other->imagecapturetimestampsec_);
  std::swap(videretimestampsec_, other->videretimestampsec_);
  std::swap(covariancenorm_, other->covariancenorm_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackHeadOrientationPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackHeadOrientationPBMsg_descriptor_;
  metadata.reflection = TrackHeadOrientationPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackHeadOrientationPBMsg

// optional double HeadOrientationQuaternion_W = 1;
bool TrackHeadOrientationPBMsg::has_headorientationquaternion_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrackHeadOrientationPBMsg::set_has_headorientationquaternion_w() {
  _has_bits_[0] |= 0x00000001u;
}
void TrackHeadOrientationPBMsg::clear_has_headorientationquaternion_w() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrackHeadOrientationPBMsg::clear_headorientationquaternion_w() {
  headorientationquaternion_w_ = 0;
  clear_has_headorientationquaternion_w();
}
 double TrackHeadOrientationPBMsg::headorientationquaternion_w() const {
  // @@protoc_insertion_point(field_get:vision_messages.TrackHeadOrientationPBMsg.HeadOrientationQuaternion_W)
  return headorientationquaternion_w_;
}
 void TrackHeadOrientationPBMsg::set_headorientationquaternion_w(double value) {
  set_has_headorientationquaternion_w();
  headorientationquaternion_w_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.TrackHeadOrientationPBMsg.HeadOrientationQuaternion_W)
}

// optional double HeadOrientationQuaternion_X = 2;
bool TrackHeadOrientationPBMsg::has_headorientationquaternion_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrackHeadOrientationPBMsg::set_has_headorientationquaternion_x() {
  _has_bits_[0] |= 0x00000002u;
}
void TrackHeadOrientationPBMsg::clear_has_headorientationquaternion_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrackHeadOrientationPBMsg::clear_headorientationquaternion_x() {
  headorientationquaternion_x_ = 0;
  clear_has_headorientationquaternion_x();
}
 double TrackHeadOrientationPBMsg::headorientationquaternion_x() const {
  // @@protoc_insertion_point(field_get:vision_messages.TrackHeadOrientationPBMsg.HeadOrientationQuaternion_X)
  return headorientationquaternion_x_;
}
 void TrackHeadOrientationPBMsg::set_headorientationquaternion_x(double value) {
  set_has_headorientationquaternion_x();
  headorientationquaternion_x_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.TrackHeadOrientationPBMsg.HeadOrientationQuaternion_X)
}

// optional double HeadOrientationQuaternion_Y = 3;
bool TrackHeadOrientationPBMsg::has_headorientationquaternion_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrackHeadOrientationPBMsg::set_has_headorientationquaternion_y() {
  _has_bits_[0] |= 0x00000004u;
}
void TrackHeadOrientationPBMsg::clear_has_headorientationquaternion_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrackHeadOrientationPBMsg::clear_headorientationquaternion_y() {
  headorientationquaternion_y_ = 0;
  clear_has_headorientationquaternion_y();
}
 double TrackHeadOrientationPBMsg::headorientationquaternion_y() const {
  // @@protoc_insertion_point(field_get:vision_messages.TrackHeadOrientationPBMsg.HeadOrientationQuaternion_Y)
  return headorientationquaternion_y_;
}
 void TrackHeadOrientationPBMsg::set_headorientationquaternion_y(double value) {
  set_has_headorientationquaternion_y();
  headorientationquaternion_y_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.TrackHeadOrientationPBMsg.HeadOrientationQuaternion_Y)
}

// optional double HeadOrientationQuaternion_Z = 4;
bool TrackHeadOrientationPBMsg::has_headorientationquaternion_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrackHeadOrientationPBMsg::set_has_headorientationquaternion_z() {
  _has_bits_[0] |= 0x00000008u;
}
void TrackHeadOrientationPBMsg::clear_has_headorientationquaternion_z() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrackHeadOrientationPBMsg::clear_headorientationquaternion_z() {
  headorientationquaternion_z_ = 0;
  clear_has_headorientationquaternion_z();
}
 double TrackHeadOrientationPBMsg::headorientationquaternion_z() const {
  // @@protoc_insertion_point(field_get:vision_messages.TrackHeadOrientationPBMsg.HeadOrientationQuaternion_Z)
  return headorientationquaternion_z_;
}
 void TrackHeadOrientationPBMsg::set_headorientationquaternion_z(double value) {
  set_has_headorientationquaternion_z();
  headorientationquaternion_z_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.TrackHeadOrientationPBMsg.HeadOrientationQuaternion_Z)
}

// optional double HeadTranslationVec_X = 5;
bool TrackHeadOrientationPBMsg::has_headtranslationvec_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TrackHeadOrientationPBMsg::set_has_headtranslationvec_x() {
  _has_bits_[0] |= 0x00000010u;
}
void TrackHeadOrientationPBMsg::clear_has_headtranslationvec_x() {
  _has_bits_[0] &= ~0x00000010u;
}
void TrackHeadOrientationPBMsg::clear_headtranslationvec_x() {
  headtranslationvec_x_ = 0;
  clear_has_headtranslationvec_x();
}
 double TrackHeadOrientationPBMsg::headtranslationvec_x() const {
  // @@protoc_insertion_point(field_get:vision_messages.TrackHeadOrientationPBMsg.HeadTranslationVec_X)
  return headtranslationvec_x_;
}
 void TrackHeadOrientationPBMsg::set_headtranslationvec_x(double value) {
  set_has_headtranslationvec_x();
  headtranslationvec_x_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.TrackHeadOrientationPBMsg.HeadTranslationVec_X)
}

// optional double HeadTranslationVec_Y = 6;
bool TrackHeadOrientationPBMsg::has_headtranslationvec_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TrackHeadOrientationPBMsg::set_has_headtranslationvec_y() {
  _has_bits_[0] |= 0x00000020u;
}
void TrackHeadOrientationPBMsg::clear_has_headtranslationvec_y() {
  _has_bits_[0] &= ~0x00000020u;
}
void TrackHeadOrientationPBMsg::clear_headtranslationvec_y() {
  headtranslationvec_y_ = 0;
  clear_has_headtranslationvec_y();
}
 double TrackHeadOrientationPBMsg::headtranslationvec_y() const {
  // @@protoc_insertion_point(field_get:vision_messages.TrackHeadOrientationPBMsg.HeadTranslationVec_Y)
  return headtranslationvec_y_;
}
 void TrackHeadOrientationPBMsg::set_headtranslationvec_y(double value) {
  set_has_headtranslationvec_y();
  headtranslationvec_y_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.TrackHeadOrientationPBMsg.HeadTranslationVec_Y)
}

// optional double HeadTranslationVec_Z = 7;
bool TrackHeadOrientationPBMsg::has_headtranslationvec_z() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TrackHeadOrientationPBMsg::set_has_headtranslationvec_z() {
  _has_bits_[0] |= 0x00000040u;
}
void TrackHeadOrientationPBMsg::clear_has_headtranslationvec_z() {
  _has_bits_[0] &= ~0x00000040u;
}
void TrackHeadOrientationPBMsg::clear_headtranslationvec_z() {
  headtranslationvec_z_ = 0;
  clear_has_headtranslationvec_z();
}
 double TrackHeadOrientationPBMsg::headtranslationvec_z() const {
  // @@protoc_insertion_point(field_get:vision_messages.TrackHeadOrientationPBMsg.HeadTranslationVec_Z)
  return headtranslationvec_z_;
}
 void TrackHeadOrientationPBMsg::set_headtranslationvec_z(double value) {
  set_has_headtranslationvec_z();
  headtranslationvec_z_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.TrackHeadOrientationPBMsg.HeadTranslationVec_Z)
}

// optional bool IsDataValid = 8;
bool TrackHeadOrientationPBMsg::has_isdatavalid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TrackHeadOrientationPBMsg::set_has_isdatavalid() {
  _has_bits_[0] |= 0x00000080u;
}
void TrackHeadOrientationPBMsg::clear_has_isdatavalid() {
  _has_bits_[0] &= ~0x00000080u;
}
void TrackHeadOrientationPBMsg::clear_isdatavalid() {
  isdatavalid_ = false;
  clear_has_isdatavalid();
}
 bool TrackHeadOrientationPBMsg::isdatavalid() const {
  // @@protoc_insertion_point(field_get:vision_messages.TrackHeadOrientationPBMsg.IsDataValid)
  return isdatavalid_;
}
 void TrackHeadOrientationPBMsg::set_isdatavalid(bool value) {
  set_has_isdatavalid();
  isdatavalid_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.TrackHeadOrientationPBMsg.IsDataValid)
}

// optional uint32 ImageNumber = 9;
bool TrackHeadOrientationPBMsg::has_imagenumber() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TrackHeadOrientationPBMsg::set_has_imagenumber() {
  _has_bits_[0] |= 0x00000100u;
}
void TrackHeadOrientationPBMsg::clear_has_imagenumber() {
  _has_bits_[0] &= ~0x00000100u;
}
void TrackHeadOrientationPBMsg::clear_imagenumber() {
  imagenumber_ = 0u;
  clear_has_imagenumber();
}
 ::google::protobuf::uint32 TrackHeadOrientationPBMsg::imagenumber() const {
  // @@protoc_insertion_point(field_get:vision_messages.TrackHeadOrientationPBMsg.ImageNumber)
  return imagenumber_;
}
 void TrackHeadOrientationPBMsg::set_imagenumber(::google::protobuf::uint32 value) {
  set_has_imagenumber();
  imagenumber_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.TrackHeadOrientationPBMsg.ImageNumber)
}

// optional double ImageCaptureTimeStampSec = 10;
bool TrackHeadOrientationPBMsg::has_imagecapturetimestampsec() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TrackHeadOrientationPBMsg::set_has_imagecapturetimestampsec() {
  _has_bits_[0] |= 0x00000200u;
}
void TrackHeadOrientationPBMsg::clear_has_imagecapturetimestampsec() {
  _has_bits_[0] &= ~0x00000200u;
}
void TrackHeadOrientationPBMsg::clear_imagecapturetimestampsec() {
  imagecapturetimestampsec_ = 0;
  clear_has_imagecapturetimestampsec();
}
 double TrackHeadOrientationPBMsg::imagecapturetimestampsec() const {
  // @@protoc_insertion_point(field_get:vision_messages.TrackHeadOrientationPBMsg.ImageCaptureTimeStampSec)
  return imagecapturetimestampsec_;
}
 void TrackHeadOrientationPBMsg::set_imagecapturetimestampsec(double value) {
  set_has_imagecapturetimestampsec();
  imagecapturetimestampsec_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.TrackHeadOrientationPBMsg.ImageCaptureTimeStampSec)
}

// optional double VidereTimeStampSec = 11;
bool TrackHeadOrientationPBMsg::has_videretimestampsec() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TrackHeadOrientationPBMsg::set_has_videretimestampsec() {
  _has_bits_[0] |= 0x00000400u;
}
void TrackHeadOrientationPBMsg::clear_has_videretimestampsec() {
  _has_bits_[0] &= ~0x00000400u;
}
void TrackHeadOrientationPBMsg::clear_videretimestampsec() {
  videretimestampsec_ = 0;
  clear_has_videretimestampsec();
}
 double TrackHeadOrientationPBMsg::videretimestampsec() const {
  // @@protoc_insertion_point(field_get:vision_messages.TrackHeadOrientationPBMsg.VidereTimeStampSec)
  return videretimestampsec_;
}
 void TrackHeadOrientationPBMsg::set_videretimestampsec(double value) {
  set_has_videretimestampsec();
  videretimestampsec_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.TrackHeadOrientationPBMsg.VidereTimeStampSec)
}

// optional double CovarianceNorm = 12;
bool TrackHeadOrientationPBMsg::has_covariancenorm() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TrackHeadOrientationPBMsg::set_has_covariancenorm() {
  _has_bits_[0] |= 0x00000800u;
}
void TrackHeadOrientationPBMsg::clear_has_covariancenorm() {
  _has_bits_[0] &= ~0x00000800u;
}
void TrackHeadOrientationPBMsg::clear_covariancenorm() {
  covariancenorm_ = 0;
  clear_has_covariancenorm();
}
 double TrackHeadOrientationPBMsg::covariancenorm() const {
  // @@protoc_insertion_point(field_get:vision_messages.TrackHeadOrientationPBMsg.CovarianceNorm)
  return covariancenorm_;
}
 void TrackHeadOrientationPBMsg::set_covariancenorm(double value) {
  set_has_covariancenorm();
  covariancenorm_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.TrackHeadOrientationPBMsg.CovarianceNorm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUAccelGyroDataPBMsg::kIMULocationFieldNumber;
const int IMUAccelGyroDataPBMsg::kIMUTimeStampSecFieldNumber;
const int IMUAccelGyroDataPBMsg::kVidereTimeStampSecFieldNumber;
const int IMUAccelGyroDataPBMsg::kAccelMPS2XFieldNumber;
const int IMUAccelGyroDataPBMsg::kAccelMPS2YFieldNumber;
const int IMUAccelGyroDataPBMsg::kAccelMPS2ZFieldNumber;
const int IMUAccelGyroDataPBMsg::kGyroRadPerSecXFieldNumber;
const int IMUAccelGyroDataPBMsg::kGyroRadPerSecYFieldNumber;
const int IMUAccelGyroDataPBMsg::kGyroRadPerSecZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUAccelGyroDataPBMsg::IMUAccelGyroDataPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.IMUAccelGyroDataPBMsg)
}

void IMUAccelGyroDataPBMsg::InitAsDefaultInstance() {
}

IMUAccelGyroDataPBMsg::IMUAccelGyroDataPBMsg(const IMUAccelGyroDataPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.IMUAccelGyroDataPBMsg)
}

void IMUAccelGyroDataPBMsg::SharedCtor() {
  _cached_size_ = 0;
  imulocation_ = 0;
  imutimestampsec_ = 0;
  videretimestampsec_ = 0;
  accelmps2_x_ = 0;
  accelmps2_y_ = 0;
  accelmps2_z_ = 0;
  gyroradpersec_x_ = 0;
  gyroradpersec_y_ = 0;
  gyroradpersec_z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUAccelGyroDataPBMsg::~IMUAccelGyroDataPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.IMUAccelGyroDataPBMsg)
  SharedDtor();
}

void IMUAccelGyroDataPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IMUAccelGyroDataPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMUAccelGyroDataPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMUAccelGyroDataPBMsg_descriptor_;
}

const IMUAccelGyroDataPBMsg& IMUAccelGyroDataPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

IMUAccelGyroDataPBMsg* IMUAccelGyroDataPBMsg::default_instance_ = NULL;

IMUAccelGyroDataPBMsg* IMUAccelGyroDataPBMsg::New(::google::protobuf::Arena* arena) const {
  IMUAccelGyroDataPBMsg* n = new IMUAccelGyroDataPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMUAccelGyroDataPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.IMUAccelGyroDataPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMUAccelGyroDataPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMUAccelGyroDataPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(imutimestampsec_, gyroradpersec_y_);
    imulocation_ = 0;
  }
  gyroradpersec_z_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IMUAccelGyroDataPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.IMUAccelGyroDataPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 IMULocation = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imulocation_)));
          set_has_imulocation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_IMUTimeStampSec;
        break;
      }

      // optional double IMUTimeStampSec = 2;
      case 2: {
        if (tag == 17) {
         parse_IMUTimeStampSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &imutimestampsec_)));
          set_has_imutimestampsec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_VidereTimeStampSec;
        break;
      }

      // optional double VidereTimeStampSec = 3;
      case 3: {
        if (tag == 25) {
         parse_VidereTimeStampSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &videretimestampsec_)));
          set_has_videretimestampsec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_AccelMPS2_X;
        break;
      }

      // optional double AccelMPS2_X = 4;
      case 4: {
        if (tag == 33) {
         parse_AccelMPS2_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelmps2_x_)));
          set_has_accelmps2_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_AccelMPS2_Y;
        break;
      }

      // optional double AccelMPS2_Y = 5;
      case 5: {
        if (tag == 41) {
         parse_AccelMPS2_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelmps2_y_)));
          set_has_accelmps2_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_AccelMPS2_Z;
        break;
      }

      // optional double AccelMPS2_Z = 6;
      case 6: {
        if (tag == 49) {
         parse_AccelMPS2_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelmps2_z_)));
          set_has_accelmps2_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_GyroRadPerSec_X;
        break;
      }

      // optional double GyroRadPerSec_X = 7;
      case 7: {
        if (tag == 57) {
         parse_GyroRadPerSec_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyroradpersec_x_)));
          set_has_gyroradpersec_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_GyroRadPerSec_Y;
        break;
      }

      // optional double GyroRadPerSec_Y = 8;
      case 8: {
        if (tag == 65) {
         parse_GyroRadPerSec_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyroradpersec_y_)));
          set_has_gyroradpersec_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_GyroRadPerSec_Z;
        break;
      }

      // optional double GyroRadPerSec_Z = 9;
      case 9: {
        if (tag == 73) {
         parse_GyroRadPerSec_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyroradpersec_z_)));
          set_has_gyroradpersec_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.IMUAccelGyroDataPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.IMUAccelGyroDataPBMsg)
  return false;
#undef DO_
}

void IMUAccelGyroDataPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.IMUAccelGyroDataPBMsg)
  // optional int32 IMULocation = 1;
  if (has_imulocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->imulocation(), output);
  }

  // optional double IMUTimeStampSec = 2;
  if (has_imutimestampsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->imutimestampsec(), output);
  }

  // optional double VidereTimeStampSec = 3;
  if (has_videretimestampsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->videretimestampsec(), output);
  }

  // optional double AccelMPS2_X = 4;
  if (has_accelmps2_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->accelmps2_x(), output);
  }

  // optional double AccelMPS2_Y = 5;
  if (has_accelmps2_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->accelmps2_y(), output);
  }

  // optional double AccelMPS2_Z = 6;
  if (has_accelmps2_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->accelmps2_z(), output);
  }

  // optional double GyroRadPerSec_X = 7;
  if (has_gyroradpersec_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->gyroradpersec_x(), output);
  }

  // optional double GyroRadPerSec_Y = 8;
  if (has_gyroradpersec_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->gyroradpersec_y(), output);
  }

  // optional double GyroRadPerSec_Z = 9;
  if (has_gyroradpersec_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->gyroradpersec_z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.IMUAccelGyroDataPBMsg)
}

::google::protobuf::uint8* IMUAccelGyroDataPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.IMUAccelGyroDataPBMsg)
  // optional int32 IMULocation = 1;
  if (has_imulocation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->imulocation(), target);
  }

  // optional double IMUTimeStampSec = 2;
  if (has_imutimestampsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->imutimestampsec(), target);
  }

  // optional double VidereTimeStampSec = 3;
  if (has_videretimestampsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->videretimestampsec(), target);
  }

  // optional double AccelMPS2_X = 4;
  if (has_accelmps2_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->accelmps2_x(), target);
  }

  // optional double AccelMPS2_Y = 5;
  if (has_accelmps2_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->accelmps2_y(), target);
  }

  // optional double AccelMPS2_Z = 6;
  if (has_accelmps2_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->accelmps2_z(), target);
  }

  // optional double GyroRadPerSec_X = 7;
  if (has_gyroradpersec_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->gyroradpersec_x(), target);
  }

  // optional double GyroRadPerSec_Y = 8;
  if (has_gyroradpersec_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->gyroradpersec_y(), target);
  }

  // optional double GyroRadPerSec_Z = 9;
  if (has_gyroradpersec_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->gyroradpersec_z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.IMUAccelGyroDataPBMsg)
  return target;
}

int IMUAccelGyroDataPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.IMUAccelGyroDataPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 IMULocation = 1;
    if (has_imulocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imulocation());
    }

    // optional double IMUTimeStampSec = 2;
    if (has_imutimestampsec()) {
      total_size += 1 + 8;
    }

    // optional double VidereTimeStampSec = 3;
    if (has_videretimestampsec()) {
      total_size += 1 + 8;
    }

    // optional double AccelMPS2_X = 4;
    if (has_accelmps2_x()) {
      total_size += 1 + 8;
    }

    // optional double AccelMPS2_Y = 5;
    if (has_accelmps2_y()) {
      total_size += 1 + 8;
    }

    // optional double AccelMPS2_Z = 6;
    if (has_accelmps2_z()) {
      total_size += 1 + 8;
    }

    // optional double GyroRadPerSec_X = 7;
    if (has_gyroradpersec_x()) {
      total_size += 1 + 8;
    }

    // optional double GyroRadPerSec_Y = 8;
    if (has_gyroradpersec_y()) {
      total_size += 1 + 8;
    }

  }
  // optional double GyroRadPerSec_Z = 9;
  if (has_gyroradpersec_z()) {
    total_size += 1 + 8;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUAccelGyroDataPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.IMUAccelGyroDataPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IMUAccelGyroDataPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IMUAccelGyroDataPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.IMUAccelGyroDataPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.IMUAccelGyroDataPBMsg)
    MergeFrom(*source);
  }
}

void IMUAccelGyroDataPBMsg::MergeFrom(const IMUAccelGyroDataPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.IMUAccelGyroDataPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imulocation()) {
      set_imulocation(from.imulocation());
    }
    if (from.has_imutimestampsec()) {
      set_imutimestampsec(from.imutimestampsec());
    }
    if (from.has_videretimestampsec()) {
      set_videretimestampsec(from.videretimestampsec());
    }
    if (from.has_accelmps2_x()) {
      set_accelmps2_x(from.accelmps2_x());
    }
    if (from.has_accelmps2_y()) {
      set_accelmps2_y(from.accelmps2_y());
    }
    if (from.has_accelmps2_z()) {
      set_accelmps2_z(from.accelmps2_z());
    }
    if (from.has_gyroradpersec_x()) {
      set_gyroradpersec_x(from.gyroradpersec_x());
    }
    if (from.has_gyroradpersec_y()) {
      set_gyroradpersec_y(from.gyroradpersec_y());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gyroradpersec_z()) {
      set_gyroradpersec_z(from.gyroradpersec_z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IMUAccelGyroDataPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.IMUAccelGyroDataPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUAccelGyroDataPBMsg::CopyFrom(const IMUAccelGyroDataPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.IMUAccelGyroDataPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUAccelGyroDataPBMsg::IsInitialized() const {

  return true;
}

void IMUAccelGyroDataPBMsg::Swap(IMUAccelGyroDataPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUAccelGyroDataPBMsg::InternalSwap(IMUAccelGyroDataPBMsg* other) {
  std::swap(imulocation_, other->imulocation_);
  std::swap(imutimestampsec_, other->imutimestampsec_);
  std::swap(videretimestampsec_, other->videretimestampsec_);
  std::swap(accelmps2_x_, other->accelmps2_x_);
  std::swap(accelmps2_y_, other->accelmps2_y_);
  std::swap(accelmps2_z_, other->accelmps2_z_);
  std::swap(gyroradpersec_x_, other->gyroradpersec_x_);
  std::swap(gyroradpersec_y_, other->gyroradpersec_y_);
  std::swap(gyroradpersec_z_, other->gyroradpersec_z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMUAccelGyroDataPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMUAccelGyroDataPBMsg_descriptor_;
  metadata.reflection = IMUAccelGyroDataPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMUAccelGyroDataPBMsg

// optional int32 IMULocation = 1;
bool IMUAccelGyroDataPBMsg::has_imulocation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMUAccelGyroDataPBMsg::set_has_imulocation() {
  _has_bits_[0] |= 0x00000001u;
}
void IMUAccelGyroDataPBMsg::clear_has_imulocation() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMUAccelGyroDataPBMsg::clear_imulocation() {
  imulocation_ = 0;
  clear_has_imulocation();
}
 ::google::protobuf::int32 IMUAccelGyroDataPBMsg::imulocation() const {
  // @@protoc_insertion_point(field_get:vision_messages.IMUAccelGyroDataPBMsg.IMULocation)
  return imulocation_;
}
 void IMUAccelGyroDataPBMsg::set_imulocation(::google::protobuf::int32 value) {
  set_has_imulocation();
  imulocation_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.IMUAccelGyroDataPBMsg.IMULocation)
}

// optional double IMUTimeStampSec = 2;
bool IMUAccelGyroDataPBMsg::has_imutimestampsec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMUAccelGyroDataPBMsg::set_has_imutimestampsec() {
  _has_bits_[0] |= 0x00000002u;
}
void IMUAccelGyroDataPBMsg::clear_has_imutimestampsec() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMUAccelGyroDataPBMsg::clear_imutimestampsec() {
  imutimestampsec_ = 0;
  clear_has_imutimestampsec();
}
 double IMUAccelGyroDataPBMsg::imutimestampsec() const {
  // @@protoc_insertion_point(field_get:vision_messages.IMUAccelGyroDataPBMsg.IMUTimeStampSec)
  return imutimestampsec_;
}
 void IMUAccelGyroDataPBMsg::set_imutimestampsec(double value) {
  set_has_imutimestampsec();
  imutimestampsec_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.IMUAccelGyroDataPBMsg.IMUTimeStampSec)
}

// optional double VidereTimeStampSec = 3;
bool IMUAccelGyroDataPBMsg::has_videretimestampsec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMUAccelGyroDataPBMsg::set_has_videretimestampsec() {
  _has_bits_[0] |= 0x00000004u;
}
void IMUAccelGyroDataPBMsg::clear_has_videretimestampsec() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMUAccelGyroDataPBMsg::clear_videretimestampsec() {
  videretimestampsec_ = 0;
  clear_has_videretimestampsec();
}
 double IMUAccelGyroDataPBMsg::videretimestampsec() const {
  // @@protoc_insertion_point(field_get:vision_messages.IMUAccelGyroDataPBMsg.VidereTimeStampSec)
  return videretimestampsec_;
}
 void IMUAccelGyroDataPBMsg::set_videretimestampsec(double value) {
  set_has_videretimestampsec();
  videretimestampsec_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.IMUAccelGyroDataPBMsg.VidereTimeStampSec)
}

// optional double AccelMPS2_X = 4;
bool IMUAccelGyroDataPBMsg::has_accelmps2_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMUAccelGyroDataPBMsg::set_has_accelmps2_x() {
  _has_bits_[0] |= 0x00000008u;
}
void IMUAccelGyroDataPBMsg::clear_has_accelmps2_x() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMUAccelGyroDataPBMsg::clear_accelmps2_x() {
  accelmps2_x_ = 0;
  clear_has_accelmps2_x();
}
 double IMUAccelGyroDataPBMsg::accelmps2_x() const {
  // @@protoc_insertion_point(field_get:vision_messages.IMUAccelGyroDataPBMsg.AccelMPS2_X)
  return accelmps2_x_;
}
 void IMUAccelGyroDataPBMsg::set_accelmps2_x(double value) {
  set_has_accelmps2_x();
  accelmps2_x_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.IMUAccelGyroDataPBMsg.AccelMPS2_X)
}

// optional double AccelMPS2_Y = 5;
bool IMUAccelGyroDataPBMsg::has_accelmps2_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IMUAccelGyroDataPBMsg::set_has_accelmps2_y() {
  _has_bits_[0] |= 0x00000010u;
}
void IMUAccelGyroDataPBMsg::clear_has_accelmps2_y() {
  _has_bits_[0] &= ~0x00000010u;
}
void IMUAccelGyroDataPBMsg::clear_accelmps2_y() {
  accelmps2_y_ = 0;
  clear_has_accelmps2_y();
}
 double IMUAccelGyroDataPBMsg::accelmps2_y() const {
  // @@protoc_insertion_point(field_get:vision_messages.IMUAccelGyroDataPBMsg.AccelMPS2_Y)
  return accelmps2_y_;
}
 void IMUAccelGyroDataPBMsg::set_accelmps2_y(double value) {
  set_has_accelmps2_y();
  accelmps2_y_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.IMUAccelGyroDataPBMsg.AccelMPS2_Y)
}

// optional double AccelMPS2_Z = 6;
bool IMUAccelGyroDataPBMsg::has_accelmps2_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void IMUAccelGyroDataPBMsg::set_has_accelmps2_z() {
  _has_bits_[0] |= 0x00000020u;
}
void IMUAccelGyroDataPBMsg::clear_has_accelmps2_z() {
  _has_bits_[0] &= ~0x00000020u;
}
void IMUAccelGyroDataPBMsg::clear_accelmps2_z() {
  accelmps2_z_ = 0;
  clear_has_accelmps2_z();
}
 double IMUAccelGyroDataPBMsg::accelmps2_z() const {
  // @@protoc_insertion_point(field_get:vision_messages.IMUAccelGyroDataPBMsg.AccelMPS2_Z)
  return accelmps2_z_;
}
 void IMUAccelGyroDataPBMsg::set_accelmps2_z(double value) {
  set_has_accelmps2_z();
  accelmps2_z_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.IMUAccelGyroDataPBMsg.AccelMPS2_Z)
}

// optional double GyroRadPerSec_X = 7;
bool IMUAccelGyroDataPBMsg::has_gyroradpersec_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void IMUAccelGyroDataPBMsg::set_has_gyroradpersec_x() {
  _has_bits_[0] |= 0x00000040u;
}
void IMUAccelGyroDataPBMsg::clear_has_gyroradpersec_x() {
  _has_bits_[0] &= ~0x00000040u;
}
void IMUAccelGyroDataPBMsg::clear_gyroradpersec_x() {
  gyroradpersec_x_ = 0;
  clear_has_gyroradpersec_x();
}
 double IMUAccelGyroDataPBMsg::gyroradpersec_x() const {
  // @@protoc_insertion_point(field_get:vision_messages.IMUAccelGyroDataPBMsg.GyroRadPerSec_X)
  return gyroradpersec_x_;
}
 void IMUAccelGyroDataPBMsg::set_gyroradpersec_x(double value) {
  set_has_gyroradpersec_x();
  gyroradpersec_x_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.IMUAccelGyroDataPBMsg.GyroRadPerSec_X)
}

// optional double GyroRadPerSec_Y = 8;
bool IMUAccelGyroDataPBMsg::has_gyroradpersec_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void IMUAccelGyroDataPBMsg::set_has_gyroradpersec_y() {
  _has_bits_[0] |= 0x00000080u;
}
void IMUAccelGyroDataPBMsg::clear_has_gyroradpersec_y() {
  _has_bits_[0] &= ~0x00000080u;
}
void IMUAccelGyroDataPBMsg::clear_gyroradpersec_y() {
  gyroradpersec_y_ = 0;
  clear_has_gyroradpersec_y();
}
 double IMUAccelGyroDataPBMsg::gyroradpersec_y() const {
  // @@protoc_insertion_point(field_get:vision_messages.IMUAccelGyroDataPBMsg.GyroRadPerSec_Y)
  return gyroradpersec_y_;
}
 void IMUAccelGyroDataPBMsg::set_gyroradpersec_y(double value) {
  set_has_gyroradpersec_y();
  gyroradpersec_y_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.IMUAccelGyroDataPBMsg.GyroRadPerSec_Y)
}

// optional double GyroRadPerSec_Z = 9;
bool IMUAccelGyroDataPBMsg::has_gyroradpersec_z() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void IMUAccelGyroDataPBMsg::set_has_gyroradpersec_z() {
  _has_bits_[0] |= 0x00000100u;
}
void IMUAccelGyroDataPBMsg::clear_has_gyroradpersec_z() {
  _has_bits_[0] &= ~0x00000100u;
}
void IMUAccelGyroDataPBMsg::clear_gyroradpersec_z() {
  gyroradpersec_z_ = 0;
  clear_has_gyroradpersec_z();
}
 double IMUAccelGyroDataPBMsg::gyroradpersec_z() const {
  // @@protoc_insertion_point(field_get:vision_messages.IMUAccelGyroDataPBMsg.GyroRadPerSec_Z)
  return gyroradpersec_z_;
}
 void IMUAccelGyroDataPBMsg::set_gyroradpersec_z(double value) {
  set_has_gyroradpersec_z();
  gyroradpersec_z_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.IMUAccelGyroDataPBMsg.GyroRadPerSec_Z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GPSFixPBMsg::kTrackingSatellitesFieldNumber;
const int GPSFixPBMsg::kLatitudeDegFieldNumber;
const int GPSFixPBMsg::kLongitudeDegFieldNumber;
const int GPSFixPBMsg::kAltitudeMSLFieldNumber;
const int GPSFixPBMsg::kPositionXFieldNumber;
const int GPSFixPBMsg::kPositionYFieldNumber;
const int GPSFixPBMsg::kPositionZFieldNumber;
const int GPSFixPBMsg::kVelocityXFieldNumber;
const int GPSFixPBMsg::kVelocityYFieldNumber;
const int GPSFixPBMsg::kVelocityZFieldNumber;
const int GPSFixPBMsg::kGPSTimeStampSecFieldNumber;
const int GPSFixPBMsg::kVidereTimeStampSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GPSFixPBMsg::GPSFixPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.GPSFixPBMsg)
}

void GPSFixPBMsg::InitAsDefaultInstance() {
}

GPSFixPBMsg::GPSFixPBMsg(const GPSFixPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.GPSFixPBMsg)
}

void GPSFixPBMsg::SharedCtor() {
  _cached_size_ = 0;
  trackingsatellites_ = 0;
  latitudedeg_ = 0;
  longitudedeg_ = 0;
  altitudemsl_ = 0;
  position_x_ = 0;
  position_y_ = 0;
  position_z_ = 0;
  velocity_x_ = 0;
  velocity_y_ = 0;
  velocity_z_ = 0;
  gpstimestampsec_ = 0;
  videretimestampsec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPSFixPBMsg::~GPSFixPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.GPSFixPBMsg)
  SharedDtor();
}

void GPSFixPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GPSFixPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPSFixPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPSFixPBMsg_descriptor_;
}

const GPSFixPBMsg& GPSFixPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

GPSFixPBMsg* GPSFixPBMsg::default_instance_ = NULL;

GPSFixPBMsg* GPSFixPBMsg::New(::google::protobuf::Arena* arena) const {
  GPSFixPBMsg* n = new GPSFixPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GPSFixPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.GPSFixPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GPSFixPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GPSFixPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(latitudedeg_, velocity_x_);
    trackingsatellites_ = 0;
  }
  ZR_(velocity_y_, videretimestampsec_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GPSFixPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.GPSFixPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TrackingSatellites = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trackingsatellites_)));
          set_has_trackingsatellites();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_LatitudeDeg;
        break;
      }

      // optional double LatitudeDeg = 2;
      case 2: {
        if (tag == 17) {
         parse_LatitudeDeg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitudedeg_)));
          set_has_latitudedeg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_LongitudeDeg;
        break;
      }

      // optional double LongitudeDeg = 3;
      case 3: {
        if (tag == 25) {
         parse_LongitudeDeg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitudedeg_)));
          set_has_longitudedeg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_AltitudeMSL;
        break;
      }

      // optional double AltitudeMSL = 4;
      case 4: {
        if (tag == 33) {
         parse_AltitudeMSL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitudemsl_)));
          set_has_altitudemsl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_Position_X;
        break;
      }

      // optional double Position_X = 5;
      case 5: {
        if (tag == 41) {
         parse_Position_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_x_)));
          set_has_position_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_Position_Y;
        break;
      }

      // optional double Position_Y = 6;
      case 6: {
        if (tag == 49) {
         parse_Position_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_y_)));
          set_has_position_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_Position_Z;
        break;
      }

      // optional double Position_Z = 7;
      case 7: {
        if (tag == 57) {
         parse_Position_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_z_)));
          set_has_position_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_Velocity_X;
        break;
      }

      // optional double Velocity_X = 8;
      case 8: {
        if (tag == 65) {
         parse_Velocity_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_x_)));
          set_has_velocity_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_Velocity_Y;
        break;
      }

      // optional double Velocity_Y = 9;
      case 9: {
        if (tag == 73) {
         parse_Velocity_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_y_)));
          set_has_velocity_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_Velocity_Z;
        break;
      }

      // optional double Velocity_Z = 10;
      case 10: {
        if (tag == 81) {
         parse_Velocity_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_z_)));
          set_has_velocity_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_GPSTimeStampSec;
        break;
      }

      // optional double GPSTimeStampSec = 11;
      case 11: {
        if (tag == 89) {
         parse_GPSTimeStampSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gpstimestampsec_)));
          set_has_gpstimestampsec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_VidereTimeStampSec;
        break;
      }

      // optional double VidereTimeStampSec = 12;
      case 12: {
        if (tag == 97) {
         parse_VidereTimeStampSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &videretimestampsec_)));
          set_has_videretimestampsec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.GPSFixPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.GPSFixPBMsg)
  return false;
#undef DO_
}

void GPSFixPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.GPSFixPBMsg)
  // optional int32 TrackingSatellites = 1;
  if (has_trackingsatellites()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trackingsatellites(), output);
  }

  // optional double LatitudeDeg = 2;
  if (has_latitudedeg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitudedeg(), output);
  }

  // optional double LongitudeDeg = 3;
  if (has_longitudedeg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitudedeg(), output);
  }

  // optional double AltitudeMSL = 4;
  if (has_altitudemsl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->altitudemsl(), output);
  }

  // optional double Position_X = 5;
  if (has_position_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->position_x(), output);
  }

  // optional double Position_Y = 6;
  if (has_position_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->position_y(), output);
  }

  // optional double Position_Z = 7;
  if (has_position_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->position_z(), output);
  }

  // optional double Velocity_X = 8;
  if (has_velocity_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->velocity_x(), output);
  }

  // optional double Velocity_Y = 9;
  if (has_velocity_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->velocity_y(), output);
  }

  // optional double Velocity_Z = 10;
  if (has_velocity_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->velocity_z(), output);
  }

  // optional double GPSTimeStampSec = 11;
  if (has_gpstimestampsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->gpstimestampsec(), output);
  }

  // optional double VidereTimeStampSec = 12;
  if (has_videretimestampsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->videretimestampsec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.GPSFixPBMsg)
}

::google::protobuf::uint8* GPSFixPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.GPSFixPBMsg)
  // optional int32 TrackingSatellites = 1;
  if (has_trackingsatellites()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trackingsatellites(), target);
  }

  // optional double LatitudeDeg = 2;
  if (has_latitudedeg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitudedeg(), target);
  }

  // optional double LongitudeDeg = 3;
  if (has_longitudedeg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longitudedeg(), target);
  }

  // optional double AltitudeMSL = 4;
  if (has_altitudemsl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->altitudemsl(), target);
  }

  // optional double Position_X = 5;
  if (has_position_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->position_x(), target);
  }

  // optional double Position_Y = 6;
  if (has_position_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->position_y(), target);
  }

  // optional double Position_Z = 7;
  if (has_position_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->position_z(), target);
  }

  // optional double Velocity_X = 8;
  if (has_velocity_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->velocity_x(), target);
  }

  // optional double Velocity_Y = 9;
  if (has_velocity_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->velocity_y(), target);
  }

  // optional double Velocity_Z = 10;
  if (has_velocity_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->velocity_z(), target);
  }

  // optional double GPSTimeStampSec = 11;
  if (has_gpstimestampsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->gpstimestampsec(), target);
  }

  // optional double VidereTimeStampSec = 12;
  if (has_videretimestampsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->videretimestampsec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.GPSFixPBMsg)
  return target;
}

int GPSFixPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.GPSFixPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 TrackingSatellites = 1;
    if (has_trackingsatellites()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trackingsatellites());
    }

    // optional double LatitudeDeg = 2;
    if (has_latitudedeg()) {
      total_size += 1 + 8;
    }

    // optional double LongitudeDeg = 3;
    if (has_longitudedeg()) {
      total_size += 1 + 8;
    }

    // optional double AltitudeMSL = 4;
    if (has_altitudemsl()) {
      total_size += 1 + 8;
    }

    // optional double Position_X = 5;
    if (has_position_x()) {
      total_size += 1 + 8;
    }

    // optional double Position_Y = 6;
    if (has_position_y()) {
      total_size += 1 + 8;
    }

    // optional double Position_Z = 7;
    if (has_position_z()) {
      total_size += 1 + 8;
    }

    // optional double Velocity_X = 8;
    if (has_velocity_x()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double Velocity_Y = 9;
    if (has_velocity_y()) {
      total_size += 1 + 8;
    }

    // optional double Velocity_Z = 10;
    if (has_velocity_z()) {
      total_size += 1 + 8;
    }

    // optional double GPSTimeStampSec = 11;
    if (has_gpstimestampsec()) {
      total_size += 1 + 8;
    }

    // optional double VidereTimeStampSec = 12;
    if (has_videretimestampsec()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPSFixPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.GPSFixPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GPSFixPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GPSFixPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.GPSFixPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.GPSFixPBMsg)
    MergeFrom(*source);
  }
}

void GPSFixPBMsg::MergeFrom(const GPSFixPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.GPSFixPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trackingsatellites()) {
      set_trackingsatellites(from.trackingsatellites());
    }
    if (from.has_latitudedeg()) {
      set_latitudedeg(from.latitudedeg());
    }
    if (from.has_longitudedeg()) {
      set_longitudedeg(from.longitudedeg());
    }
    if (from.has_altitudemsl()) {
      set_altitudemsl(from.altitudemsl());
    }
    if (from.has_position_x()) {
      set_position_x(from.position_x());
    }
    if (from.has_position_y()) {
      set_position_y(from.position_y());
    }
    if (from.has_position_z()) {
      set_position_z(from.position_z());
    }
    if (from.has_velocity_x()) {
      set_velocity_x(from.velocity_x());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_velocity_y()) {
      set_velocity_y(from.velocity_y());
    }
    if (from.has_velocity_z()) {
      set_velocity_z(from.velocity_z());
    }
    if (from.has_gpstimestampsec()) {
      set_gpstimestampsec(from.gpstimestampsec());
    }
    if (from.has_videretimestampsec()) {
      set_videretimestampsec(from.videretimestampsec());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GPSFixPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.GPSFixPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSFixPBMsg::CopyFrom(const GPSFixPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.GPSFixPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSFixPBMsg::IsInitialized() const {

  return true;
}

void GPSFixPBMsg::Swap(GPSFixPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GPSFixPBMsg::InternalSwap(GPSFixPBMsg* other) {
  std::swap(trackingsatellites_, other->trackingsatellites_);
  std::swap(latitudedeg_, other->latitudedeg_);
  std::swap(longitudedeg_, other->longitudedeg_);
  std::swap(altitudemsl_, other->altitudemsl_);
  std::swap(position_x_, other->position_x_);
  std::swap(position_y_, other->position_y_);
  std::swap(position_z_, other->position_z_);
  std::swap(velocity_x_, other->velocity_x_);
  std::swap(velocity_y_, other->velocity_y_);
  std::swap(velocity_z_, other->velocity_z_);
  std::swap(gpstimestampsec_, other->gpstimestampsec_);
  std::swap(videretimestampsec_, other->videretimestampsec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GPSFixPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPSFixPBMsg_descriptor_;
  metadata.reflection = GPSFixPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GPSFixPBMsg

// optional int32 TrackingSatellites = 1;
bool GPSFixPBMsg::has_trackingsatellites() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GPSFixPBMsg::set_has_trackingsatellites() {
  _has_bits_[0] |= 0x00000001u;
}
void GPSFixPBMsg::clear_has_trackingsatellites() {
  _has_bits_[0] &= ~0x00000001u;
}
void GPSFixPBMsg::clear_trackingsatellites() {
  trackingsatellites_ = 0;
  clear_has_trackingsatellites();
}
 ::google::protobuf::int32 GPSFixPBMsg::trackingsatellites() const {
  // @@protoc_insertion_point(field_get:vision_messages.GPSFixPBMsg.TrackingSatellites)
  return trackingsatellites_;
}
 void GPSFixPBMsg::set_trackingsatellites(::google::protobuf::int32 value) {
  set_has_trackingsatellites();
  trackingsatellites_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GPSFixPBMsg.TrackingSatellites)
}

// optional double LatitudeDeg = 2;
bool GPSFixPBMsg::has_latitudedeg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GPSFixPBMsg::set_has_latitudedeg() {
  _has_bits_[0] |= 0x00000002u;
}
void GPSFixPBMsg::clear_has_latitudedeg() {
  _has_bits_[0] &= ~0x00000002u;
}
void GPSFixPBMsg::clear_latitudedeg() {
  latitudedeg_ = 0;
  clear_has_latitudedeg();
}
 double GPSFixPBMsg::latitudedeg() const {
  // @@protoc_insertion_point(field_get:vision_messages.GPSFixPBMsg.LatitudeDeg)
  return latitudedeg_;
}
 void GPSFixPBMsg::set_latitudedeg(double value) {
  set_has_latitudedeg();
  latitudedeg_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GPSFixPBMsg.LatitudeDeg)
}

// optional double LongitudeDeg = 3;
bool GPSFixPBMsg::has_longitudedeg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GPSFixPBMsg::set_has_longitudedeg() {
  _has_bits_[0] |= 0x00000004u;
}
void GPSFixPBMsg::clear_has_longitudedeg() {
  _has_bits_[0] &= ~0x00000004u;
}
void GPSFixPBMsg::clear_longitudedeg() {
  longitudedeg_ = 0;
  clear_has_longitudedeg();
}
 double GPSFixPBMsg::longitudedeg() const {
  // @@protoc_insertion_point(field_get:vision_messages.GPSFixPBMsg.LongitudeDeg)
  return longitudedeg_;
}
 void GPSFixPBMsg::set_longitudedeg(double value) {
  set_has_longitudedeg();
  longitudedeg_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GPSFixPBMsg.LongitudeDeg)
}

// optional double AltitudeMSL = 4;
bool GPSFixPBMsg::has_altitudemsl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GPSFixPBMsg::set_has_altitudemsl() {
  _has_bits_[0] |= 0x00000008u;
}
void GPSFixPBMsg::clear_has_altitudemsl() {
  _has_bits_[0] &= ~0x00000008u;
}
void GPSFixPBMsg::clear_altitudemsl() {
  altitudemsl_ = 0;
  clear_has_altitudemsl();
}
 double GPSFixPBMsg::altitudemsl() const {
  // @@protoc_insertion_point(field_get:vision_messages.GPSFixPBMsg.AltitudeMSL)
  return altitudemsl_;
}
 void GPSFixPBMsg::set_altitudemsl(double value) {
  set_has_altitudemsl();
  altitudemsl_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GPSFixPBMsg.AltitudeMSL)
}

// optional double Position_X = 5;
bool GPSFixPBMsg::has_position_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GPSFixPBMsg::set_has_position_x() {
  _has_bits_[0] |= 0x00000010u;
}
void GPSFixPBMsg::clear_has_position_x() {
  _has_bits_[0] &= ~0x00000010u;
}
void GPSFixPBMsg::clear_position_x() {
  position_x_ = 0;
  clear_has_position_x();
}
 double GPSFixPBMsg::position_x() const {
  // @@protoc_insertion_point(field_get:vision_messages.GPSFixPBMsg.Position_X)
  return position_x_;
}
 void GPSFixPBMsg::set_position_x(double value) {
  set_has_position_x();
  position_x_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GPSFixPBMsg.Position_X)
}

// optional double Position_Y = 6;
bool GPSFixPBMsg::has_position_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GPSFixPBMsg::set_has_position_y() {
  _has_bits_[0] |= 0x00000020u;
}
void GPSFixPBMsg::clear_has_position_y() {
  _has_bits_[0] &= ~0x00000020u;
}
void GPSFixPBMsg::clear_position_y() {
  position_y_ = 0;
  clear_has_position_y();
}
 double GPSFixPBMsg::position_y() const {
  // @@protoc_insertion_point(field_get:vision_messages.GPSFixPBMsg.Position_Y)
  return position_y_;
}
 void GPSFixPBMsg::set_position_y(double value) {
  set_has_position_y();
  position_y_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GPSFixPBMsg.Position_Y)
}

// optional double Position_Z = 7;
bool GPSFixPBMsg::has_position_z() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GPSFixPBMsg::set_has_position_z() {
  _has_bits_[0] |= 0x00000040u;
}
void GPSFixPBMsg::clear_has_position_z() {
  _has_bits_[0] &= ~0x00000040u;
}
void GPSFixPBMsg::clear_position_z() {
  position_z_ = 0;
  clear_has_position_z();
}
 double GPSFixPBMsg::position_z() const {
  // @@protoc_insertion_point(field_get:vision_messages.GPSFixPBMsg.Position_Z)
  return position_z_;
}
 void GPSFixPBMsg::set_position_z(double value) {
  set_has_position_z();
  position_z_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GPSFixPBMsg.Position_Z)
}

// optional double Velocity_X = 8;
bool GPSFixPBMsg::has_velocity_x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GPSFixPBMsg::set_has_velocity_x() {
  _has_bits_[0] |= 0x00000080u;
}
void GPSFixPBMsg::clear_has_velocity_x() {
  _has_bits_[0] &= ~0x00000080u;
}
void GPSFixPBMsg::clear_velocity_x() {
  velocity_x_ = 0;
  clear_has_velocity_x();
}
 double GPSFixPBMsg::velocity_x() const {
  // @@protoc_insertion_point(field_get:vision_messages.GPSFixPBMsg.Velocity_X)
  return velocity_x_;
}
 void GPSFixPBMsg::set_velocity_x(double value) {
  set_has_velocity_x();
  velocity_x_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GPSFixPBMsg.Velocity_X)
}

// optional double Velocity_Y = 9;
bool GPSFixPBMsg::has_velocity_y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GPSFixPBMsg::set_has_velocity_y() {
  _has_bits_[0] |= 0x00000100u;
}
void GPSFixPBMsg::clear_has_velocity_y() {
  _has_bits_[0] &= ~0x00000100u;
}
void GPSFixPBMsg::clear_velocity_y() {
  velocity_y_ = 0;
  clear_has_velocity_y();
}
 double GPSFixPBMsg::velocity_y() const {
  // @@protoc_insertion_point(field_get:vision_messages.GPSFixPBMsg.Velocity_Y)
  return velocity_y_;
}
 void GPSFixPBMsg::set_velocity_y(double value) {
  set_has_velocity_y();
  velocity_y_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GPSFixPBMsg.Velocity_Y)
}

// optional double Velocity_Z = 10;
bool GPSFixPBMsg::has_velocity_z() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void GPSFixPBMsg::set_has_velocity_z() {
  _has_bits_[0] |= 0x00000200u;
}
void GPSFixPBMsg::clear_has_velocity_z() {
  _has_bits_[0] &= ~0x00000200u;
}
void GPSFixPBMsg::clear_velocity_z() {
  velocity_z_ = 0;
  clear_has_velocity_z();
}
 double GPSFixPBMsg::velocity_z() const {
  // @@protoc_insertion_point(field_get:vision_messages.GPSFixPBMsg.Velocity_Z)
  return velocity_z_;
}
 void GPSFixPBMsg::set_velocity_z(double value) {
  set_has_velocity_z();
  velocity_z_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GPSFixPBMsg.Velocity_Z)
}

// optional double GPSTimeStampSec = 11;
bool GPSFixPBMsg::has_gpstimestampsec() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void GPSFixPBMsg::set_has_gpstimestampsec() {
  _has_bits_[0] |= 0x00000400u;
}
void GPSFixPBMsg::clear_has_gpstimestampsec() {
  _has_bits_[0] &= ~0x00000400u;
}
void GPSFixPBMsg::clear_gpstimestampsec() {
  gpstimestampsec_ = 0;
  clear_has_gpstimestampsec();
}
 double GPSFixPBMsg::gpstimestampsec() const {
  // @@protoc_insertion_point(field_get:vision_messages.GPSFixPBMsg.GPSTimeStampSec)
  return gpstimestampsec_;
}
 void GPSFixPBMsg::set_gpstimestampsec(double value) {
  set_has_gpstimestampsec();
  gpstimestampsec_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GPSFixPBMsg.GPSTimeStampSec)
}

// optional double VidereTimeStampSec = 12;
bool GPSFixPBMsg::has_videretimestampsec() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void GPSFixPBMsg::set_has_videretimestampsec() {
  _has_bits_[0] |= 0x00000800u;
}
void GPSFixPBMsg::clear_has_videretimestampsec() {
  _has_bits_[0] &= ~0x00000800u;
}
void GPSFixPBMsg::clear_videretimestampsec() {
  videretimestampsec_ = 0;
  clear_has_videretimestampsec();
}
 double GPSFixPBMsg::videretimestampsec() const {
  // @@protoc_insertion_point(field_get:vision_messages.GPSFixPBMsg.VidereTimeStampSec)
  return videretimestampsec_;
}
 void GPSFixPBMsg::set_videretimestampsec(double value) {
  set_has_videretimestampsec();
  videretimestampsec_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.GPSFixPBMsg.VidereTimeStampSec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VidereSystemControlPBMsg::kSystemStateFieldNumber;
const int VidereSystemControlPBMsg::kStartProcessFieldNumber;
const int VidereSystemControlPBMsg::kPauseProcesFieldNumber;
const int VidereSystemControlPBMsg::kStopProcessFieldNumber;
const int VidereSystemControlPBMsg::kSystemStatusFieldNumber;
const int VidereSystemControlPBMsg::kStatusCounterFieldNumber;
const int VidereSystemControlPBMsg::kDriverEnableSwitchFieldNumber;
const int VidereSystemControlPBMsg::kHeadControlEnableFieldNumber;
const int VidereSystemControlPBMsg::kThrottleControlEnableFieldNumber;
const int VidereSystemControlPBMsg::kBrakeControlEnableFieldNumber;
const int VidereSystemControlPBMsg::kNexusBCIControlEnabledFieldNumber;
const int VidereSystemControlPBMsg::kNexusBCIThrottleEnableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VidereSystemControlPBMsg::VidereSystemControlPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.VidereSystemControlPBMsg)
}

void VidereSystemControlPBMsg::InitAsDefaultInstance() {
}

VidereSystemControlPBMsg::VidereSystemControlPBMsg(const VidereSystemControlPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.VidereSystemControlPBMsg)
}

void VidereSystemControlPBMsg::SharedCtor() {
  _cached_size_ = 0;
  systemstate_ = 0u;
  startprocess_ = false;
  pauseproces_ = false;
  stopprocess_ = false;
  systemstatus_ = 0u;
  statuscounter_ = 0u;
  driverenableswitch_ = false;
  headcontrolenable_ = false;
  throttlecontrolenable_ = false;
  brakecontrolenable_ = false;
  nexusbcicontrolenabled_ = false;
  nexusbcithrottleenable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VidereSystemControlPBMsg::~VidereSystemControlPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.VidereSystemControlPBMsg)
  SharedDtor();
}

void VidereSystemControlPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VidereSystemControlPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VidereSystemControlPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VidereSystemControlPBMsg_descriptor_;
}

const VidereSystemControlPBMsg& VidereSystemControlPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

VidereSystemControlPBMsg* VidereSystemControlPBMsg::default_instance_ = NULL;

VidereSystemControlPBMsg* VidereSystemControlPBMsg::New(::google::protobuf::Arena* arena) const {
  VidereSystemControlPBMsg* n = new VidereSystemControlPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VidereSystemControlPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.VidereSystemControlPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VidereSystemControlPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VidereSystemControlPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(systemstate_, headcontrolenable_);
  }
  ZR_(throttlecontrolenable_, nexusbcithrottleenable_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VidereSystemControlPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.VidereSystemControlPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SystemState = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &systemstate_)));
          set_has_systemstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_StartProcess;
        break;
      }

      // optional bool StartProcess = 2;
      case 2: {
        if (tag == 16) {
         parse_StartProcess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &startprocess_)));
          set_has_startprocess();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PauseProces;
        break;
      }

      // optional bool PauseProces = 3;
      case 3: {
        if (tag == 24) {
         parse_PauseProces:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pauseproces_)));
          set_has_pauseproces();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_StopProcess;
        break;
      }

      // optional bool StopProcess = 4;
      case 4: {
        if (tag == 32) {
         parse_StopProcess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stopprocess_)));
          set_has_stopprocess();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SystemStatus;
        break;
      }

      // optional uint32 SystemStatus = 5;
      case 5: {
        if (tag == 40) {
         parse_SystemStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &systemstatus_)));
          set_has_systemstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_StatusCounter;
        break;
      }

      // optional uint32 StatusCounter = 6;
      case 6: {
        if (tag == 48) {
         parse_StatusCounter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statuscounter_)));
          set_has_statuscounter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_DriverEnableSwitch;
        break;
      }

      // optional bool DriverEnableSwitch = 7;
      case 7: {
        if (tag == 56) {
         parse_DriverEnableSwitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driverenableswitch_)));
          set_has_driverenableswitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_HeadControlEnable;
        break;
      }

      // optional bool HeadControlEnable = 8;
      case 8: {
        if (tag == 64) {
         parse_HeadControlEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &headcontrolenable_)));
          set_has_headcontrolenable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ThrottleControlEnable;
        break;
      }

      // optional bool ThrottleControlEnable = 9;
      case 9: {
        if (tag == 72) {
         parse_ThrottleControlEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &throttlecontrolenable_)));
          set_has_throttlecontrolenable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_BrakeControlEnable;
        break;
      }

      // optional bool BrakeControlEnable = 10;
      case 10: {
        if (tag == 80) {
         parse_BrakeControlEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &brakecontrolenable_)));
          set_has_brakecontrolenable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_NexusBCIControlEnabled;
        break;
      }

      // optional bool NexusBCIControlEnabled = 11;
      case 11: {
        if (tag == 88) {
         parse_NexusBCIControlEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nexusbcicontrolenabled_)));
          set_has_nexusbcicontrolenabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_NexusBCIThrottleEnable;
        break;
      }

      // optional bool NexusBCIThrottleEnable = 12;
      case 12: {
        if (tag == 96) {
         parse_NexusBCIThrottleEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nexusbcithrottleenable_)));
          set_has_nexusbcithrottleenable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.VidereSystemControlPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.VidereSystemControlPBMsg)
  return false;
#undef DO_
}

void VidereSystemControlPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.VidereSystemControlPBMsg)
  // optional uint32 SystemState = 1;
  if (has_systemstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->systemstate(), output);
  }

  // optional bool StartProcess = 2;
  if (has_startprocess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->startprocess(), output);
  }

  // optional bool PauseProces = 3;
  if (has_pauseproces()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->pauseproces(), output);
  }

  // optional bool StopProcess = 4;
  if (has_stopprocess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->stopprocess(), output);
  }

  // optional uint32 SystemStatus = 5;
  if (has_systemstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->systemstatus(), output);
  }

  // optional uint32 StatusCounter = 6;
  if (has_statuscounter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->statuscounter(), output);
  }

  // optional bool DriverEnableSwitch = 7;
  if (has_driverenableswitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->driverenableswitch(), output);
  }

  // optional bool HeadControlEnable = 8;
  if (has_headcontrolenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->headcontrolenable(), output);
  }

  // optional bool ThrottleControlEnable = 9;
  if (has_throttlecontrolenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->throttlecontrolenable(), output);
  }

  // optional bool BrakeControlEnable = 10;
  if (has_brakecontrolenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->brakecontrolenable(), output);
  }

  // optional bool NexusBCIControlEnabled = 11;
  if (has_nexusbcicontrolenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->nexusbcicontrolenabled(), output);
  }

  // optional bool NexusBCIThrottleEnable = 12;
  if (has_nexusbcithrottleenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->nexusbcithrottleenable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.VidereSystemControlPBMsg)
}

::google::protobuf::uint8* VidereSystemControlPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.VidereSystemControlPBMsg)
  // optional uint32 SystemState = 1;
  if (has_systemstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->systemstate(), target);
  }

  // optional bool StartProcess = 2;
  if (has_startprocess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->startprocess(), target);
  }

  // optional bool PauseProces = 3;
  if (has_pauseproces()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->pauseproces(), target);
  }

  // optional bool StopProcess = 4;
  if (has_stopprocess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->stopprocess(), target);
  }

  // optional uint32 SystemStatus = 5;
  if (has_systemstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->systemstatus(), target);
  }

  // optional uint32 StatusCounter = 6;
  if (has_statuscounter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->statuscounter(), target);
  }

  // optional bool DriverEnableSwitch = 7;
  if (has_driverenableswitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->driverenableswitch(), target);
  }

  // optional bool HeadControlEnable = 8;
  if (has_headcontrolenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->headcontrolenable(), target);
  }

  // optional bool ThrottleControlEnable = 9;
  if (has_throttlecontrolenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->throttlecontrolenable(), target);
  }

  // optional bool BrakeControlEnable = 10;
  if (has_brakecontrolenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->brakecontrolenable(), target);
  }

  // optional bool NexusBCIControlEnabled = 11;
  if (has_nexusbcicontrolenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->nexusbcicontrolenabled(), target);
  }

  // optional bool NexusBCIThrottleEnable = 12;
  if (has_nexusbcithrottleenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->nexusbcithrottleenable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.VidereSystemControlPBMsg)
  return target;
}

int VidereSystemControlPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.VidereSystemControlPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 SystemState = 1;
    if (has_systemstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->systemstate());
    }

    // optional bool StartProcess = 2;
    if (has_startprocess()) {
      total_size += 1 + 1;
    }

    // optional bool PauseProces = 3;
    if (has_pauseproces()) {
      total_size += 1 + 1;
    }

    // optional bool StopProcess = 4;
    if (has_stopprocess()) {
      total_size += 1 + 1;
    }

    // optional uint32 SystemStatus = 5;
    if (has_systemstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->systemstatus());
    }

    // optional uint32 StatusCounter = 6;
    if (has_statuscounter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->statuscounter());
    }

    // optional bool DriverEnableSwitch = 7;
    if (has_driverenableswitch()) {
      total_size += 1 + 1;
    }

    // optional bool HeadControlEnable = 8;
    if (has_headcontrolenable()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional bool ThrottleControlEnable = 9;
    if (has_throttlecontrolenable()) {
      total_size += 1 + 1;
    }

    // optional bool BrakeControlEnable = 10;
    if (has_brakecontrolenable()) {
      total_size += 1 + 1;
    }

    // optional bool NexusBCIControlEnabled = 11;
    if (has_nexusbcicontrolenabled()) {
      total_size += 1 + 1;
    }

    // optional bool NexusBCIThrottleEnable = 12;
    if (has_nexusbcithrottleenable()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VidereSystemControlPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.VidereSystemControlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VidereSystemControlPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VidereSystemControlPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.VidereSystemControlPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.VidereSystemControlPBMsg)
    MergeFrom(*source);
  }
}

void VidereSystemControlPBMsg::MergeFrom(const VidereSystemControlPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.VidereSystemControlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_systemstate()) {
      set_systemstate(from.systemstate());
    }
    if (from.has_startprocess()) {
      set_startprocess(from.startprocess());
    }
    if (from.has_pauseproces()) {
      set_pauseproces(from.pauseproces());
    }
    if (from.has_stopprocess()) {
      set_stopprocess(from.stopprocess());
    }
    if (from.has_systemstatus()) {
      set_systemstatus(from.systemstatus());
    }
    if (from.has_statuscounter()) {
      set_statuscounter(from.statuscounter());
    }
    if (from.has_driverenableswitch()) {
      set_driverenableswitch(from.driverenableswitch());
    }
    if (from.has_headcontrolenable()) {
      set_headcontrolenable(from.headcontrolenable());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_throttlecontrolenable()) {
      set_throttlecontrolenable(from.throttlecontrolenable());
    }
    if (from.has_brakecontrolenable()) {
      set_brakecontrolenable(from.brakecontrolenable());
    }
    if (from.has_nexusbcicontrolenabled()) {
      set_nexusbcicontrolenabled(from.nexusbcicontrolenabled());
    }
    if (from.has_nexusbcithrottleenable()) {
      set_nexusbcithrottleenable(from.nexusbcithrottleenable());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VidereSystemControlPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.VidereSystemControlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VidereSystemControlPBMsg::CopyFrom(const VidereSystemControlPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.VidereSystemControlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VidereSystemControlPBMsg::IsInitialized() const {

  return true;
}

void VidereSystemControlPBMsg::Swap(VidereSystemControlPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VidereSystemControlPBMsg::InternalSwap(VidereSystemControlPBMsg* other) {
  std::swap(systemstate_, other->systemstate_);
  std::swap(startprocess_, other->startprocess_);
  std::swap(pauseproces_, other->pauseproces_);
  std::swap(stopprocess_, other->stopprocess_);
  std::swap(systemstatus_, other->systemstatus_);
  std::swap(statuscounter_, other->statuscounter_);
  std::swap(driverenableswitch_, other->driverenableswitch_);
  std::swap(headcontrolenable_, other->headcontrolenable_);
  std::swap(throttlecontrolenable_, other->throttlecontrolenable_);
  std::swap(brakecontrolenable_, other->brakecontrolenable_);
  std::swap(nexusbcicontrolenabled_, other->nexusbcicontrolenabled_);
  std::swap(nexusbcithrottleenable_, other->nexusbcithrottleenable_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VidereSystemControlPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VidereSystemControlPBMsg_descriptor_;
  metadata.reflection = VidereSystemControlPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VidereSystemControlPBMsg

// optional uint32 SystemState = 1;
bool VidereSystemControlPBMsg::has_systemstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VidereSystemControlPBMsg::set_has_systemstate() {
  _has_bits_[0] |= 0x00000001u;
}
void VidereSystemControlPBMsg::clear_has_systemstate() {
  _has_bits_[0] &= ~0x00000001u;
}
void VidereSystemControlPBMsg::clear_systemstate() {
  systemstate_ = 0u;
  clear_has_systemstate();
}
 ::google::protobuf::uint32 VidereSystemControlPBMsg::systemstate() const {
  // @@protoc_insertion_point(field_get:vision_messages.VidereSystemControlPBMsg.SystemState)
  return systemstate_;
}
 void VidereSystemControlPBMsg::set_systemstate(::google::protobuf::uint32 value) {
  set_has_systemstate();
  systemstate_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VidereSystemControlPBMsg.SystemState)
}

// optional bool StartProcess = 2;
bool VidereSystemControlPBMsg::has_startprocess() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VidereSystemControlPBMsg::set_has_startprocess() {
  _has_bits_[0] |= 0x00000002u;
}
void VidereSystemControlPBMsg::clear_has_startprocess() {
  _has_bits_[0] &= ~0x00000002u;
}
void VidereSystemControlPBMsg::clear_startprocess() {
  startprocess_ = false;
  clear_has_startprocess();
}
 bool VidereSystemControlPBMsg::startprocess() const {
  // @@protoc_insertion_point(field_get:vision_messages.VidereSystemControlPBMsg.StartProcess)
  return startprocess_;
}
 void VidereSystemControlPBMsg::set_startprocess(bool value) {
  set_has_startprocess();
  startprocess_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VidereSystemControlPBMsg.StartProcess)
}

// optional bool PauseProces = 3;
bool VidereSystemControlPBMsg::has_pauseproces() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VidereSystemControlPBMsg::set_has_pauseproces() {
  _has_bits_[0] |= 0x00000004u;
}
void VidereSystemControlPBMsg::clear_has_pauseproces() {
  _has_bits_[0] &= ~0x00000004u;
}
void VidereSystemControlPBMsg::clear_pauseproces() {
  pauseproces_ = false;
  clear_has_pauseproces();
}
 bool VidereSystemControlPBMsg::pauseproces() const {
  // @@protoc_insertion_point(field_get:vision_messages.VidereSystemControlPBMsg.PauseProces)
  return pauseproces_;
}
 void VidereSystemControlPBMsg::set_pauseproces(bool value) {
  set_has_pauseproces();
  pauseproces_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VidereSystemControlPBMsg.PauseProces)
}

// optional bool StopProcess = 4;
bool VidereSystemControlPBMsg::has_stopprocess() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VidereSystemControlPBMsg::set_has_stopprocess() {
  _has_bits_[0] |= 0x00000008u;
}
void VidereSystemControlPBMsg::clear_has_stopprocess() {
  _has_bits_[0] &= ~0x00000008u;
}
void VidereSystemControlPBMsg::clear_stopprocess() {
  stopprocess_ = false;
  clear_has_stopprocess();
}
 bool VidereSystemControlPBMsg::stopprocess() const {
  // @@protoc_insertion_point(field_get:vision_messages.VidereSystemControlPBMsg.StopProcess)
  return stopprocess_;
}
 void VidereSystemControlPBMsg::set_stopprocess(bool value) {
  set_has_stopprocess();
  stopprocess_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VidereSystemControlPBMsg.StopProcess)
}

// optional uint32 SystemStatus = 5;
bool VidereSystemControlPBMsg::has_systemstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VidereSystemControlPBMsg::set_has_systemstatus() {
  _has_bits_[0] |= 0x00000010u;
}
void VidereSystemControlPBMsg::clear_has_systemstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
void VidereSystemControlPBMsg::clear_systemstatus() {
  systemstatus_ = 0u;
  clear_has_systemstatus();
}
 ::google::protobuf::uint32 VidereSystemControlPBMsg::systemstatus() const {
  // @@protoc_insertion_point(field_get:vision_messages.VidereSystemControlPBMsg.SystemStatus)
  return systemstatus_;
}
 void VidereSystemControlPBMsg::set_systemstatus(::google::protobuf::uint32 value) {
  set_has_systemstatus();
  systemstatus_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VidereSystemControlPBMsg.SystemStatus)
}

// optional uint32 StatusCounter = 6;
bool VidereSystemControlPBMsg::has_statuscounter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VidereSystemControlPBMsg::set_has_statuscounter() {
  _has_bits_[0] |= 0x00000020u;
}
void VidereSystemControlPBMsg::clear_has_statuscounter() {
  _has_bits_[0] &= ~0x00000020u;
}
void VidereSystemControlPBMsg::clear_statuscounter() {
  statuscounter_ = 0u;
  clear_has_statuscounter();
}
 ::google::protobuf::uint32 VidereSystemControlPBMsg::statuscounter() const {
  // @@protoc_insertion_point(field_get:vision_messages.VidereSystemControlPBMsg.StatusCounter)
  return statuscounter_;
}
 void VidereSystemControlPBMsg::set_statuscounter(::google::protobuf::uint32 value) {
  set_has_statuscounter();
  statuscounter_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VidereSystemControlPBMsg.StatusCounter)
}

// optional bool DriverEnableSwitch = 7;
bool VidereSystemControlPBMsg::has_driverenableswitch() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VidereSystemControlPBMsg::set_has_driverenableswitch() {
  _has_bits_[0] |= 0x00000040u;
}
void VidereSystemControlPBMsg::clear_has_driverenableswitch() {
  _has_bits_[0] &= ~0x00000040u;
}
void VidereSystemControlPBMsg::clear_driverenableswitch() {
  driverenableswitch_ = false;
  clear_has_driverenableswitch();
}
 bool VidereSystemControlPBMsg::driverenableswitch() const {
  // @@protoc_insertion_point(field_get:vision_messages.VidereSystemControlPBMsg.DriverEnableSwitch)
  return driverenableswitch_;
}
 void VidereSystemControlPBMsg::set_driverenableswitch(bool value) {
  set_has_driverenableswitch();
  driverenableswitch_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VidereSystemControlPBMsg.DriverEnableSwitch)
}

// optional bool HeadControlEnable = 8;
bool VidereSystemControlPBMsg::has_headcontrolenable() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VidereSystemControlPBMsg::set_has_headcontrolenable() {
  _has_bits_[0] |= 0x00000080u;
}
void VidereSystemControlPBMsg::clear_has_headcontrolenable() {
  _has_bits_[0] &= ~0x00000080u;
}
void VidereSystemControlPBMsg::clear_headcontrolenable() {
  headcontrolenable_ = false;
  clear_has_headcontrolenable();
}
 bool VidereSystemControlPBMsg::headcontrolenable() const {
  // @@protoc_insertion_point(field_get:vision_messages.VidereSystemControlPBMsg.HeadControlEnable)
  return headcontrolenable_;
}
 void VidereSystemControlPBMsg::set_headcontrolenable(bool value) {
  set_has_headcontrolenable();
  headcontrolenable_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VidereSystemControlPBMsg.HeadControlEnable)
}

// optional bool ThrottleControlEnable = 9;
bool VidereSystemControlPBMsg::has_throttlecontrolenable() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VidereSystemControlPBMsg::set_has_throttlecontrolenable() {
  _has_bits_[0] |= 0x00000100u;
}
void VidereSystemControlPBMsg::clear_has_throttlecontrolenable() {
  _has_bits_[0] &= ~0x00000100u;
}
void VidereSystemControlPBMsg::clear_throttlecontrolenable() {
  throttlecontrolenable_ = false;
  clear_has_throttlecontrolenable();
}
 bool VidereSystemControlPBMsg::throttlecontrolenable() const {
  // @@protoc_insertion_point(field_get:vision_messages.VidereSystemControlPBMsg.ThrottleControlEnable)
  return throttlecontrolenable_;
}
 void VidereSystemControlPBMsg::set_throttlecontrolenable(bool value) {
  set_has_throttlecontrolenable();
  throttlecontrolenable_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VidereSystemControlPBMsg.ThrottleControlEnable)
}

// optional bool BrakeControlEnable = 10;
bool VidereSystemControlPBMsg::has_brakecontrolenable() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VidereSystemControlPBMsg::set_has_brakecontrolenable() {
  _has_bits_[0] |= 0x00000200u;
}
void VidereSystemControlPBMsg::clear_has_brakecontrolenable() {
  _has_bits_[0] &= ~0x00000200u;
}
void VidereSystemControlPBMsg::clear_brakecontrolenable() {
  brakecontrolenable_ = false;
  clear_has_brakecontrolenable();
}
 bool VidereSystemControlPBMsg::brakecontrolenable() const {
  // @@protoc_insertion_point(field_get:vision_messages.VidereSystemControlPBMsg.BrakeControlEnable)
  return brakecontrolenable_;
}
 void VidereSystemControlPBMsg::set_brakecontrolenable(bool value) {
  set_has_brakecontrolenable();
  brakecontrolenable_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VidereSystemControlPBMsg.BrakeControlEnable)
}

// optional bool NexusBCIControlEnabled = 11;
bool VidereSystemControlPBMsg::has_nexusbcicontrolenabled() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VidereSystemControlPBMsg::set_has_nexusbcicontrolenabled() {
  _has_bits_[0] |= 0x00000400u;
}
void VidereSystemControlPBMsg::clear_has_nexusbcicontrolenabled() {
  _has_bits_[0] &= ~0x00000400u;
}
void VidereSystemControlPBMsg::clear_nexusbcicontrolenabled() {
  nexusbcicontrolenabled_ = false;
  clear_has_nexusbcicontrolenabled();
}
 bool VidereSystemControlPBMsg::nexusbcicontrolenabled() const {
  // @@protoc_insertion_point(field_get:vision_messages.VidereSystemControlPBMsg.NexusBCIControlEnabled)
  return nexusbcicontrolenabled_;
}
 void VidereSystemControlPBMsg::set_nexusbcicontrolenabled(bool value) {
  set_has_nexusbcicontrolenabled();
  nexusbcicontrolenabled_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VidereSystemControlPBMsg.NexusBCIControlEnabled)
}

// optional bool NexusBCIThrottleEnable = 12;
bool VidereSystemControlPBMsg::has_nexusbcithrottleenable() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VidereSystemControlPBMsg::set_has_nexusbcithrottleenable() {
  _has_bits_[0] |= 0x00000800u;
}
void VidereSystemControlPBMsg::clear_has_nexusbcithrottleenable() {
  _has_bits_[0] &= ~0x00000800u;
}
void VidereSystemControlPBMsg::clear_nexusbcithrottleenable() {
  nexusbcithrottleenable_ = false;
  clear_has_nexusbcithrottleenable();
}
 bool VidereSystemControlPBMsg::nexusbcithrottleenable() const {
  // @@protoc_insertion_point(field_get:vision_messages.VidereSystemControlPBMsg.NexusBCIThrottleEnable)
  return nexusbcithrottleenable_;
}
 void VidereSystemControlPBMsg::set_nexusbcithrottleenable(bool value) {
  set_has_nexusbcithrottleenable();
  nexusbcithrottleenable_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VidereSystemControlPBMsg.NexusBCIThrottleEnable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeadOrientationControlPBMsg::kHeadOrientationOutputSelectFieldNumber;
const int HeadOrientationControlPBMsg::kDisableHeadOrientationKalmanFilterFieldNumber;
const int HeadOrientationControlPBMsg::kDisableVehicleInputToHeadOrientationFieldNumber;
const int HeadOrientationControlPBMsg::kDisableVehicleGravityFeedbackFieldNumber;
const int HeadOrientationControlPBMsg::kVehicleGravityFeedbackGainFieldNumber;
const int HeadOrientationControlPBMsg::kHeadOrientationQVarFieldNumber;
const int HeadOrientationControlPBMsg::kHeadOrientationRVarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeadOrientationControlPBMsg::HeadOrientationControlPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.HeadOrientationControlPBMsg)
}

void HeadOrientationControlPBMsg::InitAsDefaultInstance() {
}

HeadOrientationControlPBMsg::HeadOrientationControlPBMsg(const HeadOrientationControlPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.HeadOrientationControlPBMsg)
}

void HeadOrientationControlPBMsg::SharedCtor() {
  _cached_size_ = 0;
  headorientationoutputselect_ = 0u;
  disableheadorientationkalmanfilter_ = false;
  disablevehicleinputtoheadorientation_ = false;
  disablevehiclegravityfeedback_ = false;
  vehiclegravityfeedbackgain_ = 0;
  headorientation_qvar_ = 0;
  headorientation_rvar_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeadOrientationControlPBMsg::~HeadOrientationControlPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.HeadOrientationControlPBMsg)
  SharedDtor();
}

void HeadOrientationControlPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeadOrientationControlPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeadOrientationControlPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeadOrientationControlPBMsg_descriptor_;
}

const HeadOrientationControlPBMsg& HeadOrientationControlPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

HeadOrientationControlPBMsg* HeadOrientationControlPBMsg::default_instance_ = NULL;

HeadOrientationControlPBMsg* HeadOrientationControlPBMsg::New(::google::protobuf::Arena* arena) const {
  HeadOrientationControlPBMsg* n = new HeadOrientationControlPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeadOrientationControlPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.HeadOrientationControlPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HeadOrientationControlPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HeadOrientationControlPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(headorientationoutputselect_, headorientation_rvar_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HeadOrientationControlPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.HeadOrientationControlPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 HeadOrientationOutputSelect = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headorientationoutputselect_)));
          set_has_headorientationoutputselect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DisableHeadOrientationKalmanFilter;
        break;
      }

      // optional bool DisableHeadOrientationKalmanFilter = 2;
      case 2: {
        if (tag == 16) {
         parse_DisableHeadOrientationKalmanFilter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disableheadorientationkalmanfilter_)));
          set_has_disableheadorientationkalmanfilter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DisableVehicleInputToHeadOrientation;
        break;
      }

      // optional bool DisableVehicleInputToHeadOrientation = 3;
      case 3: {
        if (tag == 24) {
         parse_DisableVehicleInputToHeadOrientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disablevehicleinputtoheadorientation_)));
          set_has_disablevehicleinputtoheadorientation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DisableVehicleGravityFeedback;
        break;
      }

      // optional bool DisableVehicleGravityFeedback = 4;
      case 4: {
        if (tag == 32) {
         parse_DisableVehicleGravityFeedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disablevehiclegravityfeedback_)));
          set_has_disablevehiclegravityfeedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_VehicleGravityFeedbackGain;
        break;
      }

      // optional double VehicleGravityFeedbackGain = 5;
      case 5: {
        if (tag == 41) {
         parse_VehicleGravityFeedbackGain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehiclegravityfeedbackgain_)));
          set_has_vehiclegravityfeedbackgain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_HeadOrientation_QVar;
        break;
      }

      // optional double HeadOrientation_QVar = 6;
      case 6: {
        if (tag == 49) {
         parse_HeadOrientation_QVar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &headorientation_qvar_)));
          set_has_headorientation_qvar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_HeadOrientation_RVar;
        break;
      }

      // optional double HeadOrientation_RVar = 7;
      case 7: {
        if (tag == 57) {
         parse_HeadOrientation_RVar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &headorientation_rvar_)));
          set_has_headorientation_rvar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.HeadOrientationControlPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.HeadOrientationControlPBMsg)
  return false;
#undef DO_
}

void HeadOrientationControlPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.HeadOrientationControlPBMsg)
  // optional uint32 HeadOrientationOutputSelect = 1;
  if (has_headorientationoutputselect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->headorientationoutputselect(), output);
  }

  // optional bool DisableHeadOrientationKalmanFilter = 2;
  if (has_disableheadorientationkalmanfilter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->disableheadorientationkalmanfilter(), output);
  }

  // optional bool DisableVehicleInputToHeadOrientation = 3;
  if (has_disablevehicleinputtoheadorientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->disablevehicleinputtoheadorientation(), output);
  }

  // optional bool DisableVehicleGravityFeedback = 4;
  if (has_disablevehiclegravityfeedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->disablevehiclegravityfeedback(), output);
  }

  // optional double VehicleGravityFeedbackGain = 5;
  if (has_vehiclegravityfeedbackgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->vehiclegravityfeedbackgain(), output);
  }

  // optional double HeadOrientation_QVar = 6;
  if (has_headorientation_qvar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->headorientation_qvar(), output);
  }

  // optional double HeadOrientation_RVar = 7;
  if (has_headorientation_rvar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->headorientation_rvar(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.HeadOrientationControlPBMsg)
}

::google::protobuf::uint8* HeadOrientationControlPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.HeadOrientationControlPBMsg)
  // optional uint32 HeadOrientationOutputSelect = 1;
  if (has_headorientationoutputselect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->headorientationoutputselect(), target);
  }

  // optional bool DisableHeadOrientationKalmanFilter = 2;
  if (has_disableheadorientationkalmanfilter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->disableheadorientationkalmanfilter(), target);
  }

  // optional bool DisableVehicleInputToHeadOrientation = 3;
  if (has_disablevehicleinputtoheadorientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->disablevehicleinputtoheadorientation(), target);
  }

  // optional bool DisableVehicleGravityFeedback = 4;
  if (has_disablevehiclegravityfeedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->disablevehiclegravityfeedback(), target);
  }

  // optional double VehicleGravityFeedbackGain = 5;
  if (has_vehiclegravityfeedbackgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->vehiclegravityfeedbackgain(), target);
  }

  // optional double HeadOrientation_QVar = 6;
  if (has_headorientation_qvar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->headorientation_qvar(), target);
  }

  // optional double HeadOrientation_RVar = 7;
  if (has_headorientation_rvar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->headorientation_rvar(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.HeadOrientationControlPBMsg)
  return target;
}

int HeadOrientationControlPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.HeadOrientationControlPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 HeadOrientationOutputSelect = 1;
    if (has_headorientationoutputselect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headorientationoutputselect());
    }

    // optional bool DisableHeadOrientationKalmanFilter = 2;
    if (has_disableheadorientationkalmanfilter()) {
      total_size += 1 + 1;
    }

    // optional bool DisableVehicleInputToHeadOrientation = 3;
    if (has_disablevehicleinputtoheadorientation()) {
      total_size += 1 + 1;
    }

    // optional bool DisableVehicleGravityFeedback = 4;
    if (has_disablevehiclegravityfeedback()) {
      total_size += 1 + 1;
    }

    // optional double VehicleGravityFeedbackGain = 5;
    if (has_vehiclegravityfeedbackgain()) {
      total_size += 1 + 8;
    }

    // optional double HeadOrientation_QVar = 6;
    if (has_headorientation_qvar()) {
      total_size += 1 + 8;
    }

    // optional double HeadOrientation_RVar = 7;
    if (has_headorientation_rvar()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeadOrientationControlPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.HeadOrientationControlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HeadOrientationControlPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HeadOrientationControlPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.HeadOrientationControlPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.HeadOrientationControlPBMsg)
    MergeFrom(*source);
  }
}

void HeadOrientationControlPBMsg::MergeFrom(const HeadOrientationControlPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.HeadOrientationControlPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_headorientationoutputselect()) {
      set_headorientationoutputselect(from.headorientationoutputselect());
    }
    if (from.has_disableheadorientationkalmanfilter()) {
      set_disableheadorientationkalmanfilter(from.disableheadorientationkalmanfilter());
    }
    if (from.has_disablevehicleinputtoheadorientation()) {
      set_disablevehicleinputtoheadorientation(from.disablevehicleinputtoheadorientation());
    }
    if (from.has_disablevehiclegravityfeedback()) {
      set_disablevehiclegravityfeedback(from.disablevehiclegravityfeedback());
    }
    if (from.has_vehiclegravityfeedbackgain()) {
      set_vehiclegravityfeedbackgain(from.vehiclegravityfeedbackgain());
    }
    if (from.has_headorientation_qvar()) {
      set_headorientation_qvar(from.headorientation_qvar());
    }
    if (from.has_headorientation_rvar()) {
      set_headorientation_rvar(from.headorientation_rvar());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HeadOrientationControlPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.HeadOrientationControlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeadOrientationControlPBMsg::CopyFrom(const HeadOrientationControlPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.HeadOrientationControlPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadOrientationControlPBMsg::IsInitialized() const {

  return true;
}

void HeadOrientationControlPBMsg::Swap(HeadOrientationControlPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeadOrientationControlPBMsg::InternalSwap(HeadOrientationControlPBMsg* other) {
  std::swap(headorientationoutputselect_, other->headorientationoutputselect_);
  std::swap(disableheadorientationkalmanfilter_, other->disableheadorientationkalmanfilter_);
  std::swap(disablevehicleinputtoheadorientation_, other->disablevehicleinputtoheadorientation_);
  std::swap(disablevehiclegravityfeedback_, other->disablevehiclegravityfeedback_);
  std::swap(vehiclegravityfeedbackgain_, other->vehiclegravityfeedbackgain_);
  std::swap(headorientation_qvar_, other->headorientation_qvar_);
  std::swap(headorientation_rvar_, other->headorientation_rvar_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeadOrientationControlPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeadOrientationControlPBMsg_descriptor_;
  metadata.reflection = HeadOrientationControlPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeadOrientationControlPBMsg

// optional uint32 HeadOrientationOutputSelect = 1;
bool HeadOrientationControlPBMsg::has_headorientationoutputselect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HeadOrientationControlPBMsg::set_has_headorientationoutputselect() {
  _has_bits_[0] |= 0x00000001u;
}
void HeadOrientationControlPBMsg::clear_has_headorientationoutputselect() {
  _has_bits_[0] &= ~0x00000001u;
}
void HeadOrientationControlPBMsg::clear_headorientationoutputselect() {
  headorientationoutputselect_ = 0u;
  clear_has_headorientationoutputselect();
}
 ::google::protobuf::uint32 HeadOrientationControlPBMsg::headorientationoutputselect() const {
  // @@protoc_insertion_point(field_get:vision_messages.HeadOrientationControlPBMsg.HeadOrientationOutputSelect)
  return headorientationoutputselect_;
}
 void HeadOrientationControlPBMsg::set_headorientationoutputselect(::google::protobuf::uint32 value) {
  set_has_headorientationoutputselect();
  headorientationoutputselect_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.HeadOrientationControlPBMsg.HeadOrientationOutputSelect)
}

// optional bool DisableHeadOrientationKalmanFilter = 2;
bool HeadOrientationControlPBMsg::has_disableheadorientationkalmanfilter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HeadOrientationControlPBMsg::set_has_disableheadorientationkalmanfilter() {
  _has_bits_[0] |= 0x00000002u;
}
void HeadOrientationControlPBMsg::clear_has_disableheadorientationkalmanfilter() {
  _has_bits_[0] &= ~0x00000002u;
}
void HeadOrientationControlPBMsg::clear_disableheadorientationkalmanfilter() {
  disableheadorientationkalmanfilter_ = false;
  clear_has_disableheadorientationkalmanfilter();
}
 bool HeadOrientationControlPBMsg::disableheadorientationkalmanfilter() const {
  // @@protoc_insertion_point(field_get:vision_messages.HeadOrientationControlPBMsg.DisableHeadOrientationKalmanFilter)
  return disableheadorientationkalmanfilter_;
}
 void HeadOrientationControlPBMsg::set_disableheadorientationkalmanfilter(bool value) {
  set_has_disableheadorientationkalmanfilter();
  disableheadorientationkalmanfilter_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.HeadOrientationControlPBMsg.DisableHeadOrientationKalmanFilter)
}

// optional bool DisableVehicleInputToHeadOrientation = 3;
bool HeadOrientationControlPBMsg::has_disablevehicleinputtoheadorientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HeadOrientationControlPBMsg::set_has_disablevehicleinputtoheadorientation() {
  _has_bits_[0] |= 0x00000004u;
}
void HeadOrientationControlPBMsg::clear_has_disablevehicleinputtoheadorientation() {
  _has_bits_[0] &= ~0x00000004u;
}
void HeadOrientationControlPBMsg::clear_disablevehicleinputtoheadorientation() {
  disablevehicleinputtoheadorientation_ = false;
  clear_has_disablevehicleinputtoheadorientation();
}
 bool HeadOrientationControlPBMsg::disablevehicleinputtoheadorientation() const {
  // @@protoc_insertion_point(field_get:vision_messages.HeadOrientationControlPBMsg.DisableVehicleInputToHeadOrientation)
  return disablevehicleinputtoheadorientation_;
}
 void HeadOrientationControlPBMsg::set_disablevehicleinputtoheadorientation(bool value) {
  set_has_disablevehicleinputtoheadorientation();
  disablevehicleinputtoheadorientation_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.HeadOrientationControlPBMsg.DisableVehicleInputToHeadOrientation)
}

// optional bool DisableVehicleGravityFeedback = 4;
bool HeadOrientationControlPBMsg::has_disablevehiclegravityfeedback() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HeadOrientationControlPBMsg::set_has_disablevehiclegravityfeedback() {
  _has_bits_[0] |= 0x00000008u;
}
void HeadOrientationControlPBMsg::clear_has_disablevehiclegravityfeedback() {
  _has_bits_[0] &= ~0x00000008u;
}
void HeadOrientationControlPBMsg::clear_disablevehiclegravityfeedback() {
  disablevehiclegravityfeedback_ = false;
  clear_has_disablevehiclegravityfeedback();
}
 bool HeadOrientationControlPBMsg::disablevehiclegravityfeedback() const {
  // @@protoc_insertion_point(field_get:vision_messages.HeadOrientationControlPBMsg.DisableVehicleGravityFeedback)
  return disablevehiclegravityfeedback_;
}
 void HeadOrientationControlPBMsg::set_disablevehiclegravityfeedback(bool value) {
  set_has_disablevehiclegravityfeedback();
  disablevehiclegravityfeedback_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.HeadOrientationControlPBMsg.DisableVehicleGravityFeedback)
}

// optional double VehicleGravityFeedbackGain = 5;
bool HeadOrientationControlPBMsg::has_vehiclegravityfeedbackgain() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void HeadOrientationControlPBMsg::set_has_vehiclegravityfeedbackgain() {
  _has_bits_[0] |= 0x00000010u;
}
void HeadOrientationControlPBMsg::clear_has_vehiclegravityfeedbackgain() {
  _has_bits_[0] &= ~0x00000010u;
}
void HeadOrientationControlPBMsg::clear_vehiclegravityfeedbackgain() {
  vehiclegravityfeedbackgain_ = 0;
  clear_has_vehiclegravityfeedbackgain();
}
 double HeadOrientationControlPBMsg::vehiclegravityfeedbackgain() const {
  // @@protoc_insertion_point(field_get:vision_messages.HeadOrientationControlPBMsg.VehicleGravityFeedbackGain)
  return vehiclegravityfeedbackgain_;
}
 void HeadOrientationControlPBMsg::set_vehiclegravityfeedbackgain(double value) {
  set_has_vehiclegravityfeedbackgain();
  vehiclegravityfeedbackgain_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.HeadOrientationControlPBMsg.VehicleGravityFeedbackGain)
}

// optional double HeadOrientation_QVar = 6;
bool HeadOrientationControlPBMsg::has_headorientation_qvar() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void HeadOrientationControlPBMsg::set_has_headorientation_qvar() {
  _has_bits_[0] |= 0x00000020u;
}
void HeadOrientationControlPBMsg::clear_has_headorientation_qvar() {
  _has_bits_[0] &= ~0x00000020u;
}
void HeadOrientationControlPBMsg::clear_headorientation_qvar() {
  headorientation_qvar_ = 0;
  clear_has_headorientation_qvar();
}
 double HeadOrientationControlPBMsg::headorientation_qvar() const {
  // @@protoc_insertion_point(field_get:vision_messages.HeadOrientationControlPBMsg.HeadOrientation_QVar)
  return headorientation_qvar_;
}
 void HeadOrientationControlPBMsg::set_headorientation_qvar(double value) {
  set_has_headorientation_qvar();
  headorientation_qvar_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.HeadOrientationControlPBMsg.HeadOrientation_QVar)
}

// optional double HeadOrientation_RVar = 7;
bool HeadOrientationControlPBMsg::has_headorientation_rvar() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void HeadOrientationControlPBMsg::set_has_headorientation_rvar() {
  _has_bits_[0] |= 0x00000040u;
}
void HeadOrientationControlPBMsg::clear_has_headorientation_rvar() {
  _has_bits_[0] &= ~0x00000040u;
}
void HeadOrientationControlPBMsg::clear_headorientation_rvar() {
  headorientation_rvar_ = 0;
  clear_has_headorientation_rvar();
}
 double HeadOrientationControlPBMsg::headorientation_rvar() const {
  // @@protoc_insertion_point(field_get:vision_messages.HeadOrientationControlPBMsg.HeadOrientation_RVar)
  return headorientation_rvar_;
}
 void HeadOrientationControlPBMsg::set_headorientation_rvar(double value) {
  set_has_headorientation_rvar();
  headorientation_rvar_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.HeadOrientationControlPBMsg.HeadOrientation_RVar)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleControlParametersPBMsg::kSipnPuffBlowGainFieldNumber;
const int VehicleControlParametersPBMsg::kSipnPuffSuckGainFieldNumber;
const int VehicleControlParametersPBMsg::kSipnPuffDeadBandPercentFieldNumber;
const int VehicleControlParametersPBMsg::kReverseSipnPuffThrottleBrakeFieldNumber;
const int VehicleControlParametersPBMsg::kThrottleSipnPuffGainFieldNumber;
const int VehicleControlParametersPBMsg::kBrakeSipnPuffGainFieldNumber;
const int VehicleControlParametersPBMsg::kThrottleBrakeHeadTiltEnableFieldNumber;
const int VehicleControlParametersPBMsg::kThrottleBrakeHeadTiltForwardDeadbandDegreesFieldNumber;
const int VehicleControlParametersPBMsg::kThrottleBrakeHeadTiltBackDeadbandDegreesFieldNumber;
const int VehicleControlParametersPBMsg::kThrottleHeadTiltGainFieldNumber;
const int VehicleControlParametersPBMsg::kBrakeHeadTiltGainFieldNumber;
const int VehicleControlParametersPBMsg::kUseSteeringAngleControlFieldNumber;
const int VehicleControlParametersPBMsg::kSteeringDeadbandFieldNumber;
const int VehicleControlParametersPBMsg::kSteeringControlGainFieldNumber;
const int VehicleControlParametersPBMsg::kMaxLRHeadRotationDegreesFieldNumber;
const int VehicleControlParametersPBMsg::kHeadLeftRighLPFOrderFieldNumber;
const int VehicleControlParametersPBMsg::kHeadLeftRighLPFCutoffFreqHzFieldNumber;
const int VehicleControlParametersPBMsg::kSteeringAngleFeedbackKpFieldNumber;
const int VehicleControlParametersPBMsg::kSteeringAngleFeedbackKdFieldNumber;
const int VehicleControlParametersPBMsg::kSteeringAngleFeedbackKiFieldNumber;
const int VehicleControlParametersPBMsg::kSteeringBiasAngleDegreesFieldNumber;
const int VehicleControlParametersPBMsg::kRCSteeringGainFieldNumber;
const int VehicleControlParametersPBMsg::kBCIGainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleControlParametersPBMsg::VehicleControlParametersPBMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vision_messages.VehicleControlParametersPBMsg)
}

void VehicleControlParametersPBMsg::InitAsDefaultInstance() {
}

VehicleControlParametersPBMsg::VehicleControlParametersPBMsg(const VehicleControlParametersPBMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vision_messages.VehicleControlParametersPBMsg)
}

void VehicleControlParametersPBMsg::SharedCtor() {
  _cached_size_ = 0;
  sipnpuffblowgain_ = 0;
  sipnpuffsuckgain_ = 0;
  sipnpuffdeadbandpercent_ = 0;
  reversesipnpuffthrottlebrake_ = false;
  throttlesipnpuffgain_ = 0;
  brakesipnpuffgain_ = 0;
  throttlebrakeheadtiltenable_ = false;
  throttlebrakeheadtiltforwarddeadbanddegrees_ = 0;
  throttlebrakeheadtiltbackdeadbanddegrees_ = 0;
  throttleheadtiltgain_ = 0;
  brakeheadtiltgain_ = 0;
  usesteeringanglecontrol_ = false;
  steeringdeadband_ = 0;
  steeringcontrolgain_ = 0;
  maxlrheadrotationdegrees_ = 0;
  headleftrighlpforder_ = 0;
  headleftrighlpfcutofffreqhz_ = 0;
  steeringanglefeedback_kp_ = 0;
  steeringanglefeedback_kd_ = 0;
  steeringanglefeedback_ki_ = 0;
  steeringbiasangledegrees_ = 0;
  rcsteeringgain_ = 0;
  bcigain_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleControlParametersPBMsg::~VehicleControlParametersPBMsg() {
  // @@protoc_insertion_point(destructor:vision_messages.VehicleControlParametersPBMsg)
  SharedDtor();
}

void VehicleControlParametersPBMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VehicleControlParametersPBMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleControlParametersPBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleControlParametersPBMsg_descriptor_;
}

const VehicleControlParametersPBMsg& VehicleControlParametersPBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5fmessages_2eproto();
  return *default_instance_;
}

VehicleControlParametersPBMsg* VehicleControlParametersPBMsg::default_instance_ = NULL;

VehicleControlParametersPBMsg* VehicleControlParametersPBMsg::New(::google::protobuf::Arena* arena) const {
  VehicleControlParametersPBMsg* n = new VehicleControlParametersPBMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleControlParametersPBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:vision_messages.VehicleControlParametersPBMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VehicleControlParametersPBMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VehicleControlParametersPBMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(sipnpuffblowgain_, throttlebrakeheadtiltforwarddeadbanddegrees_);
    ZR_(reversesipnpuffthrottlebrake_, throttlebrakeheadtiltenable_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(usesteeringanglecontrol_, maxlrheadrotationdegrees_);
    throttlebrakeheadtiltbackdeadbanddegrees_ = 0;
  }
  if (_has_bits_[16 / 32] & 8323072u) {
    ZR_(headleftrighlpfcutofffreqhz_, bcigain_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VehicleControlParametersPBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vision_messages.VehicleControlParametersPBMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double SipnPuffBlowGain = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sipnpuffblowgain_)));
          set_has_sipnpuffblowgain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_SipnPuffSuckGain;
        break;
      }

      // optional double SipnPuffSuckGain = 2;
      case 2: {
        if (tag == 17) {
         parse_SipnPuffSuckGain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sipnpuffsuckgain_)));
          set_has_sipnpuffsuckgain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_SipnPuffDeadBandPercent;
        break;
      }

      // optional double SipnPuffDeadBandPercent = 3;
      case 3: {
        if (tag == 25) {
         parse_SipnPuffDeadBandPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sipnpuffdeadbandpercent_)));
          set_has_sipnpuffdeadbandpercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ReverseSipnPuffThrottleBrake;
        break;
      }

      // optional bool ReverseSipnPuffThrottleBrake = 4;
      case 4: {
        if (tag == 32) {
         parse_ReverseSipnPuffThrottleBrake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reversesipnpuffthrottlebrake_)));
          set_has_reversesipnpuffthrottlebrake();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_ThrottleSipnPuffGain;
        break;
      }

      // optional double ThrottleSipnPuffGain = 5;
      case 5: {
        if (tag == 41) {
         parse_ThrottleSipnPuffGain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttlesipnpuffgain_)));
          set_has_throttlesipnpuffgain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_BrakeSipnPuffGain;
        break;
      }

      // optional double BrakeSipnPuffGain = 6;
      case 6: {
        if (tag == 49) {
         parse_BrakeSipnPuffGain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brakesipnpuffgain_)));
          set_has_brakesipnpuffgain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ThrottleBrakeHeadTiltEnable;
        break;
      }

      // optional bool ThrottleBrakeHeadTiltEnable = 7;
      case 7: {
        if (tag == 56) {
         parse_ThrottleBrakeHeadTiltEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &throttlebrakeheadtiltenable_)));
          set_has_throttlebrakeheadtiltenable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_ThrottleBrakeHeadTiltForwardDeadbandDegrees;
        break;
      }

      // optional double ThrottleBrakeHeadTiltForwardDeadbandDegrees = 8;
      case 8: {
        if (tag == 65) {
         parse_ThrottleBrakeHeadTiltForwardDeadbandDegrees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttlebrakeheadtiltforwarddeadbanddegrees_)));
          set_has_throttlebrakeheadtiltforwarddeadbanddegrees();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_ThrottleBrakeHeadTiltBackDeadbandDegrees;
        break;
      }

      // optional double ThrottleBrakeHeadTiltBackDeadbandDegrees = 9;
      case 9: {
        if (tag == 73) {
         parse_ThrottleBrakeHeadTiltBackDeadbandDegrees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttlebrakeheadtiltbackdeadbanddegrees_)));
          set_has_throttlebrakeheadtiltbackdeadbanddegrees();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_ThrottleHeadTiltGain;
        break;
      }

      // optional double ThrottleHeadTiltGain = 10;
      case 10: {
        if (tag == 81) {
         parse_ThrottleHeadTiltGain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttleheadtiltgain_)));
          set_has_throttleheadtiltgain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_BrakeHeadTiltGain;
        break;
      }

      // optional double BrakeHeadTiltGain = 11;
      case 11: {
        if (tag == 89) {
         parse_BrakeHeadTiltGain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brakeheadtiltgain_)));
          set_has_brakeheadtiltgain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_UseSteeringAngleControl;
        break;
      }

      // optional bool UseSteeringAngleControl = 12;
      case 12: {
        if (tag == 96) {
         parse_UseSteeringAngleControl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usesteeringanglecontrol_)));
          set_has_usesteeringanglecontrol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_SteeringDeadband;
        break;
      }

      // optional double SteeringDeadband = 13;
      case 13: {
        if (tag == 105) {
         parse_SteeringDeadband:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steeringdeadband_)));
          set_has_steeringdeadband();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_SteeringControlGain;
        break;
      }

      // optional double SteeringControlGain = 14;
      case 14: {
        if (tag == 113) {
         parse_SteeringControlGain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steeringcontrolgain_)));
          set_has_steeringcontrolgain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_MaxLRHeadRotationDegrees;
        break;
      }

      // optional double MaxLRHeadRotationDegrees = 15;
      case 15: {
        if (tag == 121) {
         parse_MaxLRHeadRotationDegrees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxlrheadrotationdegrees_)));
          set_has_maxlrheadrotationdegrees();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_HeadLeftRighLPFOrder;
        break;
      }

      // optional int32 HeadLeftRighLPFOrder = 16;
      case 16: {
        if (tag == 128) {
         parse_HeadLeftRighLPFOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headleftrighlpforder_)));
          set_has_headleftrighlpforder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_HeadLeftRighLPFCutoffFreqHz;
        break;
      }

      // optional double HeadLeftRighLPFCutoffFreqHz = 17;
      case 17: {
        if (tag == 137) {
         parse_HeadLeftRighLPFCutoffFreqHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &headleftrighlpfcutofffreqhz_)));
          set_has_headleftrighlpfcutofffreqhz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_SteeringAngleFeedback_Kp;
        break;
      }

      // optional double SteeringAngleFeedback_Kp = 18;
      case 18: {
        if (tag == 145) {
         parse_SteeringAngleFeedback_Kp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steeringanglefeedback_kp_)));
          set_has_steeringanglefeedback_kp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_SteeringAngleFeedback_Kd;
        break;
      }

      // optional double SteeringAngleFeedback_Kd = 19;
      case 19: {
        if (tag == 153) {
         parse_SteeringAngleFeedback_Kd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steeringanglefeedback_kd_)));
          set_has_steeringanglefeedback_kd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_SteeringAngleFeedback_Ki;
        break;
      }

      // optional double SteeringAngleFeedback_Ki = 20;
      case 20: {
        if (tag == 161) {
         parse_SteeringAngleFeedback_Ki:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steeringanglefeedback_ki_)));
          set_has_steeringanglefeedback_ki();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_SteeringBiasAngleDegrees;
        break;
      }

      // optional double SteeringBiasAngleDegrees = 21;
      case 21: {
        if (tag == 169) {
         parse_SteeringBiasAngleDegrees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steeringbiasangledegrees_)));
          set_has_steeringbiasangledegrees();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_RCSteeringGain;
        break;
      }

      // optional double RCSteeringGain = 22;
      case 22: {
        if (tag == 177) {
         parse_RCSteeringGain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rcsteeringgain_)));
          set_has_rcsteeringgain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_BCIGain;
        break;
      }

      // optional double BCIGain = 23;
      case 23: {
        if (tag == 185) {
         parse_BCIGain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bcigain_)));
          set_has_bcigain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vision_messages.VehicleControlParametersPBMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vision_messages.VehicleControlParametersPBMsg)
  return false;
#undef DO_
}

void VehicleControlParametersPBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vision_messages.VehicleControlParametersPBMsg)
  // optional double SipnPuffBlowGain = 1;
  if (has_sipnpuffblowgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->sipnpuffblowgain(), output);
  }

  // optional double SipnPuffSuckGain = 2;
  if (has_sipnpuffsuckgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sipnpuffsuckgain(), output);
  }

  // optional double SipnPuffDeadBandPercent = 3;
  if (has_sipnpuffdeadbandpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->sipnpuffdeadbandpercent(), output);
  }

  // optional bool ReverseSipnPuffThrottleBrake = 4;
  if (has_reversesipnpuffthrottlebrake()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->reversesipnpuffthrottlebrake(), output);
  }

  // optional double ThrottleSipnPuffGain = 5;
  if (has_throttlesipnpuffgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->throttlesipnpuffgain(), output);
  }

  // optional double BrakeSipnPuffGain = 6;
  if (has_brakesipnpuffgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->brakesipnpuffgain(), output);
  }

  // optional bool ThrottleBrakeHeadTiltEnable = 7;
  if (has_throttlebrakeheadtiltenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->throttlebrakeheadtiltenable(), output);
  }

  // optional double ThrottleBrakeHeadTiltForwardDeadbandDegrees = 8;
  if (has_throttlebrakeheadtiltforwarddeadbanddegrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->throttlebrakeheadtiltforwarddeadbanddegrees(), output);
  }

  // optional double ThrottleBrakeHeadTiltBackDeadbandDegrees = 9;
  if (has_throttlebrakeheadtiltbackdeadbanddegrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->throttlebrakeheadtiltbackdeadbanddegrees(), output);
  }

  // optional double ThrottleHeadTiltGain = 10;
  if (has_throttleheadtiltgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->throttleheadtiltgain(), output);
  }

  // optional double BrakeHeadTiltGain = 11;
  if (has_brakeheadtiltgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->brakeheadtiltgain(), output);
  }

  // optional bool UseSteeringAngleControl = 12;
  if (has_usesteeringanglecontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->usesteeringanglecontrol(), output);
  }

  // optional double SteeringDeadband = 13;
  if (has_steeringdeadband()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->steeringdeadband(), output);
  }

  // optional double SteeringControlGain = 14;
  if (has_steeringcontrolgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->steeringcontrolgain(), output);
  }

  // optional double MaxLRHeadRotationDegrees = 15;
  if (has_maxlrheadrotationdegrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->maxlrheadrotationdegrees(), output);
  }

  // optional int32 HeadLeftRighLPFOrder = 16;
  if (has_headleftrighlpforder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->headleftrighlpforder(), output);
  }

  // optional double HeadLeftRighLPFCutoffFreqHz = 17;
  if (has_headleftrighlpfcutofffreqhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->headleftrighlpfcutofffreqhz(), output);
  }

  // optional double SteeringAngleFeedback_Kp = 18;
  if (has_steeringanglefeedback_kp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->steeringanglefeedback_kp(), output);
  }

  // optional double SteeringAngleFeedback_Kd = 19;
  if (has_steeringanglefeedback_kd()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->steeringanglefeedback_kd(), output);
  }

  // optional double SteeringAngleFeedback_Ki = 20;
  if (has_steeringanglefeedback_ki()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->steeringanglefeedback_ki(), output);
  }

  // optional double SteeringBiasAngleDegrees = 21;
  if (has_steeringbiasangledegrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->steeringbiasangledegrees(), output);
  }

  // optional double RCSteeringGain = 22;
  if (has_rcsteeringgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->rcsteeringgain(), output);
  }

  // optional double BCIGain = 23;
  if (has_bcigain()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->bcigain(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vision_messages.VehicleControlParametersPBMsg)
}

::google::protobuf::uint8* VehicleControlParametersPBMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vision_messages.VehicleControlParametersPBMsg)
  // optional double SipnPuffBlowGain = 1;
  if (has_sipnpuffblowgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->sipnpuffblowgain(), target);
  }

  // optional double SipnPuffSuckGain = 2;
  if (has_sipnpuffsuckgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sipnpuffsuckgain(), target);
  }

  // optional double SipnPuffDeadBandPercent = 3;
  if (has_sipnpuffdeadbandpercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->sipnpuffdeadbandpercent(), target);
  }

  // optional bool ReverseSipnPuffThrottleBrake = 4;
  if (has_reversesipnpuffthrottlebrake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->reversesipnpuffthrottlebrake(), target);
  }

  // optional double ThrottleSipnPuffGain = 5;
  if (has_throttlesipnpuffgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->throttlesipnpuffgain(), target);
  }

  // optional double BrakeSipnPuffGain = 6;
  if (has_brakesipnpuffgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->brakesipnpuffgain(), target);
  }

  // optional bool ThrottleBrakeHeadTiltEnable = 7;
  if (has_throttlebrakeheadtiltenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->throttlebrakeheadtiltenable(), target);
  }

  // optional double ThrottleBrakeHeadTiltForwardDeadbandDegrees = 8;
  if (has_throttlebrakeheadtiltforwarddeadbanddegrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->throttlebrakeheadtiltforwarddeadbanddegrees(), target);
  }

  // optional double ThrottleBrakeHeadTiltBackDeadbandDegrees = 9;
  if (has_throttlebrakeheadtiltbackdeadbanddegrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->throttlebrakeheadtiltbackdeadbanddegrees(), target);
  }

  // optional double ThrottleHeadTiltGain = 10;
  if (has_throttleheadtiltgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->throttleheadtiltgain(), target);
  }

  // optional double BrakeHeadTiltGain = 11;
  if (has_brakeheadtiltgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->brakeheadtiltgain(), target);
  }

  // optional bool UseSteeringAngleControl = 12;
  if (has_usesteeringanglecontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->usesteeringanglecontrol(), target);
  }

  // optional double SteeringDeadband = 13;
  if (has_steeringdeadband()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->steeringdeadband(), target);
  }

  // optional double SteeringControlGain = 14;
  if (has_steeringcontrolgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->steeringcontrolgain(), target);
  }

  // optional double MaxLRHeadRotationDegrees = 15;
  if (has_maxlrheadrotationdegrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->maxlrheadrotationdegrees(), target);
  }

  // optional int32 HeadLeftRighLPFOrder = 16;
  if (has_headleftrighlpforder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->headleftrighlpforder(), target);
  }

  // optional double HeadLeftRighLPFCutoffFreqHz = 17;
  if (has_headleftrighlpfcutofffreqhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->headleftrighlpfcutofffreqhz(), target);
  }

  // optional double SteeringAngleFeedback_Kp = 18;
  if (has_steeringanglefeedback_kp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->steeringanglefeedback_kp(), target);
  }

  // optional double SteeringAngleFeedback_Kd = 19;
  if (has_steeringanglefeedback_kd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->steeringanglefeedback_kd(), target);
  }

  // optional double SteeringAngleFeedback_Ki = 20;
  if (has_steeringanglefeedback_ki()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->steeringanglefeedback_ki(), target);
  }

  // optional double SteeringBiasAngleDegrees = 21;
  if (has_steeringbiasangledegrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->steeringbiasangledegrees(), target);
  }

  // optional double RCSteeringGain = 22;
  if (has_rcsteeringgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->rcsteeringgain(), target);
  }

  // optional double BCIGain = 23;
  if (has_bcigain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->bcigain(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vision_messages.VehicleControlParametersPBMsg)
  return target;
}

int VehicleControlParametersPBMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vision_messages.VehicleControlParametersPBMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double SipnPuffBlowGain = 1;
    if (has_sipnpuffblowgain()) {
      total_size += 1 + 8;
    }

    // optional double SipnPuffSuckGain = 2;
    if (has_sipnpuffsuckgain()) {
      total_size += 1 + 8;
    }

    // optional double SipnPuffDeadBandPercent = 3;
    if (has_sipnpuffdeadbandpercent()) {
      total_size += 1 + 8;
    }

    // optional bool ReverseSipnPuffThrottleBrake = 4;
    if (has_reversesipnpuffthrottlebrake()) {
      total_size += 1 + 1;
    }

    // optional double ThrottleSipnPuffGain = 5;
    if (has_throttlesipnpuffgain()) {
      total_size += 1 + 8;
    }

    // optional double BrakeSipnPuffGain = 6;
    if (has_brakesipnpuffgain()) {
      total_size += 1 + 8;
    }

    // optional bool ThrottleBrakeHeadTiltEnable = 7;
    if (has_throttlebrakeheadtiltenable()) {
      total_size += 1 + 1;
    }

    // optional double ThrottleBrakeHeadTiltForwardDeadbandDegrees = 8;
    if (has_throttlebrakeheadtiltforwarddeadbanddegrees()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double ThrottleBrakeHeadTiltBackDeadbandDegrees = 9;
    if (has_throttlebrakeheadtiltbackdeadbanddegrees()) {
      total_size += 1 + 8;
    }

    // optional double ThrottleHeadTiltGain = 10;
    if (has_throttleheadtiltgain()) {
      total_size += 1 + 8;
    }

    // optional double BrakeHeadTiltGain = 11;
    if (has_brakeheadtiltgain()) {
      total_size += 1 + 8;
    }

    // optional bool UseSteeringAngleControl = 12;
    if (has_usesteeringanglecontrol()) {
      total_size += 1 + 1;
    }

    // optional double SteeringDeadband = 13;
    if (has_steeringdeadband()) {
      total_size += 1 + 8;
    }

    // optional double SteeringControlGain = 14;
    if (has_steeringcontrolgain()) {
      total_size += 1 + 8;
    }

    // optional double MaxLRHeadRotationDegrees = 15;
    if (has_maxlrheadrotationdegrees()) {
      total_size += 1 + 8;
    }

    // optional int32 HeadLeftRighLPFOrder = 16;
    if (has_headleftrighlpforder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headleftrighlpforder());
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional double HeadLeftRighLPFCutoffFreqHz = 17;
    if (has_headleftrighlpfcutofffreqhz()) {
      total_size += 2 + 8;
    }

    // optional double SteeringAngleFeedback_Kp = 18;
    if (has_steeringanglefeedback_kp()) {
      total_size += 2 + 8;
    }

    // optional double SteeringAngleFeedback_Kd = 19;
    if (has_steeringanglefeedback_kd()) {
      total_size += 2 + 8;
    }

    // optional double SteeringAngleFeedback_Ki = 20;
    if (has_steeringanglefeedback_ki()) {
      total_size += 2 + 8;
    }

    // optional double SteeringBiasAngleDegrees = 21;
    if (has_steeringbiasangledegrees()) {
      total_size += 2 + 8;
    }

    // optional double RCSteeringGain = 22;
    if (has_rcsteeringgain()) {
      total_size += 2 + 8;
    }

    // optional double BCIGain = 23;
    if (has_bcigain()) {
      total_size += 2 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleControlParametersPBMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vision_messages.VehicleControlParametersPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VehicleControlParametersPBMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleControlParametersPBMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vision_messages.VehicleControlParametersPBMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vision_messages.VehicleControlParametersPBMsg)
    MergeFrom(*source);
  }
}

void VehicleControlParametersPBMsg::MergeFrom(const VehicleControlParametersPBMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vision_messages.VehicleControlParametersPBMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sipnpuffblowgain()) {
      set_sipnpuffblowgain(from.sipnpuffblowgain());
    }
    if (from.has_sipnpuffsuckgain()) {
      set_sipnpuffsuckgain(from.sipnpuffsuckgain());
    }
    if (from.has_sipnpuffdeadbandpercent()) {
      set_sipnpuffdeadbandpercent(from.sipnpuffdeadbandpercent());
    }
    if (from.has_reversesipnpuffthrottlebrake()) {
      set_reversesipnpuffthrottlebrake(from.reversesipnpuffthrottlebrake());
    }
    if (from.has_throttlesipnpuffgain()) {
      set_throttlesipnpuffgain(from.throttlesipnpuffgain());
    }
    if (from.has_brakesipnpuffgain()) {
      set_brakesipnpuffgain(from.brakesipnpuffgain());
    }
    if (from.has_throttlebrakeheadtiltenable()) {
      set_throttlebrakeheadtiltenable(from.throttlebrakeheadtiltenable());
    }
    if (from.has_throttlebrakeheadtiltforwarddeadbanddegrees()) {
      set_throttlebrakeheadtiltforwarddeadbanddegrees(from.throttlebrakeheadtiltforwarddeadbanddegrees());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_throttlebrakeheadtiltbackdeadbanddegrees()) {
      set_throttlebrakeheadtiltbackdeadbanddegrees(from.throttlebrakeheadtiltbackdeadbanddegrees());
    }
    if (from.has_throttleheadtiltgain()) {
      set_throttleheadtiltgain(from.throttleheadtiltgain());
    }
    if (from.has_brakeheadtiltgain()) {
      set_brakeheadtiltgain(from.brakeheadtiltgain());
    }
    if (from.has_usesteeringanglecontrol()) {
      set_usesteeringanglecontrol(from.usesteeringanglecontrol());
    }
    if (from.has_steeringdeadband()) {
      set_steeringdeadband(from.steeringdeadband());
    }
    if (from.has_steeringcontrolgain()) {
      set_steeringcontrolgain(from.steeringcontrolgain());
    }
    if (from.has_maxlrheadrotationdegrees()) {
      set_maxlrheadrotationdegrees(from.maxlrheadrotationdegrees());
    }
    if (from.has_headleftrighlpforder()) {
      set_headleftrighlpforder(from.headleftrighlpforder());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_headleftrighlpfcutofffreqhz()) {
      set_headleftrighlpfcutofffreqhz(from.headleftrighlpfcutofffreqhz());
    }
    if (from.has_steeringanglefeedback_kp()) {
      set_steeringanglefeedback_kp(from.steeringanglefeedback_kp());
    }
    if (from.has_steeringanglefeedback_kd()) {
      set_steeringanglefeedback_kd(from.steeringanglefeedback_kd());
    }
    if (from.has_steeringanglefeedback_ki()) {
      set_steeringanglefeedback_ki(from.steeringanglefeedback_ki());
    }
    if (from.has_steeringbiasangledegrees()) {
      set_steeringbiasangledegrees(from.steeringbiasangledegrees());
    }
    if (from.has_rcsteeringgain()) {
      set_rcsteeringgain(from.rcsteeringgain());
    }
    if (from.has_bcigain()) {
      set_bcigain(from.bcigain());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VehicleControlParametersPBMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vision_messages.VehicleControlParametersPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleControlParametersPBMsg::CopyFrom(const VehicleControlParametersPBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vision_messages.VehicleControlParametersPBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleControlParametersPBMsg::IsInitialized() const {

  return true;
}

void VehicleControlParametersPBMsg::Swap(VehicleControlParametersPBMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleControlParametersPBMsg::InternalSwap(VehicleControlParametersPBMsg* other) {
  std::swap(sipnpuffblowgain_, other->sipnpuffblowgain_);
  std::swap(sipnpuffsuckgain_, other->sipnpuffsuckgain_);
  std::swap(sipnpuffdeadbandpercent_, other->sipnpuffdeadbandpercent_);
  std::swap(reversesipnpuffthrottlebrake_, other->reversesipnpuffthrottlebrake_);
  std::swap(throttlesipnpuffgain_, other->throttlesipnpuffgain_);
  std::swap(brakesipnpuffgain_, other->brakesipnpuffgain_);
  std::swap(throttlebrakeheadtiltenable_, other->throttlebrakeheadtiltenable_);
  std::swap(throttlebrakeheadtiltforwarddeadbanddegrees_, other->throttlebrakeheadtiltforwarddeadbanddegrees_);
  std::swap(throttlebrakeheadtiltbackdeadbanddegrees_, other->throttlebrakeheadtiltbackdeadbanddegrees_);
  std::swap(throttleheadtiltgain_, other->throttleheadtiltgain_);
  std::swap(brakeheadtiltgain_, other->brakeheadtiltgain_);
  std::swap(usesteeringanglecontrol_, other->usesteeringanglecontrol_);
  std::swap(steeringdeadband_, other->steeringdeadband_);
  std::swap(steeringcontrolgain_, other->steeringcontrolgain_);
  std::swap(maxlrheadrotationdegrees_, other->maxlrheadrotationdegrees_);
  std::swap(headleftrighlpforder_, other->headleftrighlpforder_);
  std::swap(headleftrighlpfcutofffreqhz_, other->headleftrighlpfcutofffreqhz_);
  std::swap(steeringanglefeedback_kp_, other->steeringanglefeedback_kp_);
  std::swap(steeringanglefeedback_kd_, other->steeringanglefeedback_kd_);
  std::swap(steeringanglefeedback_ki_, other->steeringanglefeedback_ki_);
  std::swap(steeringbiasangledegrees_, other->steeringbiasangledegrees_);
  std::swap(rcsteeringgain_, other->rcsteeringgain_);
  std::swap(bcigain_, other->bcigain_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleControlParametersPBMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleControlParametersPBMsg_descriptor_;
  metadata.reflection = VehicleControlParametersPBMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleControlParametersPBMsg

// optional double SipnPuffBlowGain = 1;
bool VehicleControlParametersPBMsg::has_sipnpuffblowgain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleControlParametersPBMsg::set_has_sipnpuffblowgain() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleControlParametersPBMsg::clear_has_sipnpuffblowgain() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleControlParametersPBMsg::clear_sipnpuffblowgain() {
  sipnpuffblowgain_ = 0;
  clear_has_sipnpuffblowgain();
}
 double VehicleControlParametersPBMsg::sipnpuffblowgain() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.SipnPuffBlowGain)
  return sipnpuffblowgain_;
}
 void VehicleControlParametersPBMsg::set_sipnpuffblowgain(double value) {
  set_has_sipnpuffblowgain();
  sipnpuffblowgain_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.SipnPuffBlowGain)
}

// optional double SipnPuffSuckGain = 2;
bool VehicleControlParametersPBMsg::has_sipnpuffsuckgain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleControlParametersPBMsg::set_has_sipnpuffsuckgain() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleControlParametersPBMsg::clear_has_sipnpuffsuckgain() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleControlParametersPBMsg::clear_sipnpuffsuckgain() {
  sipnpuffsuckgain_ = 0;
  clear_has_sipnpuffsuckgain();
}
 double VehicleControlParametersPBMsg::sipnpuffsuckgain() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.SipnPuffSuckGain)
  return sipnpuffsuckgain_;
}
 void VehicleControlParametersPBMsg::set_sipnpuffsuckgain(double value) {
  set_has_sipnpuffsuckgain();
  sipnpuffsuckgain_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.SipnPuffSuckGain)
}

// optional double SipnPuffDeadBandPercent = 3;
bool VehicleControlParametersPBMsg::has_sipnpuffdeadbandpercent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleControlParametersPBMsg::set_has_sipnpuffdeadbandpercent() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleControlParametersPBMsg::clear_has_sipnpuffdeadbandpercent() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleControlParametersPBMsg::clear_sipnpuffdeadbandpercent() {
  sipnpuffdeadbandpercent_ = 0;
  clear_has_sipnpuffdeadbandpercent();
}
 double VehicleControlParametersPBMsg::sipnpuffdeadbandpercent() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.SipnPuffDeadBandPercent)
  return sipnpuffdeadbandpercent_;
}
 void VehicleControlParametersPBMsg::set_sipnpuffdeadbandpercent(double value) {
  set_has_sipnpuffdeadbandpercent();
  sipnpuffdeadbandpercent_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.SipnPuffDeadBandPercent)
}

// optional bool ReverseSipnPuffThrottleBrake = 4;
bool VehicleControlParametersPBMsg::has_reversesipnpuffthrottlebrake() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VehicleControlParametersPBMsg::set_has_reversesipnpuffthrottlebrake() {
  _has_bits_[0] |= 0x00000008u;
}
void VehicleControlParametersPBMsg::clear_has_reversesipnpuffthrottlebrake() {
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleControlParametersPBMsg::clear_reversesipnpuffthrottlebrake() {
  reversesipnpuffthrottlebrake_ = false;
  clear_has_reversesipnpuffthrottlebrake();
}
 bool VehicleControlParametersPBMsg::reversesipnpuffthrottlebrake() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.ReverseSipnPuffThrottleBrake)
  return reversesipnpuffthrottlebrake_;
}
 void VehicleControlParametersPBMsg::set_reversesipnpuffthrottlebrake(bool value) {
  set_has_reversesipnpuffthrottlebrake();
  reversesipnpuffthrottlebrake_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.ReverseSipnPuffThrottleBrake)
}

// optional double ThrottleSipnPuffGain = 5;
bool VehicleControlParametersPBMsg::has_throttlesipnpuffgain() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VehicleControlParametersPBMsg::set_has_throttlesipnpuffgain() {
  _has_bits_[0] |= 0x00000010u;
}
void VehicleControlParametersPBMsg::clear_has_throttlesipnpuffgain() {
  _has_bits_[0] &= ~0x00000010u;
}
void VehicleControlParametersPBMsg::clear_throttlesipnpuffgain() {
  throttlesipnpuffgain_ = 0;
  clear_has_throttlesipnpuffgain();
}
 double VehicleControlParametersPBMsg::throttlesipnpuffgain() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.ThrottleSipnPuffGain)
  return throttlesipnpuffgain_;
}
 void VehicleControlParametersPBMsg::set_throttlesipnpuffgain(double value) {
  set_has_throttlesipnpuffgain();
  throttlesipnpuffgain_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.ThrottleSipnPuffGain)
}

// optional double BrakeSipnPuffGain = 6;
bool VehicleControlParametersPBMsg::has_brakesipnpuffgain() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VehicleControlParametersPBMsg::set_has_brakesipnpuffgain() {
  _has_bits_[0] |= 0x00000020u;
}
void VehicleControlParametersPBMsg::clear_has_brakesipnpuffgain() {
  _has_bits_[0] &= ~0x00000020u;
}
void VehicleControlParametersPBMsg::clear_brakesipnpuffgain() {
  brakesipnpuffgain_ = 0;
  clear_has_brakesipnpuffgain();
}
 double VehicleControlParametersPBMsg::brakesipnpuffgain() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.BrakeSipnPuffGain)
  return brakesipnpuffgain_;
}
 void VehicleControlParametersPBMsg::set_brakesipnpuffgain(double value) {
  set_has_brakesipnpuffgain();
  brakesipnpuffgain_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.BrakeSipnPuffGain)
}

// optional bool ThrottleBrakeHeadTiltEnable = 7;
bool VehicleControlParametersPBMsg::has_throttlebrakeheadtiltenable() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VehicleControlParametersPBMsg::set_has_throttlebrakeheadtiltenable() {
  _has_bits_[0] |= 0x00000040u;
}
void VehicleControlParametersPBMsg::clear_has_throttlebrakeheadtiltenable() {
  _has_bits_[0] &= ~0x00000040u;
}
void VehicleControlParametersPBMsg::clear_throttlebrakeheadtiltenable() {
  throttlebrakeheadtiltenable_ = false;
  clear_has_throttlebrakeheadtiltenable();
}
 bool VehicleControlParametersPBMsg::throttlebrakeheadtiltenable() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.ThrottleBrakeHeadTiltEnable)
  return throttlebrakeheadtiltenable_;
}
 void VehicleControlParametersPBMsg::set_throttlebrakeheadtiltenable(bool value) {
  set_has_throttlebrakeheadtiltenable();
  throttlebrakeheadtiltenable_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.ThrottleBrakeHeadTiltEnable)
}

// optional double ThrottleBrakeHeadTiltForwardDeadbandDegrees = 8;
bool VehicleControlParametersPBMsg::has_throttlebrakeheadtiltforwarddeadbanddegrees() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VehicleControlParametersPBMsg::set_has_throttlebrakeheadtiltforwarddeadbanddegrees() {
  _has_bits_[0] |= 0x00000080u;
}
void VehicleControlParametersPBMsg::clear_has_throttlebrakeheadtiltforwarddeadbanddegrees() {
  _has_bits_[0] &= ~0x00000080u;
}
void VehicleControlParametersPBMsg::clear_throttlebrakeheadtiltforwarddeadbanddegrees() {
  throttlebrakeheadtiltforwarddeadbanddegrees_ = 0;
  clear_has_throttlebrakeheadtiltforwarddeadbanddegrees();
}
 double VehicleControlParametersPBMsg::throttlebrakeheadtiltforwarddeadbanddegrees() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.ThrottleBrakeHeadTiltForwardDeadbandDegrees)
  return throttlebrakeheadtiltforwarddeadbanddegrees_;
}
 void VehicleControlParametersPBMsg::set_throttlebrakeheadtiltforwarddeadbanddegrees(double value) {
  set_has_throttlebrakeheadtiltforwarddeadbanddegrees();
  throttlebrakeheadtiltforwarddeadbanddegrees_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.ThrottleBrakeHeadTiltForwardDeadbandDegrees)
}

// optional double ThrottleBrakeHeadTiltBackDeadbandDegrees = 9;
bool VehicleControlParametersPBMsg::has_throttlebrakeheadtiltbackdeadbanddegrees() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VehicleControlParametersPBMsg::set_has_throttlebrakeheadtiltbackdeadbanddegrees() {
  _has_bits_[0] |= 0x00000100u;
}
void VehicleControlParametersPBMsg::clear_has_throttlebrakeheadtiltbackdeadbanddegrees() {
  _has_bits_[0] &= ~0x00000100u;
}
void VehicleControlParametersPBMsg::clear_throttlebrakeheadtiltbackdeadbanddegrees() {
  throttlebrakeheadtiltbackdeadbanddegrees_ = 0;
  clear_has_throttlebrakeheadtiltbackdeadbanddegrees();
}
 double VehicleControlParametersPBMsg::throttlebrakeheadtiltbackdeadbanddegrees() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.ThrottleBrakeHeadTiltBackDeadbandDegrees)
  return throttlebrakeheadtiltbackdeadbanddegrees_;
}
 void VehicleControlParametersPBMsg::set_throttlebrakeheadtiltbackdeadbanddegrees(double value) {
  set_has_throttlebrakeheadtiltbackdeadbanddegrees();
  throttlebrakeheadtiltbackdeadbanddegrees_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.ThrottleBrakeHeadTiltBackDeadbandDegrees)
}

// optional double ThrottleHeadTiltGain = 10;
bool VehicleControlParametersPBMsg::has_throttleheadtiltgain() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VehicleControlParametersPBMsg::set_has_throttleheadtiltgain() {
  _has_bits_[0] |= 0x00000200u;
}
void VehicleControlParametersPBMsg::clear_has_throttleheadtiltgain() {
  _has_bits_[0] &= ~0x00000200u;
}
void VehicleControlParametersPBMsg::clear_throttleheadtiltgain() {
  throttleheadtiltgain_ = 0;
  clear_has_throttleheadtiltgain();
}
 double VehicleControlParametersPBMsg::throttleheadtiltgain() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.ThrottleHeadTiltGain)
  return throttleheadtiltgain_;
}
 void VehicleControlParametersPBMsg::set_throttleheadtiltgain(double value) {
  set_has_throttleheadtiltgain();
  throttleheadtiltgain_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.ThrottleHeadTiltGain)
}

// optional double BrakeHeadTiltGain = 11;
bool VehicleControlParametersPBMsg::has_brakeheadtiltgain() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VehicleControlParametersPBMsg::set_has_brakeheadtiltgain() {
  _has_bits_[0] |= 0x00000400u;
}
void VehicleControlParametersPBMsg::clear_has_brakeheadtiltgain() {
  _has_bits_[0] &= ~0x00000400u;
}
void VehicleControlParametersPBMsg::clear_brakeheadtiltgain() {
  brakeheadtiltgain_ = 0;
  clear_has_brakeheadtiltgain();
}
 double VehicleControlParametersPBMsg::brakeheadtiltgain() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.BrakeHeadTiltGain)
  return brakeheadtiltgain_;
}
 void VehicleControlParametersPBMsg::set_brakeheadtiltgain(double value) {
  set_has_brakeheadtiltgain();
  brakeheadtiltgain_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.BrakeHeadTiltGain)
}

// optional bool UseSteeringAngleControl = 12;
bool VehicleControlParametersPBMsg::has_usesteeringanglecontrol() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VehicleControlParametersPBMsg::set_has_usesteeringanglecontrol() {
  _has_bits_[0] |= 0x00000800u;
}
void VehicleControlParametersPBMsg::clear_has_usesteeringanglecontrol() {
  _has_bits_[0] &= ~0x00000800u;
}
void VehicleControlParametersPBMsg::clear_usesteeringanglecontrol() {
  usesteeringanglecontrol_ = false;
  clear_has_usesteeringanglecontrol();
}
 bool VehicleControlParametersPBMsg::usesteeringanglecontrol() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.UseSteeringAngleControl)
  return usesteeringanglecontrol_;
}
 void VehicleControlParametersPBMsg::set_usesteeringanglecontrol(bool value) {
  set_has_usesteeringanglecontrol();
  usesteeringanglecontrol_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.UseSteeringAngleControl)
}

// optional double SteeringDeadband = 13;
bool VehicleControlParametersPBMsg::has_steeringdeadband() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void VehicleControlParametersPBMsg::set_has_steeringdeadband() {
  _has_bits_[0] |= 0x00001000u;
}
void VehicleControlParametersPBMsg::clear_has_steeringdeadband() {
  _has_bits_[0] &= ~0x00001000u;
}
void VehicleControlParametersPBMsg::clear_steeringdeadband() {
  steeringdeadband_ = 0;
  clear_has_steeringdeadband();
}
 double VehicleControlParametersPBMsg::steeringdeadband() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.SteeringDeadband)
  return steeringdeadband_;
}
 void VehicleControlParametersPBMsg::set_steeringdeadband(double value) {
  set_has_steeringdeadband();
  steeringdeadband_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.SteeringDeadband)
}

// optional double SteeringControlGain = 14;
bool VehicleControlParametersPBMsg::has_steeringcontrolgain() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void VehicleControlParametersPBMsg::set_has_steeringcontrolgain() {
  _has_bits_[0] |= 0x00002000u;
}
void VehicleControlParametersPBMsg::clear_has_steeringcontrolgain() {
  _has_bits_[0] &= ~0x00002000u;
}
void VehicleControlParametersPBMsg::clear_steeringcontrolgain() {
  steeringcontrolgain_ = 0;
  clear_has_steeringcontrolgain();
}
 double VehicleControlParametersPBMsg::steeringcontrolgain() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.SteeringControlGain)
  return steeringcontrolgain_;
}
 void VehicleControlParametersPBMsg::set_steeringcontrolgain(double value) {
  set_has_steeringcontrolgain();
  steeringcontrolgain_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.SteeringControlGain)
}

// optional double MaxLRHeadRotationDegrees = 15;
bool VehicleControlParametersPBMsg::has_maxlrheadrotationdegrees() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void VehicleControlParametersPBMsg::set_has_maxlrheadrotationdegrees() {
  _has_bits_[0] |= 0x00004000u;
}
void VehicleControlParametersPBMsg::clear_has_maxlrheadrotationdegrees() {
  _has_bits_[0] &= ~0x00004000u;
}
void VehicleControlParametersPBMsg::clear_maxlrheadrotationdegrees() {
  maxlrheadrotationdegrees_ = 0;
  clear_has_maxlrheadrotationdegrees();
}
 double VehicleControlParametersPBMsg::maxlrheadrotationdegrees() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.MaxLRHeadRotationDegrees)
  return maxlrheadrotationdegrees_;
}
 void VehicleControlParametersPBMsg::set_maxlrheadrotationdegrees(double value) {
  set_has_maxlrheadrotationdegrees();
  maxlrheadrotationdegrees_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.MaxLRHeadRotationDegrees)
}

// optional int32 HeadLeftRighLPFOrder = 16;
bool VehicleControlParametersPBMsg::has_headleftrighlpforder() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void VehicleControlParametersPBMsg::set_has_headleftrighlpforder() {
  _has_bits_[0] |= 0x00008000u;
}
void VehicleControlParametersPBMsg::clear_has_headleftrighlpforder() {
  _has_bits_[0] &= ~0x00008000u;
}
void VehicleControlParametersPBMsg::clear_headleftrighlpforder() {
  headleftrighlpforder_ = 0;
  clear_has_headleftrighlpforder();
}
 ::google::protobuf::int32 VehicleControlParametersPBMsg::headleftrighlpforder() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.HeadLeftRighLPFOrder)
  return headleftrighlpforder_;
}
 void VehicleControlParametersPBMsg::set_headleftrighlpforder(::google::protobuf::int32 value) {
  set_has_headleftrighlpforder();
  headleftrighlpforder_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.HeadLeftRighLPFOrder)
}

// optional double HeadLeftRighLPFCutoffFreqHz = 17;
bool VehicleControlParametersPBMsg::has_headleftrighlpfcutofffreqhz() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void VehicleControlParametersPBMsg::set_has_headleftrighlpfcutofffreqhz() {
  _has_bits_[0] |= 0x00010000u;
}
void VehicleControlParametersPBMsg::clear_has_headleftrighlpfcutofffreqhz() {
  _has_bits_[0] &= ~0x00010000u;
}
void VehicleControlParametersPBMsg::clear_headleftrighlpfcutofffreqhz() {
  headleftrighlpfcutofffreqhz_ = 0;
  clear_has_headleftrighlpfcutofffreqhz();
}
 double VehicleControlParametersPBMsg::headleftrighlpfcutofffreqhz() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.HeadLeftRighLPFCutoffFreqHz)
  return headleftrighlpfcutofffreqhz_;
}
 void VehicleControlParametersPBMsg::set_headleftrighlpfcutofffreqhz(double value) {
  set_has_headleftrighlpfcutofffreqhz();
  headleftrighlpfcutofffreqhz_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.HeadLeftRighLPFCutoffFreqHz)
}

// optional double SteeringAngleFeedback_Kp = 18;
bool VehicleControlParametersPBMsg::has_steeringanglefeedback_kp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void VehicleControlParametersPBMsg::set_has_steeringanglefeedback_kp() {
  _has_bits_[0] |= 0x00020000u;
}
void VehicleControlParametersPBMsg::clear_has_steeringanglefeedback_kp() {
  _has_bits_[0] &= ~0x00020000u;
}
void VehicleControlParametersPBMsg::clear_steeringanglefeedback_kp() {
  steeringanglefeedback_kp_ = 0;
  clear_has_steeringanglefeedback_kp();
}
 double VehicleControlParametersPBMsg::steeringanglefeedback_kp() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.SteeringAngleFeedback_Kp)
  return steeringanglefeedback_kp_;
}
 void VehicleControlParametersPBMsg::set_steeringanglefeedback_kp(double value) {
  set_has_steeringanglefeedback_kp();
  steeringanglefeedback_kp_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.SteeringAngleFeedback_Kp)
}

// optional double SteeringAngleFeedback_Kd = 19;
bool VehicleControlParametersPBMsg::has_steeringanglefeedback_kd() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void VehicleControlParametersPBMsg::set_has_steeringanglefeedback_kd() {
  _has_bits_[0] |= 0x00040000u;
}
void VehicleControlParametersPBMsg::clear_has_steeringanglefeedback_kd() {
  _has_bits_[0] &= ~0x00040000u;
}
void VehicleControlParametersPBMsg::clear_steeringanglefeedback_kd() {
  steeringanglefeedback_kd_ = 0;
  clear_has_steeringanglefeedback_kd();
}
 double VehicleControlParametersPBMsg::steeringanglefeedback_kd() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.SteeringAngleFeedback_Kd)
  return steeringanglefeedback_kd_;
}
 void VehicleControlParametersPBMsg::set_steeringanglefeedback_kd(double value) {
  set_has_steeringanglefeedback_kd();
  steeringanglefeedback_kd_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.SteeringAngleFeedback_Kd)
}

// optional double SteeringAngleFeedback_Ki = 20;
bool VehicleControlParametersPBMsg::has_steeringanglefeedback_ki() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void VehicleControlParametersPBMsg::set_has_steeringanglefeedback_ki() {
  _has_bits_[0] |= 0x00080000u;
}
void VehicleControlParametersPBMsg::clear_has_steeringanglefeedback_ki() {
  _has_bits_[0] &= ~0x00080000u;
}
void VehicleControlParametersPBMsg::clear_steeringanglefeedback_ki() {
  steeringanglefeedback_ki_ = 0;
  clear_has_steeringanglefeedback_ki();
}
 double VehicleControlParametersPBMsg::steeringanglefeedback_ki() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.SteeringAngleFeedback_Ki)
  return steeringanglefeedback_ki_;
}
 void VehicleControlParametersPBMsg::set_steeringanglefeedback_ki(double value) {
  set_has_steeringanglefeedback_ki();
  steeringanglefeedback_ki_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.SteeringAngleFeedback_Ki)
}

// optional double SteeringBiasAngleDegrees = 21;
bool VehicleControlParametersPBMsg::has_steeringbiasangledegrees() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void VehicleControlParametersPBMsg::set_has_steeringbiasangledegrees() {
  _has_bits_[0] |= 0x00100000u;
}
void VehicleControlParametersPBMsg::clear_has_steeringbiasangledegrees() {
  _has_bits_[0] &= ~0x00100000u;
}
void VehicleControlParametersPBMsg::clear_steeringbiasangledegrees() {
  steeringbiasangledegrees_ = 0;
  clear_has_steeringbiasangledegrees();
}
 double VehicleControlParametersPBMsg::steeringbiasangledegrees() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.SteeringBiasAngleDegrees)
  return steeringbiasangledegrees_;
}
 void VehicleControlParametersPBMsg::set_steeringbiasangledegrees(double value) {
  set_has_steeringbiasangledegrees();
  steeringbiasangledegrees_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.SteeringBiasAngleDegrees)
}

// optional double RCSteeringGain = 22;
bool VehicleControlParametersPBMsg::has_rcsteeringgain() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void VehicleControlParametersPBMsg::set_has_rcsteeringgain() {
  _has_bits_[0] |= 0x00200000u;
}
void VehicleControlParametersPBMsg::clear_has_rcsteeringgain() {
  _has_bits_[0] &= ~0x00200000u;
}
void VehicleControlParametersPBMsg::clear_rcsteeringgain() {
  rcsteeringgain_ = 0;
  clear_has_rcsteeringgain();
}
 double VehicleControlParametersPBMsg::rcsteeringgain() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.RCSteeringGain)
  return rcsteeringgain_;
}
 void VehicleControlParametersPBMsg::set_rcsteeringgain(double value) {
  set_has_rcsteeringgain();
  rcsteeringgain_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.RCSteeringGain)
}

// optional double BCIGain = 23;
bool VehicleControlParametersPBMsg::has_bcigain() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void VehicleControlParametersPBMsg::set_has_bcigain() {
  _has_bits_[0] |= 0x00400000u;
}
void VehicleControlParametersPBMsg::clear_has_bcigain() {
  _has_bits_[0] &= ~0x00400000u;
}
void VehicleControlParametersPBMsg::clear_bcigain() {
  bcigain_ = 0;
  clear_has_bcigain();
}
 double VehicleControlParametersPBMsg::bcigain() const {
  // @@protoc_insertion_point(field_get:vision_messages.VehicleControlParametersPBMsg.BCIGain)
  return bcigain_;
}
 void VehicleControlParametersPBMsg::set_bcigain(double value) {
  set_has_bcigain();
  bcigain_ = value;
  // @@protoc_insertion_point(field_set:vision_messages.VehicleControlParametersPBMsg.BCIGain)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace vision_messages

// @@protoc_insertion_point(global_scope)
