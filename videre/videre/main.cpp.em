
@###############################################
@#
@# Rabit message generation for C++
@#
@# EmPy template for generating main.cpp
@#
@###############################################
@# Start of Template
@###############################################

/* ****************************************************************
  *******************************************************************/

/* Auto-generated from file main.cpp.em
   Mondify main.cpp.em NOT main.cpp
 */


@##############################################################################
@#               PYTHON FUNCTIONS FOR GENERATING CODE
@{
def include_managers():
    for m in managers:
        print("#include \"{}.h\"".format(m))

def create_managers():
    for m in managers:
        print("    auto {}Ptr = ManagerPtr(new {}( \"{}\", config_sptr));".format(m,m,m))

def add_managers():
    for m in managers:  
        print("    reactor.AddManager(std::move({}Ptr));".format(m))

def initialize_managers():
    for m in managers:
        print("        static_cast<{} *>({}Ptr.get())->Initialize();".format(m,m))

}@
@##############################################################################


#include <iostream>
#include <memory>
#include <signal.h>

#include <RabitReactor.h>
#include <RabitManager.h>

#include "global_defines.h"
#include "config_data.h"
#include <log4cxx/logger.h>
#include <log4cxx/xml/domconfigurator.h>
#include <log4cxx/helpers/exception.h>
#include <SystemTimeClock.h>
#include "HostSystemInfo.h"
#include "FileUtils.h"
#include "GeoCoordinateSystem.h"

// Autogenerated list of managers to include
@include_managers()

using namespace std;
using namespace Rabit;
using namespace videre;
using namespace log4cxx;
using namespace log4cxx::xml;
using namespace VidereFileUtils;
using namespace GeoCoordinateSystemNS;

// Global rabit reactor. Set here so we can use it in the
// shutdown_handler to close things gracefully
auto reactor = Rabit::RabitReactor();

///Linux primitive way to handle catching the Ctrl+c signal
void shutdown_handler(int s)
{
    std::cout << " <-- Shutdown Gracefully" << std::endl;
    reactor.ShutdownAllManagers();
}

typedef std::unique_ptr<Rabit::RabitManager> ManagerPtr;

///Main instantiates the various managers that make up the Videre Image Processing
///system.  These managers are initialized, added to the Rabit Manager System,
///and then the Rabit reactor is started, which starts all the managers running
///in their respective thread.
int main(int argc, char *argv[])
{
    std::cout << "***************************************************" << std::endl;
    std::cout << "*               VIDERE                            *" << std::endl;
    std::cout << "***************************************************" << std::endl;
    std::cout << std::endl;


    string videre_config_file = "VidereConfig.ini";
    string log_config_file = "Log4CxxConfig.xml";

    /* Setup the logger and print a message indicating that the program is
     starting */
    DOMConfigurator::configure(log_config_file);
    auto rootLogger = Logger::getRootLogger();
    LOG4CXX_INFO(rootLogger, "***********************************************");
    LOG4CXX_INFO(rootLogger, "*         STARTING VIDERE                     *");
    LOG4CXX_INFO(rootLogger, "***********************************************");

    /* Load configuration data that configures the sockets and the video */
    LOG4CXX_INFO(rootLogger, "Loading configuration data from file.");

    auto config_sptr = make_shared<ConfigData>();
    config_sptr->ParseConfigFile(videre_config_file);

    //Get the GPS System Time Clock and Print out its parameters for reference
    SystemTimeClock *sysTimeClock = SystemTimeClock::GetSystemTimeClock();
    sysTimeClock->printSystemClockCharacteristics();

    double currentGPSTimeSec = sysTimeClock->GetCurrentGpsTimeInSeconds();
    LOG4CXX_INFO(rootLogger, "System Time Clock... Current GPS Time Seconds: "
            << currentGPSTimeSec);
    LOG4CXX_INFO(rootLogger, "System Time Clock... Current Local Time Stamp: "
            << sysTimeClock->GetLocalTimeStringFromGpsTimeStamp(currentGPSTimeSec));
    LOG4CXX_INFO(rootLogger, "System Time Clock... Current UTC Time Stamp: "
            << sysTimeClock->GetUTCTimeStringFromGpsTimeStamp(currentGPSTimeSec));

    //Get the Host System Info
    //This will output the various info.
    HostSystemInfo::getHostSystemInfoPtr();

    LOG4CXX_INFO(rootLogger, "Delay for 5 seconds to let USB connections to be made.");
    sleep(5);
    LOG4CXX_INFO(rootLogger, "Delay Complete.");

    //First pass setup of the GeoCoordinate System... This can be reset by
    //the command interface.
    try
    {
        double missionLatDegrees = config_sptr->GetConfigDoubleValue("MissionParameters.LatitudeDegrees", 39.035);
        double missionLonDegrees = config_sptr->GetConfigDoubleValue("MissionParameters.LongitudeDegrees", -104.85);
        double missionAlt = config_sptr->GetConfigDoubleValue("MissionParameters.GroundAltitudeMSL", 2200.0);
        std::string geoConvTypeStr = config_sptr->GetConfigStringValue("MissionParameters.GeoCoordinateSystemConversionType", "Linear");
        GeoCoordinateSystemConversionType_e geoConvType = GeoCoordinateSystemConversionType_e::Linear;
        if(geoConvTypeStr.compare("WGS84_Relative") ==  0)
            geoConvType = GeoCoordinateSystemConversionType_e::WGS84_Relative;
        else if(geoConvTypeStr.compare("WGS84_Map") == 0)
            geoConvType = GeoCoordinateSystemConversionType_e::WGS84_Map;

        GeoCoordinateSystem * gcsPtr = GeoCoordinateSystem::GetGeoCoordinateSystemReference();
        gcsPtr->SetupGeoCoordinateSystem(missionLatDegrees, missionLonDegrees, missionAlt, true, geoConvType);
    }
    catch (exception &e)
    {
        cout << "Error Setting up GeoCoordinate System: " << e.what() << endl;
    }


    // Autogenerated code to create the managers
@create_managers()


    try
    {
        // Autogenerated code to initialize managers
@initialize_managers()
    }
    catch (exception &e)
    {
        LOG4CXX_ERROR(rootLogger, "Error Initializing Managers: " << e.what() );
        exit(1);
    }

    LOG4CXX_INFO(rootLogger, "Starting the Rabit Reactor and all the Managers.");


    // Autogenerated code to add managers to reactor

@add_managers()

    // Setup action to gracefully handle shutdown
    struct sigaction sigIntHandler;
    sigIntHandler.sa_handler = shutdown_handler;
    sigemptyset(&sigIntHandler.sa_mask);
    sigIntHandler.sa_flags = 0;
    sigaction(SIGINT, &sigIntHandler, NULL);

    reactor.Run();
    LOG4CXX_INFO(rootLogger, "Videre has shutdown.");
}
