/* ****************************************************************
 * Athr(s): Harry Direen PhD, Randy Direen Phd.
 * DireenTech Inc.  (www.DireenTech.com)
 * Date: May. 2016
 *
 * Academy Center for UAS Research
 * Department of Electrical and Computer Engineering
 * HQ USAFA/DFEC
 * 2354 Fairchild Drive
 * USAF Academy, CO 80840-6236
 *
 *******************************************************************/

#ifndef COMMS_MANAGER
#define COMMS_MANAGER

#include <iostream>
#include <string>
#include <memory>
#include <vector>
#include <sstream>
#include <unordered_map>
#include <RabitManager.h>
#include <RabitMessageQueue.h>
#include <ManagerStatusMessage.h>
#include <ManagerControlMessage.h>
#include <ManagerStats.h>
#include <ManagerStatusMessage.h>
#include <opencv2/core.hpp>
#include "global_defines.h"
#include "zeromq_wrapper.h"
#include "all_manager_message.h"
#include "video_process_message.h"
#include "video_control_message.h"
#include "telemetry_message.h"
#include "CameraCalStatusMessage.h"
#include "../../ProtobufMessages/vision_messages.pb.h"
#include "../../Utils/config_data.h"
#include "../../Utils/logger.h"
#include "../../Utils/timing.h"
#include "command_response_message_handler.h"
#include "TelemetryMessageProcess.h"
#include "KarTechLinearActuatorParamsMessage.h"
#include "LinearActuatorPositionCtrlMessage.h"
#include "DceEPASteeringStatusMessage.h"
#include "HeadOrientationMessage.h"
#include "SipnPuffMessage.h"
#include "IMUCommandResponseMessage.h"
#include "HeadTrackingOrientationMessage.h"
#include "VidereSystemControlMessage.h"
#include "VehicleSwitchInputMessage.h"

// Manually include this file that has been autogenerated
#include "CommsManagerWSRMgr.h"

using namespace Rabit;

namespace videre
{

// Write handlers to interact with the internal state of CommsManager
    class AbstractHandler;

    class CommsManager : public CommsManagerWSRMgr
    {

    private:
        //Logging System
        log4cxx::LoggerPtr log4cpp_;

        ZeroMQWrapper _zmqComm;
        std::shared_ptr<ConfigData> _config_sptr;
        CommandResponseMessageHandler _cmdResponseMsgHandler;
        TelemetryMessageProcessor _telemetryMessageProcessor;

        const static int MAX_TX_MSG_SIZE = 1024;
        uint8_t _txMsgBuf[MAX_TX_MSG_SIZE];

        vision_messages::VisionCommandPBMsg _visionCmdMsg;
        vision_messages::VisionResponsePBMsg _visionCmdResponseMsg;
        vision_messages::BroadcastPBMsg _broadcastPBMsg;

        //Messages
        std::shared_ptr<VideoProcessMessage> _vid_process_msg;
        std::shared_ptr<VideoControlMessage> _vid_control_msg;
        std::shared_ptr<TelemetryMessage> _telemetry_msg;
        std::shared_ptr<ImageProcessControlMessage> _imageProcessControlStatusMsg;

        //Status Messages from other Managers... Note:  this manager's
        //status message is obtained from:  GetManagerStatusMessage()
        std::shared_ptr<Rabit::ManagerStatusMessage> _videreSystemControMgrStatsMsg;
        std::shared_ptr<Rabit::ManagerStatusMessage> _headOrientationMgrStatsMsg;
        std::shared_ptr<Rabit::ManagerStatusMessage> _vehicleStateMgrStatsMsg;
        std::shared_ptr<Rabit::ManagerStatusMessage> _commMgrStatsMsg;
        std::shared_ptr<Rabit::ManagerStatusMessage> _ImageCaptureMgrStatsMsg;
        std::shared_ptr<Rabit::ManagerStatusMessage> _VisionProcessMgrStatsMsg;
        std::shared_ptr<Rabit::ManagerStatusMessage> _StreamRecordMgrStatsMsg;
        std::shared_ptr<Rabit::ManagerStatusMessage> _SystemInfoMgrStatsMsg;
        std::shared_ptr<Rabit::ManagerStatusMessage> _GpsMgrStatsMsg;
        std::shared_ptr<Rabit::ManagerStatusMessage> _IMUCommMgrStatsMsg;
        std::shared_ptr<Rabit::ManagerStatusMessage> _SipnPuffMgrStatsMsg;
        std::shared_ptr<Rabit::ManagerStatusMessage> _VehicalActuatorInterfaceMgrStatsMsg;
        std::shared_ptr<Rabit::ManagerStatusMessage> _RobotArmMgrStatsMsg;
        std::shared_ptr<Rabit::ManagerStatusMessage> _RemoteControlMgrStatsMsg;

        std::shared_ptr<VidereSystemControlMessage> _videreSystemCtrlStatusMsg;

        std::shared_ptr<CameraCalStatusMessage> _cameraCalStatusMsg;
        std::shared_ptr<FeatureMatchProcStatusMessage> _featureMatchProcStatusMsg;

        std::shared_ptr<TrackHeadOrientationMessage> _trackHeadOrientationMsg;

        std::shared_ptr<DceEPASteeringStatusMessage> _steeringStatusMsg;
        std::shared_ptr<LinearActuatorPositionCtrlMessage> _throttlePositionFeedbackMsg;
        std::shared_ptr<LinearActuatorPositionCtrlMessage> _brakePositionFeedbackMsg;

        std::shared_ptr<HeadOrientationMessage> _processedHeadOrientationMsg;
        std::shared_ptr<HeadOrientationMessage> _imuHeadOrientationMsg;
        std::shared_ptr<SipnPuffMessage> _sipAndPuffStatusMsg;
        std::shared_ptr<IMUCommandResponseMessage> _imuResponseMsg;

        std::shared_ptr<VehicleSwitchInputMessage> _vehicleSwitchInputMsg;

        //A Vision Message Wrapper use to serialize and transmit messages;
        vision_messages::VisionMessageWrapperPBMsg _msgWrapperPBMsg;

        //A Protobuf message for transmitting a Manager Stats Message
        vision_messages::ManagerStatsPBMsg _mgrStatsTxPBMsg;


        //Queues
        const int NDataStreams = 2;
        //Image messages sent to the Comm Mgr for transport.
        std::shared_ptr<RabitMsgPtrSPSCQueue> _imageStreamMsgQueue_sptr;

        //The Comm Mgr sends the empty messages back in this queue for reuse.
        std::shared_ptr<RabitMsgPtrSPSCQueue> _imageStreamEmptyMsgQueue_sptr;

        //Target Info Messages from Image Processing to be sent
        std::shared_ptr<RabitMsgPtrSPSCQueue> _TgtMsgsToBeSentQueue_sptr;

        //Empty Target Info Messages to be returned to Image Processing.
        std::shared_ptr<RabitMsgPtrSPSCQueue> _TgtMsgEmptyQueue_sptr;

        //This Queue is to recieve messages to be sent out the ZMQ publish socket.
        std::shared_ptr<RabitMsgQueue> _zmqPublishOutMsgQue;


    public:
        CommsManager(std::string name, std::shared_ptr<ConfigData> config);

        /**
         * @brief Initialize
         * @throws exception if it can't get path to config data.
         */
        virtual void Initialize();

        virtual void ExecuteUnitOfWork() final;

        virtual void Shutdown() final;

        bool CheckForTelemetryFromRemote();

        void UpdateTelemetryBasedOnNew();

        void UpdateTelemetryBasedOnOld();

        void ManagerControlMsgHandler(std::string);

        void TransmitMgrStatsMsg(std::shared_ptr<Rabit::ManagerStatusMessage> mgrStatsMsg);

        void TransmitCameraCalStatsMsg(std::shared_ptr<CameraCalStatusMessage> cameraCalStatsMsg);

        void TransmitFeatureMatchProcStatsMsg(std::shared_ptr<FeatureMatchProcStatusMessage> fmpStatsMsg);

        void TransmitImageProcessControlStatusMsg(std::shared_ptr<ImageProcessControlMessage> statsMsg);

        //Transmit a Steering Status out the Publish Monitor Socket
        void TransmitSteeringStatusMsg(std::shared_ptr<DceEPASteeringStatusMessage> steeringStatsMsg);

        //Transmit a Linear Actuator Postion Status out the Publish Monitor Socket
        void TransmitLinearActuatorPositionStatusMsg(std::shared_ptr<LinearActuatorPositionCtrlMessage> laPosMsg);

        void TransmitHeadOrientationMsg(std::shared_ptr<HeadOrientationMessage> headOrientationMsg);

        void TransmitSipAndPuffMsg(std::shared_ptr<SipnPuffMessage> sipAndPuffStatusMsg);

        void TransmitIMUResponseMsg(std::shared_ptr<IMUCommandResponseMessage> imuResponseMsg);

        void TransmitTrackHeadOrientationMsg(std::shared_ptr<TrackHeadOrientationMessage> thoMsg);

        void TransmitVidereSystemCtrlStatusMsg(std::shared_ptr<VidereSystemControlMessage> thoMsg);

        void TransmitNexusBCIMsg(std::shared_ptr<Rabit::RabitMessage> msg,
                                  std::string msgName);

        void ProcessNexusBCIRxMsg(zmq::message_t *bciMsgPtr);

    };

}

#endif //COMMS_MANAGER
