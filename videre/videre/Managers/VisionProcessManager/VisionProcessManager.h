/* ****************************************************************
 * Vision Process Manager
 * DireenTech Inc.  (www.direentech.com)
 * Athr: Randy Direen PhD
 * Athr: Harry Direen PhD
 * Date: July 2016
 *
 * Developed under contract for:
 * Academy Center for UAS Research
 * Department of Electrical and Computer Engineering
 * HQ USAFA/DFEC
 * 2354 Fairchild Drive
 * USAF Academy, CO 80840-6236
 *
  *******************************************************************/

#ifndef VISION_PROCESS_MANAGER
#define VISION_PROCESS_MANAGER

#include <iostream>
#include <string>
#include <memory>
#include <opencv2/core.hpp>
#include <opencv2/imgproc.hpp>
// #include <opencv2/imagecodecs/imgcodecs.hpp> //OpenCV 3.0 only
//#include <opencv2/videoio/videoio.hpp> //OpenCV 3.0 only
#include <opencv2/features2d/features2d.hpp>
#include <thread>
#include <chrono>
#include <memory>
#include <RabitManager.h>
#include <message_pool.h>
#include "../../Messages/all_manager_message.h"
#include "../../Messages/ImageProcessControlMessage.h"
#include "../../Messages/StreamRecordImagesControlMessage.h"
#include "../../Messages/ImageProcTargetInfoResultsMessage.h"
#include "../../Utils/global_defines.h"
#include "../../Utils/config_data.h"
#include "../../Utils/logger.h"

#include "../StreamRecordManager/vision_record_play.h"
#include "BlobTargetDetectionProcess/BlobTargetDetector.h"
#include "TargetDetectorProcessControl.h"
#include "VisionProcessResources.h"
#include "VisionProcessorAbstract.h"
#include "NullVisionProcessor.h"
#include "StdTargetDectectorVisionProcessor.h"
#include "GPSDeniedVisionProcessor.h"
#include "CameraCalibrationProcessor.h"
#include "FeatureMatchingProcessor.h"
#include "HeadTrackingProcessor.h"
#include "HeadOrientationCalProcessor.h"

// Manually include this file that has been autogenerated
#include "VisionProcessManagerWSRMgr.h"

using namespace Rabit;

#define NDATASTREAMS 2
#define NumberOFVisionProcessors 7


namespace videre
{

    //The VisionProcessManager is responsible for all the image processing.
    //This manager recieves images along with the image metadata from the ImageCaptureManager,
    //processes the images, and returns the results to the Communicattions Manager.
    //For target identification... the Vision Processor will do the image processing
    //to identify any targets in an image, and then send the information about the
    //targes to the Communications manager who will then sent the information on
    //the HOPS or some other system.
    //
    //The VisionProcessManager maintains a pool of ImagePlusMetaData messages
    //to avoid having to contantly create and distroy these large messages.
    //The VisionProcessManager typically sends empty ImagePlusMetaData messages
    //to the Image Manger which is responsible for filling in the lastest image
    //plus metadata information.  The Image manager then sends the filled in message
    //back to the VisionProcessManager for processing.
    class VisionProcessManager : public VisionProcessManagerWSRMgr
    {
#
    private:
        //Logging System
        log4cxx::LoggerPtr log4cpp_;

        //The Vision Processor Resources
        //The message queues for the vision process manager are
        //located here along with Message Pools and other key resources.
        VisionProcessResources _VPResources;

        std::shared_ptr<ConfigData> _config_sptr;

        //Create one of each type of Vision Processor
        NullVisionProcessor _NullVisionProcessor;
        StdTargetDectectorVisionProcessor _StdTargetDectectorVisionProcessor;
        GPSDeniedVisionProcessor _GPSDeniedVisionProcessor;
        CameraCalibrationProcessor _CameraCalibrationProcessor;
        FeatureMatchingProcessor _FeatureMatchingProcessor;
        HeadTrackingProcessor _HeadTrackingProcessor;
        HeadOrientationCalProcessor _HeadOrientationCalProcessor;

        VisionProcessorAbstract* _currentVisionProcessor;
        VisionProcessingMode_e _currentVisionProcessingMode;
        VisionProcessorAbstract* _VisionProcessorList[NumberOFVisionProcessors];

        //A config parameter to indicate that images and image metadata
        // are not sent out (output Stream and recoding of images) until
        // after the images have been processed by the Vision Processor.
        bool _postProcessImages = true;


    public:
        VisionProcessManager(std::string name, std::shared_ptr<ConfigData> config);

        /**
         * @brief Initialize
         * @throws exception if it can't get path to config data.
         */
        void Initialize();

        void ExecuteUnitOfWork() final;

    };


}

#endif //VISION_PROCESS_MANAGER
