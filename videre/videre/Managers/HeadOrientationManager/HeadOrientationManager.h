/* ****************************************************************
 * Athr(s): Randy Direen, PhD
 * Harry Direen PhD,
 * DireenTech Inc.  (www.DireenTech.com)
 * Date: Aug, 2018
 *
 * Head Orientation Manager
 * Generates the best estimate of the head orientation within
 * the vehicle based upon IMU input, Image Processing input
 * and vehicle state input.
 *******************************************************************/

#ifndef VIDERE_DEV_HEADORIENTATIONMANAGER_H
#define VIDERE_DEV_HEADORIENTATIONMANAGER_H

#include <iostream>
#include <string>
#include <memory>
#include <vector>
#include <sstream>
#include <unordered_map>
#include <RabitManager.h>
#include <RabitStopWatch.h>
#include <RabitMessageQueue.h>
#include <ManagerStatusMessage.h>
#include <ManagerControlMessage.h>
#include <ManagerStats.h>
#include <ManagerStatusMessage.h>
#include "global_defines.h"
#include "all_manager_message.h"
#include "../../Utils/config_data.h"
#include "../../Utils/logger.h"
#include "../../Utils/timing.h"
#include "DataRecorder.h"
#include "DataRecorderStdHeader.h"
#include "HeadOrientationDataRecord.h"
#include "ImageLoggingControlMessage.h"
#include "AccelerometerGyroMessage.h"
#include "HeadTrackingOrientationMessage.h"
#include "HeadOrientationCalDataMessage.h"
#include "QuaternionMessage.h"
#include "HeadOrientationControlMessage.h"
#include "HeadOrientationMessage.h"
#include "ResetOrientationStateMessage.h"
#include "Quaternion.h"
#include <armadillo>

// Manually include this file that has been autogenerated
#include "HeadOrientationManagerWSRMgr.h"
using namespace Rabit;

namespace videre
{

    class HeadOrientationManager : public HeadOrientationManagerWSRMgr
    {
    private:
        //Logging System
        log4cxx::LoggerPtr log4cpp_;

        std::shared_ptr<ConfigData> _config_sptr;

        std::shared_ptr<ImageLoggingControlMessage> _loggingControlMsg;

        //Messages
        std::shared_ptr<TrackHeadOrientationMessage> _trackHeadOrientationMsg;

        std::shared_ptr<QuaternionMessage> _vehicleOrientationQuaternionMsg;

        //The Head Orientation relative to the Vehicle... used to control
        //the vehicle.
        std::shared_ptr<QuaternionMessage> _headOrientationQuaternionMsg;

        std::shared_ptr<HeadOrientationCalDataMessage> _headOrientationCalDataMsg;

        std::shared_ptr<HeadOrientationControlMessage> _headOrientationControlMsg;

        std::shared_ptr<HeadOrientationMessage> _processedHeadOrientationMsg;

        std::shared_ptr<ResetOrientationStateMessage> _resetOrientationStateMsg;

        //Queues
        //This Queue is to recieve IMU Accelerometer / Gyro messages from the IMUCommsManager.
        //This queue type is point-to-point or manager to manager so that non-locking
        //queues can be used.
        std::shared_ptr<RabitMsgPtrSPSCQueue> HeadOrientationIMUMsgRxQueue;

        //This Queue is to send Emtpty messages back to the IMU Comms Manager
        //All messages pulled from the VehicleStateIMUMsgRxQueue must be returned here.
        std::shared_ptr<RabitMsgPtrSPSCQueue> HeadOrientationIMUEmptyMsgQueue;


        DataRecorder _dataRecorder;
        DataRecorderStdHeader _dataRecorderStdHeader;
        HeadOrientationDataRecord _headOrientationDataRecord;

        bool EnableHeadOrientationfLogging = true;

        int _processCounter = 0;

        double _lastHeadOrientationDataSentTimestamp = 0;
        double TxHeadOrientationRateMsgPerSec = 30;

        //Head Orientation Variables

        double p_initial = 0.005;
        double q_initial = 0.001;
        double r_initial = 0.001;

        double _lastSampleTime = 0.0;

        double _headOrientationCovarianceNorm = 0;

        //Head Quaternion state relative to the Inertial Frame
        Quaternion_t _headQIStateEst;
        Quaternion_t _headQIStatePredict;

        Quaternion_t _QcameraMeasCar;

        //Head Expected Covarience matrix
        arma::dmat _Pe;

        //Head Predicted Covarience matrix
        arma::dmat _Pp;

        //Current A matrix
        arma::dmat _A;

        //Current G matrix
        arma::dmat _G;

        arma::dmat _deltaQ;

        //Current H matrix
        arma::dmat _H;

        //Current Input noise coverience Q matrix
        arma::dmat _Q;

        arma::dmat _Qnomeas;

        //Current R matrix
        arma::dmat _R;

        //Current kalman Gain matrix
        arma::dmat _K;

        arma::dmat _M4x4Tmp;

        arma::dmat _M3x3Tmp;

        arma::dmat _tmpV1;

        arma::dmat _tmpV2;

        //Status Vars
        uint32_t _NoHeadGyroOrImageDataCount = 0;
        uint32_t _headGyroUpdateCount = 0;
        uint32_t _headNoGyroUpdateCount = 0;
        uint32_t _headQIStateErrorCount = 0;

        double _headGyroUpdateRateSamplesPerSecond = 0.0;

        //Stopwatch timers
        RabitStopWatch _updateTimer;


    public:
        HeadOrientationManager(std::string name, std::shared_ptr<ConfigData> config);

        virtual void Initialize();

        void SetDefaultSystemValues();

        void SetQMatrix(double var);

        void SetRMatrix(double var);

        void ResetState();

        void InitHeadQIStateEst();

        void UpdateHeadOrientationInertialState(AccelerometerGyroMessage* agMsgPtr);

        void UpdateHeadOrientationNoChange();

        void UpdateHeadOrientationCoevarienceMatrix(double deltaTimeSec);

        void ComputeKalmanGain(arma::dmat &P, arma::dmat &H, arma::dmat &R, arma::dmat &Kout);

        void AddCameraMeasurement(bool imageUpdateAvailable);

        AccelerometerGyroMessage* GetNextAccelGyroMsg();

        virtual void ExecuteUnitOfWork() final;

        //The Startup method is called once when the manager thread is first
        //started.  It can be used for any necessary initialization processess
        //that have to be done after the manager's constructor.
        virtual void Startup() final;

        virtual void Shutdown() final;


    };

}
#endif //VIDERE_DEV_HEADORIENTATIONMANAGER_H
