/* ****************************************************************
 * Image Manager
 * DireenTech Inc.  (www.direentech.com)
 * Athr: Randy Direen PhD
 * Date: May 2016
 *
 * Developed under contract for:
 * Academy Center for UAS Research
 * Department of Electrical and Computer Engineering
 * HQ USAFA/DFEC
 * 2354 Fairchild Drive
 * USAF Academy, CO 80840-6236
 *
  *******************************************************************/

#ifndef IMAGE_CAPTURE_MANAGER
#define IMAGE_CAPTURE_MANAGER

#include <iostream>
#include <string>
#include <memory>
#include <opencv2/core.hpp>
#include <opencv2/imgproc.hpp>
// #include <opencv2/imagecodecs/imgcodecs.hpp> //OpenCV 3.0 only
//#include <opencv2/videoio/videoio.hpp> //OpenCV 3.0 only
#include <opencv2/highgui.hpp>
#include <opencv2/features2d.hpp>


#include <RabitManager.h>
#include <RabitMessageQueue.h>

#include "all_manager_message.h"
#include "ImageCaptureControlMessage.h"
#include "ImageCaptureStatusMessage.h"
#include "image_plus_metadata_message.h"
#include "VehicleInertialStatesMessage.h"
#include "ImageProcessControlMessage.h"
#include "StreamRecordImagesControlMessage.h"
#include "CameraOrientationMessage.h"
#include "../../Utils/config_data.h"
#include "image_capture_exception.h"
#include "../../Utils/logger.h"
#include "../../Utils/global_defines.h"
#include "Utilities/ImagePixelLocationToRealWorldLocation.h"
#include "OpenCVWebcamImageCapture.h"
#include "ImagePlusMetaDataFileReader.h"
#include "CompressedImageFileReader.h"
#include "Sensoray2253ImageCapture.h"
#include "CSI_Camera.h"
#include "ImageLoggingControlMessage.h"
#include "VideoFileReader.h"

// Manually include this file that has been autogenerated
#include "CommsManagerWSRMgr.h"

using namespace Rabit;
// Manually include this file that has been autogenerated
#include "ImageCaptureManagerWSRMgr.h"

using namespace Rabit;

using namespace GeoCoordinateSystemNS;
using namespace VidereImageprocessing;
using namespace MathLibsNS;

#define NUMFRAMES 2


namespace videre
{

    //The Image Manager is responsible for capturing images from the camera.
    //Metadata associated with the images are captured and metadata structures
    //filled in with the data.
    //The images plus metadata are piped over queues to image processing and
    //the StreamRecordManager.
    class ImageCaptureManager : public ImageCaptureManagerWSRMgr
    {

    private:
        //Logging System
        log4cxx::LoggerPtr log4cpp_;

        std::shared_ptr<ConfigData> _config_sptr;

        //Messages
        std::shared_ptr<ImageCaptureControlMessage> _imageCaptureControlMsg_sptr;
        std::shared_ptr<ImageCaptureControlMessage> _imageCaptureControlStatusMsg_sptr;
        std::shared_ptr<ImageCaptureStatusMessage> _imageCaptureStatusMsg_sptr;

        std::shared_ptr<ImageProcessControlMessage> _imageProcessControlMsg_sptr;
        std::shared_ptr<StreamRecordImageControlMesssage> _streamRecordControlMsg_sptr;
        std::shared_ptr<VehicleInertialStatesMessage> _vehicleInertialStatesMsg_sptr;
        std::shared_ptr<CameraOrientationMessage> _cameraOrientationMsg_sptr;
        std::shared_ptr<CameraParametersSetupMessage> _CameraParametersSetupMsg_sptr;
        std::shared_ptr<ImageLoggingControlMessage> _imageLoggingControlMsg;


        //Queues

        //Reference to Stream Manager Queues
        std::shared_ptr<RabitMsgPtrSPSCQueue> _StreamMgrImagePlusMetadataQueue_sptr;
        std::shared_ptr<RabitMsgPtrSPSCQueue> _StreamMgrEmptyImagePlusMetadataQueue_sptr;

        //Reference to Vision Process Manager Queues
        std::shared_ptr<RabitMsgPtrSPSCQueue> _VissionProcMgrImagePlusMetadataQueue_sptr;
        std::shared_ptr<RabitMsgPtrSPSCQueue> _VissionProcMgrEmptyImagePlusMetadataQueue_sptr;

        //Flags
        bool _StreamMgrAvailable = false;
        bool _VisionProcessMgrAvailable = false;

        bool _imageCaptureEnabled = false;

        bool _imageCaptureComplete = false;

        bool _endOfImages = false;

        //A config parameter to indicate that images and image metadata
        // are not sent out (output Stream and recoding of images) until
        // after the images have been processed by the Vision Processor.
        bool _postProcessImages = true;

        ImageCaptureSource_e _imageCaptureSource = ImageCaptureSource_e::ImageCaptureSource_OpenCVWebCam;
        //This error flag is indicates if there is an error in the Image
        //Capture source... if so Image Capture cannot be Enabled.
        bool _imageCaptureSouceError = false;

        //If image capture has an error that prevents operation, this error number
        //will be non-zero.  The error number must be cleared before Image Capture can be
        //Enabled.
        ImageCaptureError_e _imageCaptureError = ImageCaptureError_e::ImageCaptureError_None;


        SensorType_e _imageSensorType =  SensorType_e::EO;

        ImageSensorMode_e _imageSensorMode = ImageSensorMode_e::ISM_RGB;

        std::shared_ptr<ImagePixelLocationToRealWorldLocation> _ImagePixelToRealWorldTranslator_sptr;

        //Image Capture Objects
        //A limited number are established at this time...
        //Later it might be advantages to create a List/Dictionary of
        //the different types of Image capture objects that could be use.
        std::shared_ptr<OpenCVWebcamImageCapture> _openCVWebcamImageCapture_sptr;
        std::shared_ptr<ImagePlusMetaDataFileReader> _ipmDataFileImageCapture_sptr;
        std::shared_ptr<CompressedImageFileReader> _compressedDataFileImageCapture_sptr;
        std::shared_ptr<Sensoray2253ImageCapture> _sensorayImageCapture_sptr;
        std::shared_ptr<CSI_Camera> _nvidiaCSIImageCapture_sptr;
        std::shared_ptr<VideoFileReader> _videoFileCapture_sptr;

        std::shared_ptr<ImageCaptureAClass> _currentImageCaptureObj_sptr;

        std::string _cameraCalDir;
        std::string _cameraCalFilename;


    public:
        ImageCaptureManager(std::string name, std::shared_ptr<ConfigData> config);

        /**
         * @brief Initialize
         * @throws exception if it can't get path to config data.
         */
        void Initialize();

        void ExecuteUnitOfWork() final;

        unsigned int GetNumberOfImagesCaptured();

        void ClearNumberOfImagesCaptured();

        bool PreCaptureImage();

        //Get a new image and fill in the metadata.
        //Return treu if image and metadata obtained ok,
        //otherwise return false.
        bool GetNewImage(ImagePlusMetadataMessage* imgPMetadataMsgPtr);

        bool SetupPixelToRealWorldTranslatorCalImageCorners(ImagePlusMetadataMessage *imgPMetadataMsgPtr,
                                                            bool useLocalTranslator);

        //Setup and configure a image capture source based on the setup parmeters in the
        //control message.  Returns false if setup ok, false if there was a setup error.
        bool SetupImageCaptureSource(std::shared_ptr<ImageCaptureControlMessage> imageCaptureControlMsg);

    };


}

#endif
