/* ****************************************************************
 * Stream Record Manager
 * DireenTech Inc.  (www.direentech.com)
 * Athr: Randy Direen PhD
 * Date: May 2016
 *
 * Developed under contract for:
 * Academy Center for UAS Research
 * Department of Electrical and Computer Engineering
 * HQ USAFA/DFEC
 * 2354 Fairchild Drive
 * USAF Academy, CO 80840-6236
 *
  *******************************************************************/

#ifndef STREAM_RECORD_MANAGER
#define STREAM_RECORD_MANAGER

#include <iostream>
#include <string>
#include <memory>
#include <opencv2/core.hpp>
#include <opencv2/imgproc.hpp>
#include "RecorderPlayer/ImagePlusMetadataRecorder.h"
// #include <opencv2/imagecodecs/imgcodecs.hpp> //OpenCV 3.0 only
//#include <opencv2/videoio/videoio.hpp> //OpenCV 3.0 only
#include <opencv2/features2d/features2d.hpp>

#include <RabitManager.h>
#include <message_pool.h>

#include "../../Messages/all_manager_message.h"
#include "../../Messages/StreamRecordImagesControlMessage.h"
#include "../../Messages/ImageLoggingControlMessage.h"
#include "../../Utils/global_defines.h"
#include "../../Utils/config_data.h"
#include "../../Utils/logger.h"

#include "vision_record_play.h"

// Manually include this file that has been autogenerated
#include "StreamRecordManagerWSRMgr.h"

using namespace Rabit;

#define NDATASTREAMS 2


namespace videre
{

    //The StreamRecordManager is responsible for compressing received images
    //and then Recording / Loging the Image plus the image's metadata
    //to a file and to transmit the image to other locations (ground station
    //or other receive ends).

    //Images and metadata my come from the Image Capture Manager (Pre-Process) or from the
    //Vision Process Manager (Post-Process).  Typically only one of the two methods will be used:
    //Pre or Post Processed images.
    //For Pre-Processing, the Stream Record Manager contains a Pool of empty images messages.
    //The StreamRecordManager sends empty images messages to the Image Capture Manager.  The
    //Image Capture Manager fills in images and metadata and sends the message back to the
    //Stream Record Manager.  The Stream Record Manager then compresses and sends the image out
    //and logs the image plus metadata per the system handling instructions contained in the
    //StreamRecordImageControlMesssage parameter settings.

    class StreamRecordManager : public StreamRecordManagerWSRMgr
    {

    private:
        //Logging System
        log4cxx::LoggerPtr log4cpp_;

        const int NFrames = 2;

        const int ImagePoolSize = 3;

        //The StreamRecordManager keeps of pool of ImagePlusMetaData
        //messages.  The pool  should be atleast two
        //so that StreamRecordManager can be recording/procesing an image
        //while the ImageCaptureManager is filling a new ImagePlusMetaData message.
        //The StreamRecordManager will typically send empty ImagePlusMetaData messages
        //to the Image Manager and the Image Manager will fill the message with an image
        //plus metadata and send the message back to the StreamRecordManager for processing
        //The StreamRecordManager will return processed messages back to the pool.
        std::unique_ptr<MessagePool> _imageMessagePool_uptr;

        //The StreamRecordManager keeps of pool of CompressedImageMessages.
        //Compressed image messages are send to the Comms manager for transport,
        //and the Comms Manager sends the empty messages back for re-use.
        std::unique_ptr<MessagePool> _compressedImageMessagePool_uptr;


        std::shared_ptr<ConfigData> _config_sptr;

        //Messages
        std::shared_ptr<StreamRecordImageControlMesssage> _streamRecordControlMsg_sptr;

        std::shared_ptr<ImageLoggingControlMessage> _imageLoggingControlMsg;

        //Queues
        //This Queue is to recieve Image Plus Metadata messages.
        //from the Image Capture Manager or from the Vision Process Manager.
        std::shared_ptr<RabitMsgPtrSPSCQueue> _StreamRecordRxIPMDMsgQueue;

        //This Queue is to send Emtpty Image Plus Metadata messages...
        //to the Image Capture Manager or to the Vision Process Manager.
        std::shared_ptr<RabitMsgPtrSPSCQueue> _StreamRecordEmptyIPMDMsgQueue;


        //Image messages sent to the Comm Mgr for transport.
        std::shared_ptr<RabitMsgPtrSPSCQueue> _imageStreamMsgQueue_sptr;

        //The Comm Mgr sends the empty messages back in this queue for reuse.
        std::shared_ptr<RabitMsgPtrSPSCQueue> _imageStreamEmptyMsgQueue_sptr;

        std::string _record_directory;
        std::string _record_base_name;
        std::string _recordVideo_base_name;
        double _record_fps;
        double _videoRecordStartTime  = 0;
        unsigned int _videoRecordStartImageNumber = 0;
        int _stream_quality;

        //Either use Video Recording or use
        //Image Plus Metadata Recording.
        bool _videoRecordingEnabled = false;

        TelemetryMessage _telemetryMessage;

        //This is 1/Streaming frames per second.
        double _minTimeSecBetweenStreamImages = 0.1;

        RabitStopWatch _imageStreamTxStopwatch;

        bool _imageStreamDataQueueFullMsgSent = false;

        std::vector<int> _compress_params;

        std::unique_ptr<VisionRecordPlay> _videoRecorder_uptr;

        VidereImageprocessing::ImagePlusMetadataRecorder _imagePlusMetadataRecorder;

        cv::Mat _resizedImage;

    public:
        StreamRecordManager(std::string name, std::shared_ptr<ConfigData> config);

        /**
         * @brief Initialize
         * @throws exception if it can't get path to config data.
         */
        void Initialize();

        void ExecuteUnitOfWork() final;

        //Add Empty ImagePlusDataMessages from the IMage Message Pool
        //to the EmptyImagePlusMetadataQueue.
        //Empty messages are only added if some level of the Stream
        //Manager is enabled.  This keeps the Image Manager from sending
        //this manager images when they are not being used.
        //Controlling the rate/timing of adding Empty messages to the
        //Queue is one way to throttle the rate that this manager is processing
        //images.
        void AddEmptyImageMsgsToQueue();

        //Get any empty Image Messages from the Empty Image Msg Queue and
        //add them back to the Pool.
        void CheckForEmptyImageMessages();

        virtual void Shutdown() final;
    };


}

#endif //STREAM_RECORD_MANAGER
