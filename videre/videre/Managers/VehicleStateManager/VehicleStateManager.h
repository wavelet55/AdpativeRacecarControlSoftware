/* ****************************************************************
 * Athr(s): Randy Direen, PhD
 * Harry Direen PhD,
 * DireenTech Inc.  (www.DireenTech.com)
 * Date: Aug, 2018
 *
 * Vehicle State Manager
 * Generates the best estimate of the vehicle state including
 * postion, velocity, and orientation.
 * Uses GPS, IMU, Car speed and Track Mapping information to generate the 
 * vehicle state.
 *******************************************************************/

#ifndef VIDERE_DEV_VEHICLESTATEMANAGER_H
#define VIDERE_DEV_VEHICLESTATEMANAGER_H

#include <iostream>
#include <string>
#include <memory>
#include <vector>
#include <sstream>
#include <unordered_map>
#include <RabitManager.h>
#include <RabitStopWatch.h>
#include <RabitMessageQueue.h>
#include <ManagerStatusMessage.h>
#include <ManagerControlMessage.h>
#include <ManagerStats.h>
#include <ManagerStatusMessage.h>
#include "global_defines.h"
#include "all_manager_message.h"
#include "../../Utils/config_data.h"
#include "../../Utils/logger.h"
#include "../../Utils/timing.h"
#include "DataRecorder.h"
#include "DataRecorderStdHeader.h"
#include "VehicleStateDataRecord.h"
#include "ImageLoggingControlMessage.h"
#include "AccelerometerGyroMessage.h"
#include "QuaternionMessage.h"
#include "HeadOrientationControlMessage.h"
#include "VehicleInertialStatesMessage.h"
#include "ResetOrientationStateMessage.h"
#include "GPSFixMessage.h"
#include "Quaternion.h"
#include <armadillo>

// Manually include this file that has been autogenerated
#include "VehicleStateManagerWSRMgr.h"

using namespace Rabit;

namespace videre
{

    class VehicleStateManager : public VehicleStateManagerWSRMgr
    {
    private:
        //Logging System
        log4cxx::LoggerPtr log4cpp_;

        std::shared_ptr<ConfigData> _config_sptr;

        //Messages
        std::shared_ptr<QuaternionMessage> _vehicleOrientationQuaternionMsg;

        std::shared_ptr<ImageLoggingControlMessage> _loggingControlMsg;

        std::shared_ptr<GPSFixMessage> GPSFixMsgPtr;

        std::shared_ptr<HeadOrientationControlMessage> _headOrientationControlMsg;

        std::shared_ptr<ResetOrientationStateMessage> _resetOrientationStateMsg;

        //This manager will generate and post the vehicle inertial state information.
        std::shared_ptr<VehicleInertialStatesMessage> _vehicleInertialStatesMsg;

        //Queues
        //This Queue is to recieve IMU Accelerometer / Gyro messages from the IMUCommsManager.
        //This queue type is point-to-point or manager to manager so that non-locking
        //queues can be used.
        std::shared_ptr<RabitMsgPtrSPSCQueue> VehicleStateIMUMsgRxQueue;

        //This Queue is to send Emtpty messages back to the IMU Comms Manager
        //All messages pulled from the VehicleStateIMUMsgRxQueue must be returned here.
        std::shared_ptr<RabitMsgPtrSPSCQueue> VehicleStateIMUEmptyMsgQueue;


        DataRecorder _dataRecorder;
        DataRecorderStdHeader _dataRecorderStdHeader;
        VehicleStateDataRecord _vehicleStateDataRecord;

        bool EnableVehicleStatefLogging = true;

        int _processCounter = 0;

        //Head Quaternion state relative to the Inertial Frame
        double _lastSampleTime = 0.0;

        Quaternion_t _vehicleQIStateEst;

        Quaternion_t _vehicleQIStatePred;

        arma::dmat _M4x4Tmp;

        arma::dmat _M3x3Tmp;

        double _filterGainAlpha = 0.99;


    public:
        VehicleStateManager(std::string name, std::shared_ptr<ConfigData> config);

        virtual void Initialize();

        void SetDefaultSystemValues();

        void ResetState();

        void UpdateVehicleOrientationInertialState(AccelerometerGyroMessage* agMsgPtr);

        AccelerometerGyroMessage* GetNextAccelGyroMsg();

        virtual void ExecuteUnitOfWork() final;

        //The Startup method is called once when the manager thread is first
        //started.  It can be used for any necessary initialization processess
        //that have to be done after the manager's constructor.
        virtual void Startup() final;

        virtual void Shutdown() final;




    };

}
#endif //VIDERE_DEV_VEHICLESTATEMANAGER_H
