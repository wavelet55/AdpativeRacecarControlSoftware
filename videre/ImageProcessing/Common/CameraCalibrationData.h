/* ****************************************************************
 * DireenTech Inc.  (www.direentech.com)
 * Athr: Harry Direen PhD
 * Date: April 2017
 *
 * Developed under contract for:
 * Academy Center for UAS Research
 * Department of Electrical and Computer Engineering
 * HQ USAFA/DFEC
 * 2354 Fairchild Drive
 * USAF Academy, CO 80840-6236
 *
 *  Camera Calibration Data
 *  Camera Calibration data is generated by an opencv process.
 *
   *******************************************************************/

#ifndef VIDERE_DEV_CAMERACALIBRATIONDATA_H
#define VIDERE_DEV_CAMERACALIBRATIONDATA_H

#include <boost/math/constants/constants.hpp>
#include <opencv2/core.hpp>
#include <opencv2/core/core.hpp>
#include "CommonImageProcTypesDefs.h"

namespace ImageProcLibsNS
{
    ///Camera calibration data including:
    ///Intrinsic calibration matrix
    ///Distortion Coeffients
    ///Rotation Calibration Matrix
    ///Translation Calibration Matrix
    class CameraCalibrationData
    {

    public:
        //Intrinsic calibration matrix
        //The fx and fy focal lengths, long with the ofset values
        // are typically given in pixels.
        cv::Mat cvIntrinsicCalM;

        //Distortion coefficient vector... a 1x5 matrix
        cv::Mat  cvDistortionCoeff;

        //Rotation matrix from the camera coordinate frame to the uav coordinate frame
        cv::Mat  cvRotationCalM;

        //Translation vector from the camera coordinate frame to the uav coordinate frame
        cv::Mat  cvTranslationCalM;

    private:
        double _cameraFocalLength = 1.0;

        double _calibrationScaleFactor = 1.0;
        double _calibrationScaleFactorInverse = 1.0;

        //Camera Mounting Correction Information
        //The Camera Mounting information may be used to generate the
        //cvRotationCalM matrix and the cvTranslationCalM.
        //It is assumed that a camera is mounted to the bottom of the UAV
        //with standard position of the image plane facing straight down,
        //the top of the camera image facing the front of the UAV,
        //and the center of the image approximately center of the UAV (GPS center).
        //Each of the correction factors compensate from the non-standard mounting.

        //The Yaw correction is the number of degrees the top of the camera image
        //plane is shifted from aligning with the front of the UAV... if the
        //top of the image is aligned with the right wing... the correction factor
        //will be 90 degrees.
        double _YawCorrectionDegrees = 0;

        //The Pitch correction is the number of degrees the image plane is forward (+)
        //or backwards (-) of straight down (looking from the UAV down).
        double _PitchCorrectionDegrees = 0;

        //The Roll correction is the number of degrees the image plane is right (+)
        //or left (-) of straight down (looking from the UAV down).
        double _RollCorrectionDegrees = 0;

        //The number of meters the center of the image is forward (+) or backward (-)
        //of the UAV center.
        double _DelXCorrectionMeters = 0;

        //The number of meters the center of the image is forward (+) or backward (-)
        //of the UAV center.
        double _DelYCorrectionMeters = 0;

        //The number of meters the center of the image is below (+) or above (-)
        //of the UAV center.
        double _DelZCorrectionMeters = 0;

    public:
        //If Camera Mounting Correction information is being used, set
        //to true, if false, the cvRotationCalM and cvTranslationCalM
        //may be set directly via a config file or by user.
        bool UseCameraMountingCorrection = true;

        CameraCalibrationData();

        //Copy Constructor
        CameraCalibrationData(const CameraCalibrationData &ccd);

        ~CameraCalibrationData();

        double GetCalibrationScaleFactor() const
        {
            return _calibrationScaleFactor;
        }

        double GetCalibrationScaleFactorInverse() const
        {
            return _calibrationScaleFactorInverse;
        }

        void SetCalibrationScaleFactor(double calSF)
        {
            calSF = calSF < 1e-6 ? 1e-6 : calSF;
            _calibrationScaleFactor = calSF;
            _calibrationScaleFactorInverse = 1.0 / calSF;
        }

        double GetCameraFocalLength() const
        {
            return _cameraFocalLength;
        }

        void SetCameraFocalLength(double focalLen)
        {
            focalLen = focalLen < 1e-6 ? 1e-6 : focalLen;
            _cameraFocalLength = focalLen;
        }

        double GetYawCorrectionDegrees() const
        {
            return _YawCorrectionDegrees;
        }

        void SetYawCorrectionDegrees(double value)
        {
            _YawCorrectionDegrees = value < -180.0 ? -180.0 : value > 180.0 ? 180.0 : value;
        }

        double GetPitchCorrectionDegrees() const
        {
            return _PitchCorrectionDegrees;
        }

        void SetPitchCorrectionDegrees(double value)
        {
            _PitchCorrectionDegrees = value < -180.0 ? -180.0 : value > 180.0 ? 180.0 : value;
        }

        double GetRollCorrectionDegrees() const
        {
            return _RollCorrectionDegrees;
        }

        void SetRollCorrectionDegrees(double value)
        {
            _RollCorrectionDegrees = value < -180.0 ? -180.0 : value > 180.0 ? 180.0 : value;
        }


        double GetDelXCorrectionMeters() const
        {
            return _DelXCorrectionMeters;
        }

        double GetDelXCorrectionCentiMeters() const
        {
            return 100 * _DelXCorrectionMeters;
        }

        double GetDelXCorrectionMilliMeters() const
        {
            return 1000 * _DelXCorrectionMeters;
        }

        void SetDelXCorrectionMeters(double value)
        {
            _DelXCorrectionMeters = value < -10.0 ? -10.0 : value > 10.0 ? 10.0 : value;
        }

        void SetDelXCorrectionCentiMeters(double value)
        {
            SetDelXCorrectionMeters(0.01 * value);
        }

        void SetDelXCorrectionMilliMeters(double value)
        {
            SetDelXCorrectionMeters(0.001 * value);
        }

        double GetDelYCorrectionMeters() const
        {
            return _DelYCorrectionMeters;
        }

        double GetDelYCorrectionCentiMeters() const
        {
            return 100 * _DelYCorrectionMeters;
        }

        double GetDelYCorrectionMilliMeters() const
        {
            return 1000 * _DelYCorrectionMeters;
        }

        void SetDelYCorrectionMeters(double value)
        {
            _DelYCorrectionMeters = value < -10.0 ? -10.0 : value > 10.0 ? 10.0 : value;
        }

        void SetDelYCorrectionCentiMeters(double value)
        {
            SetDelYCorrectionMeters(0.01 * value);
        }

        void SetDelYCorrectionMilliMeters(double value)
        {
            SetDelYCorrectionMeters(0.001 * value);
        }

        double GetDelZCorrectionMeters() const
        {
            return _DelZCorrectionMeters;
        }

        double GetDelZCorrectionCentiMeters() const
        {
            return 100 * _DelZCorrectionMeters;
        }

        double GetDelZCorrectionMilliMeters() const
        {
            return 1000 * _DelZCorrectionMeters;
        }

        void SetDelZCorrectionMeters(double value)
        {
            _DelZCorrectionMeters = value < -10.0 ? -10.0 : value > 10.0 ? 10.0 : value;
        }

        void SetDelZCorrectionCentiMeters(double value)
        {
            SetDelZCorrectionMeters(0.01 * value);
        }

        void SetDelZCorrectionMilliMeters(double value)
        {
            SetDelZCorrectionMeters(0.001 * value);
        }

        void ClearAll();

        void SetDefaults();

        //Copy the this CameraCalibrationData into outpMat;
        void CopyTo(CameraCalibrationData &outpCalData) const;

        void SetIntrinsicCalibrationData(double *intrinsicCal3x3Mtx);

        void SetIntrinsicCalibrationData(cv::Mat &intrinsicCal3x3Mtx);

        void SetDistortionCalibrationData(double *distortionCal5xVec);

        void SetDistortionCalibrationData(cv::Mat &distortionCal5xVec);

        //Rotation matrix from the camera coordinate frame to the uav coordinate frame
        void SetRotationCalibrationData(double *rotationCal3x3Mtx);

        void SetRotationCalibrationData(cv::Mat &rotationCal3x3Mtx);

        //Translation vector from the camera coordinate frame to the uav coordinate frame
        void SetTranslationCalibrationData(double *translationCal3xVec);

        void SetTranslationCalibrationData(cv::Mat &translationCal3xVec);

        void GenerateRotationXlationCalFromCameraMountingCorrection();

    };
}

#endif //VIDERE_DEV_CAMERACALIBRATIONDATA_H
